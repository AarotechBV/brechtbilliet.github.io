<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.brecht.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.brecht.io/" rel="alternate" type="text/html" /><updated>2022-07-14T16:15:42+02:00</updated><id>https://blog.brecht.io/feed.xml</id><title type="html">Frontend software architect living in Belgium</title><subtitle></subtitle><entry><title type="html">How covid affected StrongBrew</title><link href="https://blog.brecht.io/how-covid-affected-strongbrew/" rel="alternate" type="text/html" title="How covid affected StrongBrew" /><published>2020-11-03T00:00:00+01:00</published><updated>2020-11-03T00:00:00+01:00</updated><id>https://blog.brecht.io/how-covid-affected-strongbrew</id><content type="html" xml:base="https://blog.brecht.io/how-covid-affected-strongbrew/"><![CDATA[<h2 id="covid">Covid</h2>

<p>These are challenging times… Harsh times for people and companies. Even for some companies it results in fatal decisions.</p>

<p>Unfortunately we were impacted by COVID as well, as we haven’t earned a single dime since March 2020.
If we take this painful aspect into consideration in combination with the fact that Kwinten is pursuing a new job at Stackblitz we decided to stop the legal entity StrongBrew VOF. StrongBrew VOF is no more… I (Brecht) personally want to thank Kwinten for this awesome adventure and I hope we can work together once again in the future.</p>

<p>That being said… I will continue all StrongBrew activities except the trainings. The brews that we have given, both locally and internationally will not be updated anymore, nor will they be given in companies. We want to thank all of you for following our trainings, reading our content and trusting us with important problems.</p>

<h2 id="blog">Blog</h2>

<p>Most articles of the blog are more than a year old. My goal is to pump new life into the blog and help you all with technical content and personal experience. I still do Angular/RxJS/Architecture on a full time basis and recently started freelancing for a new awesome startup called <a href="https://www.rosa.be/">rosa</a>.</p>

<p>The techstack we use there is:</p>
<ul>
  <li>Angular</li>
  <li>Nx</li>
  <li>Typescript</li>
  <li>RxJS</li>
  <li>Nest.js</li>
  <li>a bunch other cool technologies</li>
</ul>

<h2 id="what-can-i-still-do-for-your-company-remotely">What can I still do for your company (remotely)</h2>

<p>In these challenging times we still believe your company can benefit from the services of StrongBrew.
The services listed below is something that I still do 1/5th of my time:</p>

<ul>
  <li>Code reviews</li>
  <li>Pair programming sessions</li>
  <li>Help you with the interview process of your possible employees</li>
  <li>Help you with kickstarting a new project</li>
  <li>Overal architectural support</li>
  <li>Tackle very specific problems</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Unfortunately our company has died a slow death, but you will be hearing more of StrongBrew in the near future. Stay safe! Stay healthy! And if you have questions don’t hesitate to reach out.
Cheers! Brecht.</p>]]></content><author><name>brechtbilliet</name></author><category term="Covid" /><category term="COVID" /><summary type="html"><![CDATA[What is the future of StrongBrew? How were we impacted by COVID?]]></summary></entry><entry><title type="html">Managing state in Angular</title><link href="https://blog.brecht.io/managing-state-in-angular/" rel="alternate" type="text/html" title="Managing state in Angular" /><published>2019-07-29T00:00:00+02:00</published><updated>2019-07-29T00:00:00+02:00</updated><id>https://blog.brecht.io/managing-state-in-angular</id><content type="html" xml:base="https://blog.brecht.io/managing-state-in-angular/"><![CDATA[<h2 id="about-this-article">About this article</h2>

<p>When we create single-page-applications, there is no way around it. Sooner or later we are going to be facing state. There are a lot of solutions out there to manage that state and together with those solutions there are a lot of opinions.
Especially when working with experienced developers, there opinions get stronger and often result in interesting discussions.</p>

<p>This article is not about which libraries to use, but to learn about what state is and how we can reason about it. The examples are all written in Angular, however the approaches are not specific to Angular.</p>

<p>In this article we will learn about the different kind of state types within our application, and where that state might live.</p>

<h2 id="what-is-state">What is state?</h2>

<p>State is basically everything that will define the UI that our user will be using.
State could be whether a button should be visible or not, it could be the result of that button click and it could also be an <code class="language-plaintext highlighter-rouge">Array</code> of users that is coming from an API.
State can live in different places throughout our entire application. Some state is very specific to a certain component where other state might be shared in different parts of our application. One piece of state could be a singleton instance, where a another piece of state could share the limited lifespan of a component that can be destroyed at any time.</p>

<p>This big variety of what state could be, how long it lives and where it comes from results in complexity that we need to manage.</p>

<h2 id="what-is-state-management">What is state management?</h2>

<p>State management is the concept of adding, updating, removing and reading pieces of state in an application. When we have deeply nested data structures and we want to update a specific part deep down in the tree, it might become complex. In that case we have state management libraries that contain a <code class="language-plaintext highlighter-rouge">Store</code> which helps us with state management to get rid of that complexity. A quick note, we have to be careful that these libraries don’t add complexity by overusing them.</p>

<h2 id="reactive-state">Reactive state</h2>

<p>Combining state management together with reactive programming can be a really nice way to develop single-page-applications. Whether our focus lies on Angular, Vue or React, combining these two principles  will result in more predictable applications.</p>

<p>Now what has state to do with reactive programming?
A piece of state can change over time, so in a way we are waiting for new state changes. That makes it asynchronous.</p>

<p>Let’s take this example for instance:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// false------true-----false---true...</span>
<span class="nx">sidebarCollapsed$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">sidebarCollapsed$</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">sidebarCollapsed$</code> stream starts out with <code class="language-plaintext highlighter-rouge">false</code>, later on it becomes <code class="language-plaintext highlighter-rouge">true</code> and so on. This stream keeps on living. In Angular this state can be consumed with the <a href="https://angular.io/api/common/AsyncPipe">async pipe</a> as easy as:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;my-awesome-sidebar</span> <span class="na">*ngIf=</span><span class="s">"sidebarCollapsed$|async"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/my-awesome-sidebar&gt;</span>
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">async</code> pipe will subscribe to the <code class="language-plaintext highlighter-rouge">sidebarCollapsed$</code> pass it to the component, mark it for check and will automatically unsubscribe when the component gets destroyed.
Keeping state in an observer pattern is nice because we can subscribe to the changes. Oh, and did I mention it plays super nice with Angular?</p>

<p>We can either use a <code class="language-plaintext highlighter-rouge">BehaviorSubject</code> or state management frameworks that support Observables. Here are some really great ones with Observable support:</p>

<ul>
  <li><a href="https://ngrx.io">Ngrx</a></li>
  <li><a href="https://netbasal.gitbook.io/akita/">Akita</a></li>
  <li><a href="https://github.com/ngxs/store">Ngxs</a></li>
</ul>

<h2 id="immutability-and-unidirectional-data-flow">Immutability and Unidirectional data flow</h2>

<p>Before we dive deeper in state, there are 2 important principles that we should follow when managing state.
The first principle is <strong>immutability</strong>, which means that we should never mutate data directly without creating a new reference of that object.
If we mutate data directly, our application becomes unpredictable and it’s really hard to trace bugs.
When we work in an immutable fashion we can also take advantage of performance strategies like the <a href="https://netbasal.com/a-comprehensive-guide-to-angular-onpush-change-detection-strategy-5bac493074a4">ChangeDetection.OnPush</a> from Angular or React its <a href="https://reactjs.org/docs/react-api.html#reactpurecomponent">PureComponent</a>.</p>

<p>When we use typescript we can enforce the typescript compiler to complain when we mutate data</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">Foo</span> <span class="o">=</span> <span class="p">{</span>
    <span class="k">readonly</span> <span class="na">bar</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span> 
    <span class="k">readonly</span> <span class="na">baz</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span> 
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">first</span> <span class="o">=</span> <span class="p">{</span><span class="na">bar</span><span class="p">:</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">,</span> <span class="na">baz</span><span class="p">:</span> <span class="mi">1</span><span class="p">};</span>
<span class="nx">first</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">test2</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// compilation error</span>
<span class="nx">first</span> <span class="o">=</span> <span class="p">{...</span><span class="nx">first</span><span class="p">,</span> <span class="na">bar</span><span class="p">:</span> <span class="dl">'</span><span class="s1">test2</span><span class="dl">'</span><span class="p">};</span> <span class="c1">// success</span>
</code></pre></div></div>

<p>In the previous example we have overwritten the <code class="language-plaintext highlighter-rouge">first</code> instance with an entire new instance that has an updated <code class="language-plaintext highlighter-rouge">bar</code> property.</p>

<p>Arrays can be handled like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Brecht</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Kwinten</span><span class="dl">'</span><span class="p">];</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// BAD: arr is mutated</span>
<span class="nx">arr</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">arr</span><span class="p">,</span> <span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">];</span> <span class="c1">// Good, arr gets new reference</span>
</code></pre></div></div>
<p>the <code class="language-plaintext highlighter-rouge">Array</code> prototype also has some great helper functions that we can use to enforce immutability like <code class="language-plaintext highlighter-rouge">map()</code> and <code class="language-plaintext highlighter-rouge">filter()</code> but this is not in scope for this article.</p>

<p>The second principle is <strong>Unidirectional data flow</strong>.
In a nutshell, this means that we should never use two-way data binding on state. It is the absolute owner of that specific piece of state that is in charge of updating it (immutable of course).</p>

<p>Both of these principles are highly enforced by the <a href="https://redux.js.org/">Redux</a> pattern.</p>

<h2 id="what-kind-of-states-are-there">What kind of states are there?</h2>

<h3 id="router-state">Router state</h3>

<p>Often forgotten, but one of the most important pieces of state a web application can have. Putting state in the route gives us the following advantages:</p>

<ul>
  <li>We can use the browser navigation buttons</li>
  <li>We can bookmark the state</li>
  <li>We can can copy and paste the url with the state to other users</li>
  <li>We don’t have to manage it, it’s always there in the route</li>
</ul>

<p><strong>Tip</strong>: Instead of handling modals with a <code class="language-plaintext highlighter-rouge">userDetailModalVisible</code> property, why not enjoy all the benefits mentioned above and bind it to a <code class="language-plaintext highlighter-rouge">users/:userId</code> route?
Using a child <code class="language-plaintext highlighter-rouge">router-outlet</code> in Angular makes this a piece of cake as we can see in this snippet.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table&gt;</span>
<span class="c">&lt;!--contains users --&gt;</span>
<span class="nt">&lt;/table&gt;</span>
<span class="nt">&lt;router-outlet&gt;</span>
<span class="c">&lt;!-- user detail modal rendered in here --&gt;</span>
<span class="nt">&lt;/router-outlet&gt;</span>
</code></pre></div></div>

<h3 id="component-state">Component state</h3>

<p>Every component could contain state. That state could be shared with its dumb components or could be used in the component itself.
Eg: When an <code class="language-plaintext highlighter-rouge">ItemComponent</code> has a property <code class="language-plaintext highlighter-rouge">selectedItems</code> which is an array of ids, and that array is never used in other components (that aren’t children of that component), we can consider it component state. 
It belongs to that component, therefore the component should be responsible for it. Child components can consume that state but should <em>never mutate it</em>. Those components can notify their parent that is responsible for it, which could update it in an immutable way. For more information about smart and dumb components <a href="https://blog.strongbrew.io/components-demystified/#smart-vs-dumb-components">look here</a>.</p>

<p>Personally, I try to avoid state management frameworks for managing component state because it’s the responsibility of that component to manage that state.
There are however good reasons to use state management frameworks to manage component state:</p>

<ul>
  <li>When the state management is very complex</li>
  <li>If we want to do <a href="https://blog.strongbrew.io/Cancellable-optimistic-updates-in-Angular2-and-Redux/">optimistic updates</a></li>
  <li>If we want to use it for <a href="https://blog.strongbrew.io/How-we-made-our-app-real-time-in-6-lines-of-code/">realtime stuff</a></li>
</ul>

<p>If the state management of the component becomes a bit too complex and we don’t want to use a state management framework just yet, we could use a state reducer in the component itself.</p>

<h3 id="persisted-state">Persisted state</h3>

<p>Persisted state, is state that is being remembered when the user navigates between different pages. This could be whether a sidebar was collapsed or not, or when the user returns to a grid with a lot of filters and he wants them to be remembered and reapplied when he returns.
Another example is a wizard with different steps, and every step needs to be persisted so the user can navigate back and forth and the last page is a result of all these steps.</p>

<p>Persisted state is the type of state where we typically use a state management framework for, that being said, if we don’t want to rely on an external dependency we can also manage it in a Angular <code class="language-plaintext highlighter-rouge">service</code> which can be a singleton that is shared throughout the entire application. If that <code class="language-plaintext highlighter-rouge">service</code> becomes too complex or there is a lot of state to manage, I would consider to put that state into a state management framework.</p>

<h3 id="shared-state">Shared state</h3>

<p>When we are talking about shared state, we are talking about state that needs to be shared between different parts of our application. State that is being shared throughout different smart components. This means that the instance of this piece of state should live on a higher level, than the components that want to consume it.</p>

<p>Shared state can be managed in a state management framework like <a href="https://redux.js.org/">Redux</a>, <a href="https://ngrx.io">Ngrx</a>, <a href="https://netbasal.gitbook.io/akita/">Akita</a>, <a href="https://github.com/ngxs/store">Ngxs</a> and so on, but if that state is small and simple we can also manage it manually.
Let’s say that we want an <code class="language-plaintext highlighter-rouge">Observable</code> of an <code class="language-plaintext highlighter-rouge">Array</code> of countries that we need to share throughout the entire application. In Angular we could have a <code class="language-plaintext highlighter-rouge">CountryService</code> that fetches the countries from the API once, and then shares it throughout the entire application. 
For that we can use the <code class="language-plaintext highlighter-rouge">shareReplay</code> operator from RxJS.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">CountryService</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="nx">countries$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">httpClient</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">countries</span><span class="dl">'</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">shareReplay</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Simple right, one line of code?! For this we don’t <strong>need</strong> a state management framework, although it can also have its benefits.
Some developers like to keep all their master data in a <code class="language-plaintext highlighter-rouge">Redux</code> store, and that’s fine. Just know that we don’t have to.
I like to develop by the <strong>KISS</strong> principle (<strong>K</strong>eep <strong>I</strong>t <strong>S</strong>imple <strong>S</strong>tupid) as much as possible, so I favor this approach many times.
Think about the amount of lines of code we saved by this approach.
Beware that every line of code we write, not only needs to be written but also maintained.</p>

<h2 id="which-state-needs-to-be-managed">Which state needs to be managed?</h2>

<p>Now that we know what state is, we have to ask ourselves which state needs to be managed, and where do we manage that state? In a component, singleton service or a framework (Store)?</p>

<p>This is the part where the strong opinions surface.
I would suggest to use what works for you and your team and really think about, but here are  <strong>my personal opinionated</strong> guidelines:</p>

<ul>
  <li>I try to avoid state management frameworks where possible. RxJS already leverages us with a lot already and I like to think <strong>KISS</strong>.</li>
  <li>I try to avoid using state management frameworks to communicate with different parts in my application, I believe state is unrelated to communication.</li>
  <li>When my component can handle the state and it’s not too complex, I let my component in charge of managing that state.</li>
  <li>Master data like countries are exposed in a service which uses the <code class="language-plaintext highlighter-rouge">shareReplay</code> operator.</li>
  <li>I don’t put the result of a <code class="language-plaintext highlighter-rouge">getById</code> API call into a store if there is no one consuming that state except for the component requesting it</li>
  <li>I use a facade between my smart components and my store/services to make refactoring easier in the future.</li>
</ul>

<p>However, there is also a popular opinion out there to put literally everything in the store which has the following advantages:</p>

<ul>
  <li>We can see the flow of the code in devtools</li>
  <li>Consistent pattern</li>
  <li>We can leverage selectors with memoization</li>
  <li>Easier for realtime applications</li>
  <li>Optimistic updates are easier</li>
</ul>

<p>However, there are a few downsides as well:</p>

<ul>
  <li>A gigantic amount of bloat code: Bigger bundle size, more maintenance and dev time. Eg: If we would use the complete Ngrx pattern for the <code class="language-plaintext highlighter-rouge">countries$</code> example we would have to write an: <code class="language-plaintext highlighter-rouge">action</code>, <code class="language-plaintext highlighter-rouge">actiontype</code>, <code class="language-plaintext highlighter-rouge">effect</code> and a  <code class="language-plaintext highlighter-rouge">reducer</code>.</li>
  <li>Tightly coupled to a strong dependency that is hard to get rid of in the future</li>
  <li>Generally more complex</li>
  <li>The user his screen can get out of sync with the backend</li>
  <li>Cache invalidation: if we add a <code class="language-plaintext highlighter-rouge">currentUserToEdit</code> in the store, we have to get it out when we navigate away</li>
  <li>We can’t use the <code class="language-plaintext highlighter-rouge">async</code> pipe to cancel pending XHR requests</li>
  <li>We create a distributed monolith of some sort</li>
</ul>

<h2 id="wrapping-up">Wrapping up</h2>

<p>State management is a topic surrounded with discussions and opinions. There is no right or wrong, use what works for you and your team. There are awesome libraries out there, use them if it benefits you, but at least think about it before you use them. That’s the goal of this article after all, to get everyone to start thinking about state managment rather than jumping to the first solution.</p>

<h2 id="special-thanks">Special thanks</h2>

<p>Special thanks to the awesome reviewers:</p>

<ul>
  <li><a href="https://twitter.com/tim_deschryver">Tim Deschryver</a></li>
  <li><a href="https://twitter.com/jefiozie">Jeffrey Bosch</a></li>
  <li><a href="https://twitter.com/rubverm">Ruben Vermeulen</a></li>
</ul>]]></content><author><name>brechtbilliet</name></author><category term="brechtbilliet" /><category term="architecture" /><summary type="html"><![CDATA[About this article]]></summary></entry><entry><title type="html">A generic way of handling loading-status, saving-status and validation errors in Angular</title><link href="https://blog.brecht.io/generic-way-of-handling-loading-saving-and-validationerrors-in-angular/" rel="alternate" type="text/html" title="A generic way of handling loading-status, saving-status and validation errors in Angular" /><published>2019-01-25T00:00:00+01:00</published><updated>2019-01-25T00:00:00+01:00</updated><id>https://blog.brecht.io/generic-way-of-handling-loading-saving-and-validationerrors-in-angular</id><content type="html" xml:base="https://blog.brecht.io/generic-way-of-handling-loading-saving-and-validationerrors-in-angular/"><![CDATA[<p>When writing Angular applications there are always pieces of functionality that are being rewritten over and over again. 3 common usecases are:</p>

<ul>
  <li>Showing a <em>loading</em> status</li>
  <li>Showing an <em>acting</em> status (whether the user is adding, updating or removing data)</li>
  <li>Showing validation errors</li>
</ul>

<p>In this article we are going to implement a generic solution on how to fix these usecases.</p>

<h2 id="a-non-generic-way-of-loading-saving-and-handling-validation-errors-in-angular">A non generic way of loading, saving and handling validation errors in Angular</h2>

<p>Before we jump to the solution, let’s have a look at the impact of a non generic way of handling the previous called functionalities.
A solution that is often used might look like the following: (keep in mind that this functionality has to be implemented over and over again for every component)</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ngOnInit</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">loading</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">usersCompleted</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">citiesCompleted</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">userService</span><span class="p">.</span><span class="nx">fetch</span><span class="p">().</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">users</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">usersCompleted</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">loading</span> <span class="o">=</span> <span class="nx">usersCompleted</span> <span class="o">&amp;&amp;</span> <span class="nx">citiesCompleted</span><span class="p">;</span>
    <span class="p">});</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">citiesService</span><span class="p">.</span><span class="nx">fetch</span><span class="p">().</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">cities</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">citiesCompleted</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">loading</span> <span class="o">=</span> <span class="nx">usersCompleted</span> <span class="o">&amp;&amp;</span> <span class="nx">citiesCompleted</span><span class="p">;</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>
<p>We have to keep track of which call completes first because we can’t set loading to false, if there is call still busy. What happens when there is an error? We would have to implement that as well.</p>

<p>Now this code is only for fetching two lists of data, this becomes ugly pretty quickly and the worst thing about this is that we have to reimplement that for every component that does data fetching.</p>

<p>It becomes even worse if we want to update, add and remove data. Imagine that we have to handle validation errors as well:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">remove</span><span class="p">(</span><span class="nx">user</span><span class="p">:</span> <span class="nx">User</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="c1">// TODO: set acting to true</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">userService</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">user</span><span class="p">).</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// TODO: set acting to false</span>
    <span class="p">});</span>
<span class="p">}</span>
<span class="nx">update</span><span class="p">(</span><span class="nx">user</span><span class="p">:</span> <span class="nx">User</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="c1">// TODO: set acting to true</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">userService</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">user</span><span class="p">).</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// TODO: set acting to false</span>
        <span class="c1">// TODO: handle validation errors</span>
    <span class="p">});</span>
<span class="p">}</span>
<span class="nx">add</span><span class="p">(</span><span class="nx">user</span><span class="p">:</span> <span class="nx">User</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="c1">// TODO: set acting to true</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">userService</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">user</span><span class="p">).</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// TODO: set acting to false</span>
        <span class="c1">// TODO: handle validation errors</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>To handle validation errors we have to check if the HTTP status code is 400, manually map the data etc.</p>

<p>These code samples are in this article to prove a point. <strong>It’s dirty redundant logic that we have to implement over and over again</strong></p>

<h2 id="lets-clean-this-up">Let’s clean this up</h2>

<p>To achieve this we will use an Angular <em>service</em> in combination with an angular <em>interceptor</em> and Typescript <em>decorators</em>.</p>

<p>The first thing we need is a <code class="language-plaintext highlighter-rouge">HttpStatusService</code> that exposes 3 observables:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">loading$</code>: whether the user is fetching data</li>
  <li><code class="language-plaintext highlighter-rouge">acting$</code>: whether the user is removing, updating or adding data</li>
  <li><code class="language-plaintext highlighter-rouge">validationErrors$</code>: whether there are validation errors or not</li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// http-status.service.ts</span>
<span class="p">@</span><span class="nd">Injectable</span><span class="p">({</span>
  <span class="c1">// important to provide this service to the </span>
  <span class="c1">// injector of the root module </span>
  <span class="na">providedIn</span><span class="p">:</span> <span class="dl">'</span><span class="s1">root</span><span class="dl">'</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">HttpStatusService</span> <span class="p">{</span>
  <span class="c1">// regular subject because we don't want to replay</span>
  <span class="c1">// the validationerrors</span>
  <span class="k">private</span> <span class="nx">validationErrorsSub$</span> 
    <span class="o">=</span> <span class="k">new</span> <span class="nx">Subject</span><span class="o">&lt;</span><span class="nx">ValidationError</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">();</span>

  <span class="c1">// 2 subjects that replays the last value </span>
  <span class="c1">// (ideal for state)</span>
  <span class="k">private</span> <span class="nx">loadingSub$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReplaySubject</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">private</span> <span class="nx">actingSub$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReplaySubject</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

  <span class="c1">// we don't want to expose the subject for</span>
  <span class="c1">// encapsulation purposes. That's why we convert them</span>
  <span class="c1">// into observables</span>
  <span class="nx">getvalidationErrors$</span> <span class="o">=</span> 
    <span class="k">this</span><span class="p">.</span><span class="nx">validationErrorsSub$</span><span class="p">.</span><span class="nx">asObservable</span><span class="p">();</span>
  <span class="nx">loading$</span> <span class="o">=</span> 
    <span class="k">this</span><span class="p">.</span><span class="nx">loadingSub$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">distinctUntilChanged</span><span class="p">());</span>
  <span class="nx">acting$</span> <span class="o">=</span> 
    <span class="k">this</span><span class="p">.</span><span class="nx">actingSub$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">distinctUntilChanged</span><span class="p">());</span>

  <span class="c1">// these are just some regular setters to next </span>
  <span class="c1">// the values in our subjects</span>
  <span class="kd">set</span> <span class="nx">validationErrors</span><span class="p">(</span><span class="nx">errors</span><span class="p">:</span> <span class="nx">ValidationError</span><span class="p">[])</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">validationErrorsSub$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">errors</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">set</span> <span class="nx">loading</span><span class="p">(</span><span class="nx">val</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">loadingSub$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">set</span> <span class="nx">acting</span><span class="p">(</span><span class="nx">val</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">actingSub$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So we have a service that basically holds the state of our three statuses.
Now we still have to make sure that the setters of these observables are being called at the right place and the right time.
We don’t want to manually implement that for every call, so let’s create an interceptor for that.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Injectable</span><span class="p">({</span>
    <span class="na">providedIn</span><span class="p">:</span> <span class="dl">'</span><span class="s1">root</span><span class="dl">'</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">HttpStatusInterceptor</span> <span class="k">implements</span> <span class="nx">HttpInterceptor</span> <span class="p">{</span>
  <span class="c1">// keep track of the loading calls</span>
  <span class="k">private</span> <span class="nx">loadingCalls</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> 
  <span class="c1">// keep track of the acting calls</span>
  <span class="k">private</span> <span class="nx">actingCalls</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> 

  <span class="kd">constructor</span><span class="p">(</span>
    <span class="k">private</span> <span class="nx">httpStatusService</span><span class="p">:</span> <span class="nx">HttpStatusService</span>
  <span class="p">)</span> <span class="p">{}</span>

  <span class="k">private</span> <span class="nx">changeStatus</span><span class="p">(</span><span class="nx">val</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">,</span> <span class="nx">method</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">([</span><span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">PUT</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">DELETE</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">PATCH</span><span class="dl">'</span><span class="p">]</span>
      <span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">method</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">val</span> <span class="p">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">actingCalls</span><span class="o">++</span> <span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">actingCalls</span><span class="o">--</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">httpStatusService</span><span class="p">.</span><span class="nx">acting</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">actingCalls</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">method</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">val</span> <span class="p">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">loadingCalls</span><span class="o">++</span> <span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">loadingCalls</span><span class="o">--</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">httpStatusService</span><span class="p">.</span><span class="nx">loading</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">loadingCalls</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="p">...</span>
<span class="p">}</span>

</code></pre></div></div>

<p>As we can see, we have created a private <code class="language-plaintext highlighter-rouge">changeStatus()</code> function that will use the <code class="language-plaintext highlighter-rouge">loading</code> and <code class="language-plaintext highlighter-rouge">acting</code> 
setters of our <code class="language-plaintext highlighter-rouge">HttpStatusInterceptor</code> class.</p>

<p>If the HTTP-method is <code class="language-plaintext highlighter-rouge">POST</code>, <code class="language-plaintext highlighter-rouge">PUT</code>, <code class="language-plaintext highlighter-rouge">DELETE</code> or <code class="language-plaintext highlighter-rouge">PATCH</code> we have to update the counter of the <code class="language-plaintext highlighter-rouge">actingCalls</code> and if that count is bigger then 0, it means the user is acting and we have to update the <code class="language-plaintext highlighter-rouge">acting</code> property of the <code class="language-plaintext highlighter-rouge">HttpStatusService</code>.</p>

<p>If the HTTP-method is <code class="language-plaintext highlighter-rouge">GET</code> it should do the same for the <code class="language-plaintext highlighter-rouge">loadingCalls</code> property and <code class="language-plaintext highlighter-rouge">loading</code> setter of the <code class="language-plaintext highlighter-rouge">HttpStatusService</code>.</p>

<p>Of course we still have to implement the <code class="language-plaintext highlighter-rouge">intercept</code> function. Every time we intercept a call we have to change a status to <code class="language-plaintext highlighter-rouge">true</code>.
Because this means that the user is loading or acting.
The goal of an interceptor is to intercept a request, clone that request, do something with it and return it.
The <code class="language-plaintext highlighter-rouge">handle</code> function of the <code class="language-plaintext highlighter-rouge">HttpHandler</code> returns an observable. This is the perfect place to apply a <code class="language-plaintext highlighter-rouge">finalize</code> operator,
which we can use to set a status to <code class="language-plaintext highlighter-rouge">false</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nx">intercept</span><span class="p">(</span>
  <span class="nx">req</span><span class="p">:</span> <span class="nx">HttpRequest</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">,</span>
  <span class="nx">next</span><span class="p">:</span> <span class="nx">HttpHandler</span>
<span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">HttpEvent</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
  <span class="c1">// there is a new request, so we are definitely</span>
  <span class="c1">// loading or acting, we have to change the status</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">changeStatus</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">method</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">next</span><span class="p">.</span><span class="nx">handle</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">clone</span><span class="p">()).</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="c1">// when the request completes, errors or times out,</span>
    <span class="c1">// we have to change the status as well</span>
    <span class="nx">finalize</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">changeStatus</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">method</span><span class="p">);</span>
    <span class="p">})</span>
  <span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<p>This should automatically update the <code class="language-plaintext highlighter-rouge">loading$</code> and <code class="language-plaintext highlighter-rouge">acting$</code> observables in the <code class="language-plaintext highlighter-rouge">HttpStatusService</code>.
However, we have not fixed our validation errors issue yet. For that we can use the <code class="language-plaintext highlighter-rouge">catchError</code> operator that we place before the finalize operator:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">intercept</span><span class="p">(</span>
  <span class="nx">req</span><span class="p">:</span> <span class="nx">HttpRequest</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">,</span>
  <span class="nx">next</span><span class="p">:</span> <span class="nx">HttpHandler</span>
<span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">HttpEvent</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
  <span class="p">..</span>
  <span class="k">return</span> <span class="nx">next</span><span class="p">.</span><span class="nx">handle</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">clone</span><span class="p">()).</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="c1">// catch the error</span>
    <span class="nx">catchError</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">// if bad request &gt; validation erors</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">400</span><span class="p">)</span> <span class="p">{</span> 
        <span class="c1">// use the validationErrors setter to update</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">httpStatusService</span><span class="p">.</span><span class="nx">validationErrors</span> <span class="o">=</span> 
          <span class="nx">e</span><span class="p">.</span><span class="nx">error</span><span class="p">.</span><span class="nx">validationErrors</span><span class="p">;</span>
        <span class="c1">// make sure that this result never </span>
        <span class="c1">// reaches the component</span>
        <span class="k">return</span> <span class="nx">NEVER</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="c1">// throw the error back</span>
      <span class="c1">// or put that in the `HttpStatusService` as well ;-)      </span>
      <span class="k">return</span> <span class="nx">throwError</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span> 
    <span class="p">}),</span>
    <span class="nx">finalize</span><span class="p">(...)</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The entire interceptor class looks like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Injectable</span><span class="p">({</span>
    <span class="na">providedIn</span><span class="p">:</span> <span class="dl">'</span><span class="s1">root</span><span class="dl">'</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">HttpStatusInterceptor</span> <span class="k">implements</span> <span class="nx">HttpInterceptor</span> <span class="p">{</span>
  <span class="k">private</span> <span class="nx">loadingCalls</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> 
  <span class="k">private</span> <span class="nx">actingCalls</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> 

  <span class="kd">constructor</span><span class="p">(</span>
    <span class="k">private</span> <span class="nx">httpStatusService</span><span class="p">:</span> <span class="nx">HttpStatusService</span>
  <span class="p">)</span> <span class="p">{}</span>

  <span class="k">private</span> <span class="nx">changeStatus</span><span class="p">(</span><span class="nx">v</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">,</span> <span class="nx">method</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">([</span><span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">PUT</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">DELETE</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">PATCH</span><span class="dl">'</span><span class="p">]</span>
      <span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">method</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">v</span> <span class="p">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">actingCalls</span><span class="o">++</span> <span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">actingCalls</span><span class="o">--</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">httpStatusService</span><span class="p">.</span><span class="nx">acting</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">actingCalls</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">method</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">v</span> <span class="p">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">loadingCalls</span><span class="o">++</span> <span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">loadingCalls</span><span class="o">--</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">httpStatusService</span><span class="p">.</span><span class="nx">loading</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">loadingCalls</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">intercept</span><span class="p">(</span>
    <span class="nx">req</span><span class="p">:</span> <span class="nx">HttpRequest</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="nx">next</span><span class="p">:</span> <span class="nx">HttpHandler</span>
  <span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">HttpEvent</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">next</span><span class="p">.</span><span class="nx">handle</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">clone</span><span class="p">()).</span><span class="nx">pipe</span><span class="p">(</span>
      <span class="nx">catchError</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">400</span><span class="p">)</span> <span class="p">{</span> 
          <span class="k">this</span><span class="p">.</span><span class="nx">httpStatusService</span><span class="p">.</span><span class="nx">validationErrors</span> <span class="o">=</span> 
            <span class="nx">e</span><span class="p">.</span><span class="nx">error</span><span class="p">.</span><span class="nx">validationErrors</span><span class="p">;</span>
          <span class="k">return</span> <span class="nx">NEVER</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">throwError</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span> 
      <span class="p">}),</span>
      <span class="nx">finalize</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">changeStatus</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">method</span><span class="p">);</span>
      <span class="p">})</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>When registering the interceptor to the root module, the observables in the <code class="language-plaintext highlighter-rouge">HttpStatusService</code> will be updated automatically.</p>

<p>So in the rootModule we have to add the following code to the <code class="language-plaintext highlighter-rouge">providers</code> property of the <code class="language-plaintext highlighter-rouge">@NgModule</code> decorator:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">providers</span><span class="p">:</span> <span class="p">[</span>
  <span class="p">...</span>
  <span class="p">{</span>
    <span class="nl">provide</span><span class="p">:</span> <span class="nx">HTTP_INTERCEPTORS</span><span class="p">,</span>
    <span class="nx">multi</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nx">deps</span><span class="p">:</span> <span class="p">[</span><span class="nx">HttpStatusService</span><span class="p">],</span>
    <span class="nx">useClass</span><span class="p">:</span> <span class="nx">HttpStatusInterceptor</span>
  <span class="p">}</span>
<span class="p">]</span>
</code></pre></div></div>

<p>We can now use the <code class="language-plaintext highlighter-rouge">HttpStatusService</code> in our code as easy as this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">UserComponent</span> <span class="p">{</span>
  <span class="nx">loading$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">httpStatus</span><span class="p">.</span><span class="nx">loading</span><span class="p">;</span>
  <span class="nx">validationErrors$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">httpStatus</span><span class="p">.</span><span class="nx">validationErrors</span><span class="p">;</span>
  <span class="nx">acting$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">httpStatus</span><span class="p">.</span><span class="nx">loading</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span>
    <span class="k">private</span> <span class="nx">httpStatusService</span><span class="p">:</span> <span class="nx">HttpStatusService</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We now have 3 observables that can easily be consumed in the template of the component with the use of the <a href="https://angular.io/api/common/AsyncPipe">async</a> pipe. Here is an example:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;my-spinner</span> <span class="na">*ngIf=</span><span class="s">"loading$ | async"</span><span class="nt">&gt;&lt;/my-spinner&gt;</span>
<span class="nt">&lt;my-user-form</span> 
    <span class="na">[validationErrors]=</span><span class="s">"validationErrors$ | async"</span>
    <span class="na">[disabled]=</span><span class="s">"acting$ | async"</span><span class="nt">&gt;&lt;/my-user-form&gt;</span>

</code></pre></div></div>

<h2 id="optimizing-with-decorators">Optimizing with decorators</h2>

<p>We have cleaned up a lot, we found an easy way to get the httpstatuses to the component, but we can make it even simpler with the use of decorators. let’s refactor the <code class="language-plaintext highlighter-rouge">UserComponent</code> class accordingly:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">UserComponent</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">Loading</span><span class="p">()</span><span class="nx">loading$</span><span class="p">;</span>
  <span class="p">@</span><span class="nd">ValidationErrors</span><span class="p">()</span> <span class="nx">validationErrors$</span><span class="p">;</span>
  <span class="p">@</span><span class="nd">Acting</span><span class="p">()</span> <span class="nx">acting$</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is very declarative way of working. The component is way cleaner and we don’t have to inject the <code class="language-plaintext highlighter-rouge">HttpStatusService</code> anymore.</p>

<p>But how do we create these decorators? I’m glad you asked, it’s pretty easy. A property decorator is simply a function that returns a function that gets the target and key as arguments.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">function</span> <span class="nx">Loading</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="nx">key</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="c1">// in this case the target is the component</span>
    <span class="c1">// instance and key the property name</span>
    <span class="c1">// target: userComponent, key: loading$</span>
    <span class="c1">// now we have to set the property to the actual </span>
    <span class="c1">// loading$ observable that lives in the HttpStatusService</span>
    <span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="c1">// todo</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>To set the property of the target we need to inject the <code class="language-plaintext highlighter-rouge">HttpStatusService</code> instance that is registered on the root injector of our application. After all that’s the instance that contains the actual state. Currently there is no easy way to do that.
Until Angular provides us with functionality like <a href="https://github.com/angular/angular/issues/23301">that</a> we can use the following solution:</p>

<p>Next to the <code class="language-plaintext highlighter-rouge">http-status.service</code> file, create a file called <code class="language-plaintext highlighter-rouge">root-injector.ts</code> and add the following code:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Injector</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">let</span> <span class="nx">rootInjector</span><span class="p">:</span> <span class="nx">Injector</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">setRootInjector</span><span class="p">(</span><span class="nx">injector</span><span class="p">:</span> <span class="nx">Injector</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
  <span class="nx">rootInjector</span> <span class="o">=</span> <span class="nx">injector</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">setRootInjector()</code> function will be used by the rootModule to set the <code class="language-plaintext highlighter-rouge">rootInjector</code> variable that we expose here.
To make it work the rootModule will have to call the <code class="language-plaintext highlighter-rouge">setRootInjector()</code> function like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">NgModule</span><span class="p">({</span>
    <span class="p">...</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppModule</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">injector</span><span class="p">:</span> <span class="nx">Injector</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">setRootInjector</span><span class="p">(</span><span class="nx">injector</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>The last step is to actually use the <code class="language-plaintext highlighter-rouge">rootInjector</code> variable inside the decorators. The result looks like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// loading.decorator.ts</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">Loading</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="nx">key</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">service</span> <span class="o">=</span> <span class="nx">rootInjector</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">HttpStatusService</span><span class="p">);</span>
    <span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">service</span><span class="p">.</span><span class="nx">loading$</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// acting.decorator.ts</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">Acting</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="nx">key</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">service</span> <span class="o">=</span> <span class="nx">rootInjector</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">HttpStatusService</span><span class="p">);</span>
    <span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">service</span><span class="p">.</span><span class="nx">acting$</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// validation-errors.decorator.ts</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">ValidationErrors</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="nx">key</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">service</span> <span class="o">=</span> <span class="nx">rootInjector</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">HttpStatusService</span><span class="p">);</span>
    <span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">service</span><span class="p">.</span><span class="nx">validationErrors$</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>We have learned that we can remove the redundancy that comes with loading, acting and error handling statuses almost completely by the use of an interceptor, a simple service and a few decorators.</p>

<p>I hope you liked it!</p>

<h2 id="special-thanks">Special thanks</h2>

<p>A very special thanks to the reviewers:</p>

<ul>
  <li><a href="https://twitter.com/bobrov1989">Vitallii Bobrov (@bobrov1989)</a></li>
  <li><a href="https://twitter.com/webdave_de">David Müllerchen (@webdave_de)</a></li>
  <li><a href="https://twitter.com/maartentibau">Maarten Tibau (@maartentibau)</a></li>
  <li><a href="https://twitter.com/elmd_">Dominic Elm (@elmd_)</a></li>
  <li><a href="https://twitter.com/fabiangosebrink">Fabian Gosebrink (@FabianGosebrink)</a></li>
</ul>]]></content><author><name>brechtbilliet</name></author><category term="angular" /><category term="Angular" /><category term="Architecture" /><category term="errorhandling" /><category term="interceptors" /><category term="decorators" /><summary type="html"><![CDATA[In this article we are going to implement a generic solution on how to fix 3 common usecases that involve redundancy in CRUD applications.]]></summary></entry><entry><title type="html">Opinionated guidelines for large nx angular projects</title><link href="https://blog.brecht.io/opinionated-guidelines-for-large-nx-angular-projects/" rel="alternate" type="text/html" title="Opinionated guidelines for large nx angular projects" /><published>2018-12-08T00:00:00+01:00</published><updated>2018-12-08T00:00:00+01:00</updated><id>https://blog.brecht.io/opinionated-guidelines-for-large-nx-angular-projects</id><content type="html" xml:base="https://blog.brecht.io/opinionated-guidelines-for-large-nx-angular-projects/"><![CDATA[<h2 id="about-this-article">About this article</h2>

<p>This article contains a set of opinionated guidelines when it comes to building monorepos with <a href="https://nrwl.io/nx">Nx</a>.
I wrote this article because when I used Nx in the beginning, I struggled a lot with how to structure my workspace, and I’ve hit quite a few walls. That being said, I’ve been using it for a while now, and I finally have the feeling that I’ve reached a structure where I feel comfortable with.</p>

<h2 id="a-word-about-nx">A word about Nx</h2>

<p>Nx is a thin layer on top of the <a href="https://angular.io">Angular</a> CLI that helps us with structuring large applications in the form of monorepos.
A monorepo contains only one <a href="https://nrwl.io/nx/guide-nx-workspace">Nx workspace</a> that can contain multiple apps and multiple libs (we will refer to apps and libs as Nx projects). An app is a deployable unit and a lib is meant to contain the actual logic that can be shared across the workspace. Nx is actively being developed and updated along with Angular by the amazing people of <a href="https://nrwl.io/">Nrwl</a>.</p>

<p>Nx is especially valuable when managing <strong>big Angular applications</strong> that have a lot of shared functionality, but even in smaller projects it can help organize your approach.</p>

<p>At StrongBrew we are using this technology for a bunch of our clients and even though Nx is already pretty opinionated, I decided to write down some best practices and guidelines that I try to take in consideration.</p>

<p>The rules and guidelines written down in this article <strong>might work for you</strong>, and should in no circumstances be treated as the <em>ultimate truth</em>. Best practices and guidelines are mostly a matter of perception and personal preference. Nevertheless, I would love to share how I architect large Angular applications with Nx.</p>

<h2 id="barrel-files">Barrel files</h2>

<p>When it comes to managing monorepos, barrel files are quite important.
A barrel file is a <code class="language-plaintext highlighter-rouge">index.ts</code> file that lives in the <code class="language-plaintext highlighter-rouge">src</code> directory of every Nx lib and is meant to expose logic to the rest of the workspace.</p>

<p>This file is really important when you understand one of the big potential risks of organizing code in monorepos - overexposure of implementation details.</p>

<p>With code being located right next to each other, it can be easy to import code with deeply nested relative paths and include things that the original author of the code never intended to be used outside of their specific context.</p>

<p>The Nx lib’s <code class="language-plaintext highlighter-rouge">index.ts</code> file allows each lib to define its effective public API - only symbols which are explicitly exported from this file should be eligible for consumption in other parts of the workspace.</p>

<p>Let’s say that we have a <code class="language-plaintext highlighter-rouge">@strongbrew/users</code> lib which exposes a <code class="language-plaintext highlighter-rouge">UserService</code>…
This is what the barrel file from  <code class="language-plaintext highlighter-rouge">@strongbrew/users</code> might look like.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// libs/users/src/index.ts</span>
<span class="k">export</span> <span class="o">*</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./lib/services/user.service</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p>Although this might seem pretty straight forward, let’s go over a few best-practices…</p>

<h3 id="dont-ever-import-a-lib-from-a-relative-path">Don’t ever import a lib from a relative path</h3>

<p>When we want to import <code class="language-plaintext highlighter-rouge">UserService</code> inside another lib or app, we want to import it from <code class="language-plaintext highlighter-rouge">@strongbrew/users</code>. This is way cleaner then importing it from a relative path like <code class="language-plaintext highlighter-rouge">../../../users/lib/src/index.ts</code> and helps protect us from the overexposure problem described above. Nx also provides a linting rule out of the box to make sure that you are respecting a lib’s API and not doing deep imports.</p>

<p>Nx uses TypeScript <a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping">path mapping</a> to map these module names to the correct barrel files.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"paths"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"@strongbrew/users"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="s2">"libs/users/src/index.ts"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="only-1-barrel-file-per-lib">Only 1 barrel file per lib</h3>

<p>It’s a known fact that barrel files might become big, but it gives us a central place of handling all the exports + it drastically reduces the chance of getting circular reference errors. Therefore, a lib should only contain 1 single barrel file.</p>

<h3 id="never-let-a-lib-import-from-its-own-barrel-file">Never let a lib import from its own Barrel file</h3>

<p>The TypeScript modules within a particular lib should not care what functionality that lib exposes, so it shouldn’t use its own barrel file at any point.</p>

<p>If a module imports something from its own barrel file, it almost always results in circular reference errors. Therefore, imports from inside of the module should use relative path imports.</p>

<h2 id="structuring-the-workspace">Structuring the workspace</h2>

<p>When using Nx, we might already get pushed in an opinionated way of working, which is great. But how are we going to structure the workspace itself? For instance, looking into a directory of 100 libs inside of a libs directory might not really be pragmatic to work with…</p>

<h3 id="structuring-apps">Structuring apps</h3>

<h4 id="an-app-should-be-an-empty-shell">An app should be an empty shell</h4>

<p>Apps are deployable units that wire the different pieces of an application together. These apps are nearly empty shells that use libs to build an entire application. Therefore <strong>an app holds almost no logic</strong> and mostly uses lazy loading to load feature libs. Some feature libs can be seen as microfrontends.
That being said, our apps mostly not completely empty. In general they also contain:</p>
<ul>
  <li>The general layout (composed out of components from ‘ui-kit’)</li>
  <li>Routing</li>
</ul>

<h4 id="keep-the-apps-directory-as-flat-as-possible">Keep the apps directory as flat as possible</h4>

<p>Chances are small that our monorepo will contain 100+ apps and even if it does, chances are small that we can divide these apps into categories.</p>

<h4 id="apps-should-not-import-from-other-apps">Apps should not import from other apps</h4>

<p>Although it might seem obvious, let’s mention it anyway… Shared logic should always live inside of libs, an not inside of apps. Apps are specific deployment targets.</p>

<h3 id="structuring-libs">Structuring libs</h3>

<p>Here comes the opinionated part, lets check how we can structure the libs inside of our workspace.</p>

<p>The directory structure of our workspace might look like this:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">apps</code></li>
  <li><code class="language-plaintext highlighter-rouge">libs</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">feature</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">api</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">foo</code></li>
              <li>…</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">lazy</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">bar</code></li>
              <li>…</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">shared</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">baz</code></li>
              <li>…</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">ui-kit</code></li>
      <li><code class="language-plaintext highlighter-rouge">utils</code></li>
    </ul>
  </li>
  <li>A feature contains logic specific to a certain domain, like managing users or performing authentication.</li>
  <li>On the other hand, the <code class="language-plaintext highlighter-rouge">utils</code> lib contains logic that doesn’t have anything to do with any domain, E.g: HTTP interceptors, shared RxJS operators, a service that handles notifications etc… Consider it a toolkit for your workspace.</li>
</ul>

<p>In the next few sections we are going to cover the 3 types of feature libs, the <code class="language-plaintext highlighter-rouge">ui-kit</code> lib and the <code class="language-plaintext highlighter-rouge">utils</code> lib.</p>

<h4 id="featureapi">feature/api</h4>

<p>This directory contains Nx libs with a very specific purpose:</p>
<ul>
  <li>These libs contain <strong>api logic</strong> or <strong>business logic</strong> that needs to be shared.</li>
  <li>These libs contain the types of the REST responses. Let’s call them <strong>domain types</strong>.</li>
  <li>If we want to work with models, or dto’s, these would also live here.</li>
</ul>

<p>Having a specific api lib is very handy when developing in a microservices platform. Every microservice would have its own <strong>api lib</strong> that can be used throughout the entire monorepo.</p>

<p>Another common use-case is that feature libs tend to use domain types from other feature libs. By extracting these domain types in to api libs, we solve that problem. That way, these domain types can be shared across different places inside of the monorepo.</p>

<h4 id="featurelazy">feature/lazy</h4>

<p>This directory contains all feature libs that can be lazyloaded. To make sure these libs can be lazy-loaded, they should expose an <code class="language-plaintext highlighter-rouge">NgModule</code> in the barrel file and are loaded as such:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">RouterModule</span><span class="p">.</span><span class="nx">forRoot</span><span class="p">([</span>
    <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">users</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">loadChildren</span><span class="p">:</span> <span class="dl">'</span><span class="s1">@strongbrew/feature/lazy/users</span><span class="dl">'</span>
    <span class="p">}</span>
<span class="p">])</span>
</code></pre></div></div>

<p>One of the advantages is that these modules can be loaded on demand or even preloaded upfront. The biggest advantage though is that these modules are completely standalone, and don’t share anything with the rest of the workspace. This means they have nothing inside of their barrel file, other then the <code class="language-plaintext highlighter-rouge">NgModule</code> being exported. 
<strong>Lazy loaded modules can never share logic with the workspace</strong>
If we feel that a lazyloaded module needs to export something, we should extract that logic into a separate <code class="language-plaintext highlighter-rouge">feature/shared</code> or <code class="language-plaintext highlighter-rouge">feature/api</code> lib.</p>

<p>When a <code class="language-plaintext highlighter-rouge">feature/lazy</code> module needs to perform XHR calls it should delegate it to a <code class="language-plaintext highlighter-rouge">feature/api</code> lib. Therefore a <code class="language-plaintext highlighter-rouge">feature/lazy</code> lib should never contain api logic.</p>

<p>When using a statemanagement library like <a href="https://github.com/ngrx/platform">ngrx/store</a>, <code class="language-plaintext highlighter-rouge">feature/lazy</code> libs would contain their own reducers and use <code class="language-plaintext highlighter-rouge">store.forFeature()</code> to attach these to the <code class="language-plaintext highlighter-rouge">store</code> instance. This would result in lazy-loaded reducers.</p>

<h4 id="featureshared">feature/shared</h4>

<p>Not every feature can be lazyloaded. Think about feature logic that needs to be shared for instance. In that case we would create an Nx lib that lives inside of the <code class="language-plaintext highlighter-rouge">feature/shared</code> directory.</p>

<p>When a <code class="language-plaintext highlighter-rouge">feature/shared</code> module needs to perform XHR calls it should delegate it to a <code class="language-plaintext highlighter-rouge">feature/api</code> lib. Therefore the <code class="language-plaintext highlighter-rouge">feature/lazy</code> lib should not contain api logic.</p>

<h4 id="ui-kit">ui-kit</h4>

<p>This lib contains all the shared presentational components that can be used in different applications. Think about dropdowns, datepickers and empty modals. A <code class="language-plaintext highlighter-rouge">user-detail</code> component for instance does NOT belong here. A monorepo can contain multiple <code class="language-plaintext highlighter-rouge">ui-kit</code> libraries. We should name them according to its purpose. E.g <code class="language-plaintext highlighter-rouge">ui-kit-mobile</code> is a common use case.</p>

<p>The Ui-kit module contains an <code class="language-plaintext highlighter-rouge">ngModule</code> since we need it to declare and export our components/directives. The barrel file generally only exposes the <code class="language-plaintext highlighter-rouge">ngModule</code> since this is the vessel used to export the functionality.</p>

<p>However, a <code class="language-plaintext highlighter-rouge">ui-kit</code> might also export certain types in its barrel file… Like <code class="language-plaintext highlighter-rouge">DatepickerConfiguration</code> or other <code class="language-plaintext highlighter-rouge">ui-kit</code> specific types.</p>

<h4 id="utils">utils</h4>

<p>This lib can contain all kinds of utilities. It could contain shared interceptors, guards, services and custom RxJS operators. Think about it als a framework toolbox that could benefit any application. We will NOT use an <code class="language-plaintext highlighter-rouge">ngModule</code> here for tree-shaking purposes.</p>

<p>A <code class="language-plaintext highlighter-rouge">utils</code> lib will not contain any components. But if it contains pipes or directives we might need an <code class="language-plaintext highlighter-rouge">ngModule</code> for that.</p>

<p>When your workspace is small, one single <code class="language-plaintext highlighter-rouge">utils</code> lib might suffice, but it could become a good idea to split these up when the <code class="language-plaintext highlighter-rouge">utils</code> lib gets to big.</p>

<p>After splitting up, the directory structure of our workspace might look like this:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">apps</code></li>
  <li><code class="language-plaintext highlighter-rouge">libs</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">feature</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">api</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">foo</code></li>
              <li>…</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">lazy</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">bar</code></li>
              <li>…</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">shared</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">baz</code></li>
              <li>…</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">ui-kit</code></li>
      <li><code class="language-plaintext highlighter-rouge">utils</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">rxjs-operators</code></li>
          <li><code class="language-plaintext highlighter-rouge">forms</code></li>
          <li><code class="language-plaintext highlighter-rouge">http</code></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>Do note, that the <code class="language-plaintext highlighter-rouge">forms</code> lib would not contain any forms or forms configuration, but it would contain general form logic that can be shared across the workspace.</p>

<h3 id="prefixing-libs">Prefixing libs</h3>

<p>Because of the fact that <code class="language-plaintext highlighter-rouge">selector</code> names for components and directives should be unique, prefixing them in a monorepo is quite important. 
Since every project in the <code class="language-plaintext highlighter-rouge">angular.json</code> file has a <code class="language-plaintext highlighter-rouge">prefix</code> property, we could set that prefix for every project.</p>

<p>Let’s assume that we need a <code class="language-plaintext highlighter-rouge">feature/shared</code> lib called <code class="language-plaintext highlighter-rouge">messages</code> then we could generate that lib by running <code class="language-plaintext highlighter-rouge">ng g lib messages --prefix sh-mes</code> for instance. 
<code class="language-plaintext highlighter-rouge">sh-mes</code> would be the prefix and if we create a message component in this lib it would have the selector: <code class="language-plaintext highlighter-rouge">sh-mes-message</code>.</p>

<h2 id="linting-and-tags">Linting and tags</h2>

<p>One thing that is absolutely critical when managing a monorepo is being able to determine, categorize, and constrain/run commands based on a dependency graph.</p>

<p>Nx determines the dependency graph for us out of the box, it infers it by statically analyzing our TypeScript import and export statements (as well as a few other things specific to the Angular CLI).</p>

<p>It has no way of automatically categorizing the dependency graph for it, because that is up to our subjective judgement, but it does provide helpers to make it easy.</p>

<p>Nx provides us with the ability to add tags to the different libs and apps and apply <a href="https://palantir.github.io/tslint/">tslint</a> rules to make sure we can’t import whatever we want wherever we want.	Nx provides us with the ability to add tags to the different libs and apps and apply <a href="https://palantir.github.io/tslint/">tslint</a> rules to make sure we can’t import whatever we want wherever we want (potentially leading to circular references and other problems (broken lazyloading, etc…)).</p>

<p>Tags can be added to projects in the <code class="language-plaintext highlighter-rouge">nx.json</code> file of the root directory.
Tags can be determined in numerous ways. Some of us might like a tag per team, other might like it per domain.</p>

<p>I like to have tags for every lib type. It might be opinionated but it works fine for me (again, that’s a matter of personal preference)</p>

<p>We define 5 types of tags:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">app</code>: This tag is added to all the apps</li>
  <li><code class="language-plaintext highlighter-rouge">shared</code>: This tag is added to <code class="language-plaintext highlighter-rouge">uikit</code> and <code class="language-plaintext highlighter-rouge">utils</code> libs</li>
  <li><code class="language-plaintext highlighter-rouge">feature:lazy</code>: This tag is added to <code class="language-plaintext highlighter-rouge">feature/lazy</code> libs</li>
  <li><code class="language-plaintext highlighter-rouge">feature:shared</code>: This tag is added to <code class="language-plaintext highlighter-rouge">feature/shared</code> libs</li>
  <li><code class="language-plaintext highlighter-rouge">feature:api</code>: This tag is added to <code class="language-plaintext highlighter-rouge">feature/api</code> libs</li>
</ul>

<p>The rules could be the same for every workspace that we will create in the future:</p>

<ul>
  <li>Projects with the type <code class="language-plaintext highlighter-rouge">tag</code> can only depend on projects with the tags: <code class="language-plaintext highlighter-rouge">shared</code> or <code class="language-plaintext highlighter-rouge">feature:shared</code>.</li>
  <li>Projects with the type <code class="language-plaintext highlighter-rouge">shared</code> can only depend on projects with the tags: <code class="language-plaintext highlighter-rouge">shared</code> (we don’t want to import domain specific logic in there do we?)</li>
  <li>Projects with the type <code class="language-plaintext highlighter-rouge">feature:lazy</code> can only depend on projects with the tags: <code class="language-plaintext highlighter-rouge">shared</code>, <code class="language-plaintext highlighter-rouge">feature:shared</code> and <code class="language-plaintext highlighter-rouge">feature:api</code>.</li>
  <li>Projects with the type: <code class="language-plaintext highlighter-rouge">feature:shared</code> can only depend on projects with the tags: <code class="language-plaintext highlighter-rouge">shared</code> and <code class="language-plaintext highlighter-rouge">feature:api</code>.</li>
  <li>Projects with the type: <code class="language-plaintext highlighter-rouge">feature:api</code> can only depend on projects with the tags: <code class="language-plaintext highlighter-rouge">feature:api</code> and <code class="language-plaintext highlighter-rouge">shared</code>. (we never want to load <code class="language-plaintext highlighter-rouge">feature:shared</code> into an feature/api lib right?)</li>
</ul>

<h3 id="configuring-tslint">Configuring tslint</h3>

<p>To configure the tslint we have to use the <code class="language-plaintext highlighter-rouge">nx-enforce-module-boundaries</code> rule from tslint. If you like the rules defined above, you can just copy-paste the module boundaries defined below right in your <code class="language-plaintext highlighter-rouge">tslint.json</code> file that lives in the root directory.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"nx-enforce-module-boundaries"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
  </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"allow"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
      </span><span class="nl">"depConstraints"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"sourceTag"</span><span class="p">:</span><span class="w"> </span><span class="s2">"app"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"onlyDependOnLibsWithTags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"shared"</span><span class="p">,</span><span class="w"> </span><span class="s2">"feature:shared"</span><span class="p">]</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"sourceTag"</span><span class="p">:</span><span class="w"> </span><span class="s2">"shared"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"onlyDependOnLibsWithTags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"shared"</span><span class="p">]</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"sourceTag"</span><span class="p">:</span><span class="w"> </span><span class="s2">"feature:lazy"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"onlyDependOnLibsWithTags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
          </span><span class="s2">"shared"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"feature:shared"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"feature:api"</span><span class="w">
        </span><span class="p">]</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"sourceTag"</span><span class="p">:</span><span class="w"> </span><span class="s2">"feature:api"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"onlyDependOnLibsWithTags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"feature:api"</span><span class="p">,</span><span class="w"> </span><span class="s2">"shared"</span><span class="p">]</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"sourceTag"</span><span class="p">:</span><span class="w"> </span><span class="s2">"feature:shared"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"onlyDependOnLibsWithTags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"shared"</span><span class="p">,</span><span class="w"> </span><span class="s2">"feature:api"</span><span class="p">]</span><span class="w">
      </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p>This tslint config will ensure that the rules defined above are mandatory.</p>

<h2 id="is-this-structure-the-only-way">Is this structure the only way?</h2>

<p>No, not at all, this would work perfectly for a monorepo with 5 applications. But if we are thinking about organisation wide monorepos, it might be a good idea to
combine features app per app. In that case we would have something like:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">apps</code></li>
  <li><code class="language-plaintext highlighter-rouge">libs</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">app1</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">api</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">foo</code></li>
              <li>…</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">lazy</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">bar</code></li>
              <li>…</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">shared</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">baz</code></li>
              <li>…</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">app2</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">api</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">foo</code></li>
              <li>…</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">lazy</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">bar</code></li>
              <li>…</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">shared</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">baz</code></li>
              <li>…</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">ui-kit</code></li>
      <li><code class="language-plaintext highlighter-rouge">utils</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">rxjs-operators</code></li>
          <li><code class="language-plaintext highlighter-rouge">forms</code></li>
          <li><code class="language-plaintext highlighter-rouge">http</code></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="how-to-share-code-organisation-wide">How to share code organisation wide?</h2>

<p>Although an organisation wide monorepo has great benefits, they might be good reasons not to do it. These could be any combination of technical, cultural, legal or other reasons.</p>

<h3 id="scenario-a">Scenario A</h3>

<p>Our company has 10 angular projects that are actively developed and share a lot of code, but also had 5 legacy projects where there is no budget to bump them to the new Angular versions and so on. There might be a few <a href="https://vuejs.org/">Vue.js</a> or <a href="https://reactjs.org/">React</a> living there as well. It might be more trouble than it is worth for your organization to manage that complexity within one big workspace. In that case we could have a workspace for the non-legacy angular projects, and that workspace would gladly welcome new projects in the future.</p>

<h3 id="scenario-b">Scenario B</h3>

<p>Our company sells custom software to different clients. Every client wants its own custom look and feel, which a lot of custom logic, but we don’t want to reinvent the wheel every time.</p>

<p>In that case, we could create an Nx worspace for every client, and have one common toolkit that contains shared logic. That toolkit would live in its own monorepo and be published as an Angular package.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hope we learned something today. How we structure our workspaces is completely up to us, and we should use something that works for us, not just pick whatever you read in some blog article ;-). If this structure doesn’t make sense to you, that’s perfectly fine… And I would love to hear your thoughts about this approach.</p>

<h2 id="special-thanks-to">Special thanks to</h2>

<p>Thanks to the people that have reviewed the article and gave great input!
I couldn’t have done it without you!</p>

<ul>
  <li><a href="https://twitter.com/beeman_nl">@beeman_nl</a></li>
  <li><a href="https://twitter.com/mrjameshenry">@MrJamesHenry</a></li>
</ul>]]></content><author><name>brechtbilliet</name></author><category term="brechtbilliet" /><category term="Angular" /><category term="nx" /><category term="architecture" /><summary type="html"><![CDATA[About this article]]></summary></entry><entry><title type="html">Safe HTTP calls with RxJS</title><link href="https://blog.brecht.io/safe-http-calls-with-rxjs/" rel="alternate" type="text/html" title="Safe HTTP calls with RxJS" /><published>2018-10-24T00:00:00+02:00</published><updated>2018-10-24T00:00:00+02:00</updated><id>https://blog.brecht.io/safe-http-calls-with-rxjs</id><content type="html" xml:base="https://blog.brecht.io/safe-http-calls-with-rxjs/"><![CDATA[<p>Hi there, since it’s very busy lately this will probably be my one of my shortest articles ever.
Maybe that’s a good thing, because now you don’t have an excuse not to read it. It’s short, compact
and maybe you will learn a thing or two.</p>

<h2 id="the-problem">The problem</h2>

<p>The article is all about making sure our HTTP calls don’t die on bad connections, since strangely enough, <strong>404 responses can kill your application when using RxJS</strong>.</p>

<p>Remember that RxJS observables have 3 types of events right?</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">next</code>: passing in a new value into the observable</li>
  <li><code class="language-plaintext highlighter-rouge">error</code>: when an error occurs</li>
  <li><code class="language-plaintext highlighter-rouge">complete</code>: When the observable is completed</li>
</ul>

<p>We should not forget that <strong>an Error event will actually stop the observable</strong>. It will cease to exist.</p>

<p>You might say: “That’s not that bad, we’ll just create a new one every time we want to fetch data”.</p>

<p>When you are approaching your application the <em>reactive way</em>, this scenario might be problematic:
Imagine a typeahead search where we want to retrieve results for every input value. We have an observable of searchterms and we trigger the
HTTP request for every value using a <code class="language-plaintext highlighter-rouge">switchMap</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// this observable contains the values</span>
<span class="c1">// of what the user is searching for</span>
<span class="c1">// over time</span>
<span class="kd">const</span> <span class="nx">searchTerm$</span><span class="p">:</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">;</span>

<span class="c1">// when the term receives a new value...</span>
<span class="c1">// go fetch some data</span>
<span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">searchTerm$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> <span class="nx">fetchData</span><span class="p">(</span><span class="nx">term</span><span class="p">))</span>
<span class="p">)</span>

<span class="c1">// subscribe to the observable to start listening</span>
<span class="nx">results$</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">((</span><span class="nx">response</span><span class="p">:</span> <span class="nx">Result</span><span class="p">[])</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
<span class="p">})</span>
</code></pre></div></div>
<p>This all works fine, until an error happens in the observable. This could come from a bad connection, server down-time or anything that went wrong during the HTTP request (500, 404, …) 
If the user is having a bad connection which might result in a <code class="language-plaintext highlighter-rouge">404</code>, the observable will stop and the application will be broken. The user can search for results as much as he or she wants, the HTTP calls will never happen again.</p>

<h2 id="catcherror">catchError</h2>

<p>We could use the <code class="language-plaintext highlighter-rouge">catchError</code> operator that will basically catch the error for us, and return a brand new observable(containing the error).
That observable will have the error as a value, instead of throwing it again as an error.
That way we could actually show the user a decent message.
This might look something like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">searchTerm$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> 
        <span class="nx">fetchData</span><span class="p">(</span><span class="nx">term</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span>
            <span class="c1">// return an observable with the error inside</span>
            <span class="nx">catchError</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="k">of</span><span class="p">(</span><span class="nx">e</span><span class="p">))</span>
        <span class="p">)</span>
    <span class="p">)</span>
<span class="p">)</span>
<span class="nx">results$</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">response</span><span class="p">:</span> <span class="nx">Result</span><span class="p">[]</span> <span class="o">|</span> <span class="nx">HttpErrorResponse</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">response</span> <span class="k">instanceof</span> <span class="nx">HttpErrorResponse</span><span class="p">){</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">oh no:(</span><span class="dl">'</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">do something fancy</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Ps: I’m not trying to say that this is the best idea to catch errors. I’m just showing you around some basics.</p>

<p>Do note that the <code class="language-plaintext highlighter-rouge">catchError</code> operator is applied to the result observable that <code class="language-plaintext highlighter-rouge">fetchData()</code> returns, and not added as the second operator of the first pipe. 
From the moment an observable receives an error, it will die… That’s why it’s important to catch the error on the inner observable.</p>

<h2 id="retrywhen">retryWhen</h2>

<p>Ok, great! The application won’t break anymore, but now imagine the following scenario: Our user is sitting in the train and drives through a tunnel. The connection is gone for a few seconds and the user won’t get results.</p>

<p>We could fix that by telling RxJS to retry a few times</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">searchTerm$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> 
        <span class="nx">fetchData</span><span class="p">(</span><span class="nx">term</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span>
            <span class="nx">retryWhen</span><span class="p">(</span><span class="nx">e$</span> <span class="o">=&gt;</span> <span class="nx">e$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
                <span class="c1">// try again after 2 seconds</span>
                <span class="nx">delay</span><span class="p">(</span><span class="mi">2000</span><span class="p">),</span>
                <span class="c1">// stop trying after 5 times</span>
                <span class="nx">take</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
            <span class="p">)</span>
            <span class="c1">// still keep the observable alive if</span>
            <span class="c1">// the first 5 times fail</span>
            <span class="nx">catchError</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="k">of</span><span class="p">(</span><span class="nx">e</span><span class="p">))</span>
        <span class="p">)</span>
    <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<p>You can find more information about <code class="language-plaintext highlighter-rouge">retryWhen</code><a href="https://www.learnrxjs.io/operators/error_handling/retrywhen.html">here</a></p>

<h2 id="using-the-online-event">Using the online event</h2>

<p>Even though this is a good solution, there is room for improvement. A great choice is to use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/Online_and_offline_events">online</a> event from HTML5 to tell the browser to retry when the user regains internet connection. It’s even shorter than before and it’s super elegant</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">searchTerm$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> 
        <span class="nx">fetchData</span><span class="p">(</span><span class="nx">term</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span>
            <span class="nx">retryWhen</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">fromEvent</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="dl">'</span><span class="s1">online</span><span class="dl">'</span><span class="p">))</span>
            <span class="c1">// still keep the observable alive if</span>
            <span class="c1">// the server would return a different</span>
            <span class="c1">// HTTP error</span>
            <span class="nx">catchError</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="k">of</span><span class="p">(</span><span class="nx">e</span><span class="p">))</span>
        <span class="p">)</span>
    <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>RxJS gives us great control over HTTP calls! If we know how error handling works it becomes a breeze to take our HTTP calls to the next level.
This doesn’t only apply to typeahead searches but to every observable where we combine an existing stream with an error-affected one like HTTP. For instance: this can also happen in NgRx effects or with the angular router.</p>

<p>There, I told you it would be short, I hope you learned something though.</p>

<p>Also be sure to check this article: <a href="https://blog.angularindepth.com/power-of-rxjs-when-using-exponential-backoff-a4b8bde276b0">Power of RxJS when using exponential backoff</a></p>

<h2 id="special-thanks">Special thanks</h2>

<ul>
  <li><a href="https://twitter.com/AmarildoKurtaj">@AmarildoKurtaj</a> The last example was based on his idea</li>
</ul>

<p>Reviewers:</p>
<ul>
  <li><a href="https://twitter.com/fmalcher01">Ferdinand Malcher</a></li>
  <li><a href="https://twitter.com/FabianGosebrink">Fabian Gosebrink</a></li>
  <li><a href="https://twitter.com/tim_deschryver">Tim deschryver</a></li>
  <li><a href="https://twitter.com/webdave_de">David Müllerchen</a></li>
  <li><a href="https://twitter.com/rubenverm">Ruben Vermeulen</a></li>
</ul>]]></content><author><name>brechtbilliet</name></author><category term="brechtbilliet" /><category term="RxJS" /><summary type="html"><![CDATA[How to make sure our ajax calls are being executed on bad connections]]></summary></entry><entry><title type="html">Building a safe autocomplete operator in RxJS</title><link href="https://blog.brecht.io/building-a-safe-autocomplete-operator-with-rxjs/" rel="alternate" type="text/html" title="Building a safe autocomplete operator in RxJS" /><published>2018-07-13T00:00:00+02:00</published><updated>2018-07-13T00:00:00+02:00</updated><id>https://blog.brecht.io/building-a-safe-autocomplete-operator-with-rxjs</id><content type="html" xml:base="https://blog.brecht.io/building-a-safe-autocomplete-operator-with-rxjs/"><![CDATA[<p>A well-known use case of RxJS is creating a simple autocomplete search in only a few lines of code.
This article is not just about creating our own autocomplete operator, we will create an autocomplete operator that is completely safe (we will cover the perception of safe later in this article).</p>

<p>When creating a standard autocomplete with RxJS we most likely implement a <code class="language-plaintext highlighter-rouge">debounceTime</code> operator to throttle the text that the user is typing into the autocomplete and we use a <code class="language-plaintext highlighter-rouge">switchMap</code> operator instead of a <code class="language-plaintext highlighter-rouge">mergeMap</code> operator to abort previous calls.</p>

<p>The implementation of this autocomplete might look like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">term$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">term$</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
        <span class="c1">// wait until the user stops typing for a second</span>
        <span class="nx">debounceTime</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span>
        <span class="c1">// higher order observable, abort previous</span>
        <span class="c1">// call if still busy</span>
        <span class="nx">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> <span class="nx">getAutocompleteSuggestions</span><span class="p">(</span><span class="nx">term</span><span class="p">))</span>
    <span class="p">)</span>
</code></pre></div></div>

<h2 id="the-problem">The problem</h2>

<p>When the user stops typing for 1 second, the browser will create a new XHR call. From that moment on, when the user types again and a previous XHR call is still busy, the browser will abort that XHR call to avoid racing conditions, and create a new XHR call. This is due to the <code class="language-plaintext highlighter-rouge">switchMap</code> operator since it will unsubscribe from the previous observable.</p>

<p>Although that’s great, there is one problem though. What if the user starts typing again when an XHR call is still busy? 
Since we have implemented a <code class="language-plaintext highlighter-rouge">debounceTime</code> operator, the call will not be aborted until one second has passed.
In that period of time new results might be returned and showed to the user, which might not be what we want since <strong>they are not relevant anymore</strong>.</p>

<p>What we want is that the XHR call gets aborted from the moment the user starts typing again, we don’t want to wait for a second.
This sounds like an ideal scenario to write our custom operator.
But, before creating our own operator, let’s just combine some operators to get the job done.</p>

<p>A possible solution for this problem is using a <code class="language-plaintext highlighter-rouge">takeUntil</code> operator on the observable that will trigger the XHR call.
The <code class="language-plaintext highlighter-rouge">takeUntil</code> operator will complete the observable as soon as it gets a value. We want to complete (and therefore abort) the observable when the user types again. With that knowledge we can write something like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">term$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">term$</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
        <span class="nx">debounceTime</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span>
        <span class="nx">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> 
            <span class="nx">getAutocompleteSuggestions</span><span class="p">(</span><span class="nx">term</span><span class="p">)</span>
                <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
                    <span class="nx">takeUntil</span><span class="p">(</span><span class="nx">term$</span><span class="p">)</span> <span class="c1">// this still won't work</span>
                <span class="p">)</span>
            <span class="p">)</span>
        <span class="p">)</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>Sadly, this does not work yet.</p>

<p>Our <code class="language-plaintext highlighter-rouge">term$</code> observable is a <code class="language-plaintext highlighter-rouge">BehaviorSubject</code> for two reasons:</p>
<ul>
  <li>We want to pass an initial value to the subject</li>
  <li>A <code class="language-plaintext highlighter-rouge">BehaviorSubject</code> is a <code class="language-plaintext highlighter-rouge">ReplaySubject(1)</code> behind the scenes that keeps track of the last value. This is important if we want to subscribe to that observable in a later stage (which is kinda what we do with the <code class="language-plaintext highlighter-rouge">takeUntil</code> operator).</li>
</ul>

<p>Because the <code class="language-plaintext highlighter-rouge">term$</code> observable is keeping track of the last value, the <code class="language-plaintext highlighter-rouge">takeUntil</code> operator will always have a value, resulting in the fact that every XHR call gets aborted immediately. This is not what we want.
We want to skip one value of the <code class="language-plaintext highlighter-rouge">term$</code> observable every time.
We can achieve that with the <code class="language-plaintext highlighter-rouge">skip</code> operator as shown in the following example:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">term$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">term$</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
        <span class="nx">debounceTime</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span>
        <span class="nx">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> 
            <span class="nx">getAutocompleteSuggestions</span><span class="p">(</span><span class="nx">term</span><span class="p">)</span>
                <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
                    <span class="nx">takeUntil</span><span class="p">(</span>
                        <span class="c1">//skip 1 value</span>
                        <span class="nx">term$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">skip</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
                    <span class="p">)</span>
                        
                <span class="p">)</span>
            <span class="p">)</span>
        <span class="p">)</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>Now the following scenario works:</p>
<ul>
  <li>User types ‘l’</li>
  <li>Application waits for a second</li>
  <li>Application creates an XHR call</li>
  <li>User types ‘lu’</li>
  <li>Even though the XHR call wasn’t finished yet it gets aborted immediately (it doesn’t wait for a second anymore to abort that XHR call)</li>
</ul>

<p>Because of that the user never gets irrelevant data on its screen.</p>

<h2 id="extracting-the-logic-into-a-custom-operator">Extracting the logic into a custom operator</h2>

<p>We don’t want to write this logic every time, so let’s extract this logic into a custom written operator.</p>

<p>Turns out that creating custom operators is super easy. An operator is just a function that returns a function that gets the source observable.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">autocomplete</span> <span class="o">=</span> <span class="p">(</span><span class="cm">/* additional parameters */</span><span class="p">)</span> <span class="o">=&gt;</span> 
    <span class="p">(</span><span class="nx">source$</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">source$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="cm">/* do stuff */</span> <span class="p">)</span>
</code></pre></div></div>

<p>We can pass the <code class="language-plaintext highlighter-rouge">time</code> and <code class="language-plaintext highlighter-rouge">selector</code> function as parameters and use the operators we have written to create our own custom operator.
The operator looks like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">autocomplete</span> <span class="o">=</span> <span class="p">(</span><span class="nx">time</span><span class="p">,</span> <span class="nx">selector</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">source$</span><span class="p">)</span> <span class="o">=&gt;</span>
  <span class="nx">source$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">debounceTime</span><span class="p">(</span><span class="nx">time</span><span class="p">),</span>
    <span class="nx">switchMap</span><span class="p">((...</span><span class="nx">args</span><span class="p">:</span> <span class="kr">any</span><span class="p">[])</span> <span class="o">=&gt;</span> <span class="nx">selector</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
            <span class="nx">takeUntil</span><span class="p">(</span>
                <span class="nx">source$</span>
                    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
                        <span class="nx">skip</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
                    <span class="p">)</span>
            <span class="p">)</span>
        <span class="p">)</span>
    <span class="p">)</span>
  <span class="p">)</span>
</code></pre></div></div>

<p>Using our operator is super easy:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">term$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">term$</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
        <span class="nx">autocomplete</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="nx">term</span> <span class="o">=&gt;</span> <span class="nx">getAutocompleteSuggestions</span><span class="p">(</span><span class="nx">term</span><span class="p">))</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>You can find the sourcecode on stackblitz.</p>
<iframe src="https://stackblitz.com/edit/safe-switchmap?embed=1&amp;file=src/app/app.component.ts" style="width: 100%; height: 500px"></iframe>

<h2 id="conclusion">Conclusion</h2>

<p>The combination of <code class="language-plaintext highlighter-rouge">debounceTime</code> and <code class="language-plaintext highlighter-rouge">switchMap</code> don’t always cover everything. Showing irrelevant data to our users might not be what we want and creating our own operators is super easy! I hope you enjoyed the article.</p>

<h2 id="special-thanks">Special thanks</h2>

<p>A special thanks for the awesome reviewers:</p>

<ul>
  <li>Nicholas Jamieson <a href="https://twitter.com/ncjamieson">@ncjamieson</a></li>
  <li>Philippe Martin <a href="https://twitter.com/feloy2">@feloy2</a></li>
  <li>Jan-Niklas Wortmann <a href="https://twitter.com/niklas_wortmann">@niklas_wortmann</a></li>
  <li>Maarten Tibau <a href="https://twitter.com/maartentibau">@maartentibau</a></li>
  <li>Kwinten Pisman <a href="https://twitter.com/kwintenp">@kwintenp</a></li>
</ul>]]></content><author><name>brechtbilliet</name></author><category term="RxJS" /><summary type="html"><![CDATA[A well-known use case of RxJS is creating a simple autocomplete search in only a few lines of code. This article is not just about creating our own autocomplete operator, we will create an autocomplete operator that is completely safe (we will cover the perception of safe later in this article).]]></summary></entry><entry><title type="html">Thinking reactive with the SIP principle</title><link href="https://blog.brecht.io/the-sip-principle/" rel="alternate" type="text/html" title="Thinking reactive with the SIP principle" /><published>2018-06-30T00:00:00+02:00</published><updated>2018-06-30T00:00:00+02:00</updated><id>https://blog.brecht.io/the-sip-principle</id><content type="html" xml:base="https://blog.brecht.io/the-sip-principle/"><![CDATA[<p>A few months back we released <a href="https://blog.strongbrew.io/rxjs-best-practices-in-angular/">RxJS best practices in Angular</a> and a while before that <a href="https://blog.strongbrew.io/thinking-reactively-in-angular-and-rxjs/">Thinking reactively in Angular and RxJS</a>. 
Both of these articles are focussing on “trying to make the mind switch towards reactive programming”.</p>

<p>However, sometimes we like to have structured opinionated ways of tackling problems, especially when things become complex. We like a roadmap of some kind, something to fall back on, something to guide us through these complex reactive scenarios.</p>

<p>While writing RxJS code for small pragmatic solutions can be super easy, it might become complex when combining multiple streams or doing other advanced stuff.</p>

<p>We as StrongBrew are huge fans of reactive programming and we use our reactive mindset in Angular on a daily basis.
In this article we will learn a principle that helps us to tackle very complex RxJS situations in an opinionated structured way.</p>

<p>The code of this article is written with <a href="https://angular.io">Angular</a> but the concepts can be used with every framework.</p>

<h2 id="the-situation">The situation</h2>

<p>We are going to build an application to search for starships in the <a href="https://swapi.co">swapi api</a>. The application counts a few features:</p>
<ul>
  <li>It has to load data on page load</li>
  <li>The user can search for starships by entering text in the searchbox</li>
  <li>The user can load starships by a chosen model</li>
  <li>The user can load starships by a random model</li>
  <li>There is a loading indicator that needs to be shown when the data is being loaded</li>
  <li>Previous XHR calls should be canceled to avoid race conditions</li>
  <li>We want to filter the results by the number of passengers allowed on the ship. <strong>Note: This is a clientside filter</strong></li>
</ul>

<p>As we can see, there is quite a lot of asynchronous logic going on here, and if we would implement this in an imperative way, it would be pretty hard to keep it simple. However, the application can easily be written with the use of RxJS. In this application we don’t want to think in actions anymore, we want to think in streams of data. <strong>Everything is a stream!</strong></p>

<h2 id="the-sip-principle">The SIP principle</h2>
<p>With StrongBrew, we came up with a simple principle of handling this reactive mindset. We call it the <strong>SIP principle</strong>.
The SIP principle stands for the following:</p>
<ul>
  <li>S: Source streams</li>
  <li>I: Intermediate streams</li>
  <li>P: Presentation streams</li>
</ul>

<h3 id="source-streams">Source streams</h3>

<p>These streams will contain all the user interaction. They are generally bound to the outputs of our dumb components. A source stream could also contain real-time data, but we won’t cover that part in this article.
Let’s have a look at our application and look for the source streams there:
(the left column pretty much contains all the user interaction)
<img src="/assets/images/posts/sip-principle/source-streams.png" alt="Source streams" /></p>

<p>After executing the first step of the SIP principle we have found 4 source streams.
<code class="language-plaintext highlighter-rouge">searchTerm$</code>, <code class="language-plaintext highlighter-rouge">selectedModel$</code>, <code class="language-plaintext highlighter-rouge">randomModel$</code> and <code class="language-plaintext highlighter-rouge">numberOfPassengers$</code>.</p>

<p>What’s important to note here is that we named these streams as <strong>streams of data</strong> rather than naming them as streams of actions. We want to stop thinking in actions and start thinking in streams of data, remember? That’s why we didn’t name the first stream <code class="language-plaintext highlighter-rouge">search$</code> (which would be an action), we rather named it <code class="language-plaintext highlighter-rouge">searchTerm$</code> so we know it contains a search term.</p>

<p>Source streams are <strong>mostly subjects</strong> or streams that come from the framework, e.g. a routing params stream.</p>

<p>In our application the source streams will look like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">searchTerm$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReplaySubject</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">selectedModel$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReplaySubject</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">randomModel$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReplaySubject</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="c1">// needs an initial value</span>
<span class="nx">numberOfPassengers$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="p">(</span><span class="mi">1000000</span><span class="p">);</span> 
</code></pre></div></div>

<p>These subjects will be populated by the outputs as shown below:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;sidebar</span> 
    <span class="na">(search)=</span><span class="s">"searchTerm$.next($event)"</span>
    <span class="na">(selectModel)=</span><span class="s">"selectedModel$.next($event)"</span>
    <span class="na">(randomModel)=</span><span class="s">"randomModel$.next($event)"</span>
    <span class="na">(changeNumberOfPassengers)=</span><span class="s">"numberOfPassengers$.next($event)"</span>
<span class="nt">&gt;</span>
<span class="nt">&lt;/sidebar&gt;</span>
...
</code></pre></div></div>

<h3 id="presentation-streams">Presentation streams</h3>

<p>After finding the source streams we need to find the presentation streams.
These are the streams that our template needs to render properly. These are quite easy to find. We just have to look at the template and see which inputs our components expect. We can have a look at our template. (The outputs are stripped for readability purposes).</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;sidebar</span> <span class="na">class=</span><span class="s">"sidebar"</span> 
    <span class="na">[models]=</span><span class="s">"fixedModels"</span> 
    <span class="na">[numberOfPassengers]=</span><span class="s">""</span>
  <span class="nt">&gt;</span>
  <span class="nt">&lt;/sidebar&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"main"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;starship-list</span> 
        <span class="na">[starships]=</span><span class="s">""</span>
        <span class="na">[loading]=</span><span class="s">""</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/starship-list&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>We can instantly see that we need 3 presentation streams:
We need the number of passengers, the starships that need to be shown and whether the application is loading or not. Let’s fill in the blanks, shall we?!</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;sidebar</span> <span class="na">class=</span><span class="s">"sidebar"</span> 
    <span class="na">[models]=</span><span class="s">"fixedModels"</span> 
    <span class="na">[numberOfPassengers]=</span><span class="s">"numberOfPassengers$|async"</span>
  <span class="nt">&gt;</span>
  <span class="nt">&lt;/sidebar&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"main"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;starship-list</span> 
        <span class="na">[starships]=</span><span class="s">"filteredResults$|async"</span>
        <span class="na">[loading]=</span><span class="s">"loading$|async"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/starship-list&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>So after step 2 we have found the following presentation streams: <code class="language-plaintext highlighter-rouge">numberOfPassengers$</code>, <code class="language-plaintext highlighter-rouge">filteredResults$</code> and <code class="language-plaintext highlighter-rouge">loading$</code>.</p>

<h3 id="starting-with-the-sip-diagram">Starting with the SIP diagram</h3>

<p>Let’s visualize these streams by creating a SIP diagram:</p>

<p><img src="/assets/images/posts/sip-principle/sp.png" alt="Source streams, presentation streams" /></p>

<p>The goal is to calculate the presentation streams, based on the source streams. There are 2 presentation streams that we need to calculate: <code class="language-plaintext highlighter-rouge">filteredResults$</code> and <code class="language-plaintext highlighter-rouge">loading$</code>. We don’t need to calculate <code class="language-plaintext highlighter-rouge">numberOfPassengers$</code> since it’s the same stream as the source stream.</p>

<p>Let’s start with the <code class="language-plaintext highlighter-rouge">filteredResults$</code>. The <code class="language-plaintext highlighter-rouge">filteredResults$</code> is dependent on <code class="language-plaintext highlighter-rouge">searchTerm$</code>, <code class="language-plaintext highlighter-rouge">selectedModel$</code>, <code class="language-plaintext highlighter-rouge">randomModel$</code> and <code class="language-plaintext highlighter-rouge">numberOfPassengers$</code>. To make this calculation easier we can use intermediate streams.</p>

<h3 id="intermediate-streams">Intermediate streams</h3>

<p>Intermediate streams are streams that are used to make the bridge between the source streams and presentation streams easier.
Let’s create a <code class="language-plaintext highlighter-rouge">query$</code> stream and a <code class="language-plaintext highlighter-rouge">results$</code> stream to make the calculation easier.</p>

<p><img src="/assets/images/posts/sip-principle/sip1.png" alt="SIP 1" /></p>

<p>We will use custom marble diagrams to visualize the different parts of the SIP diagram throughout this article.</p>

<h4 id="calculating-the-query">Calculating the query$</h4>

<p>The first intermediate stream that we have to create is the <code class="language-plaintext highlighter-rouge">query$</code> which is simply a merge from the <code class="language-plaintext highlighter-rouge">searchTerm$</code>, <code class="language-plaintext highlighter-rouge">selectedModel$</code> and <code class="language-plaintext highlighter-rouge">randomModel$</code>.</p>

<p><img src="/assets/images/posts/sip-principle/query.png" alt="Query" /></p>

<p>As we can see these 3 streams are being merged into one new <code class="language-plaintext highlighter-rouge">query$</code>. We don’t have to worry about when a user searches or selects a model, or even requests a random model. We only care about that simple stream of data, the <code class="language-plaintext highlighter-rouge">query$</code>.</p>

<h4 id="calculating-the-results">Calculating the results$</h4>

<p>Every time the <code class="language-plaintext highlighter-rouge">query$</code> gets a new value we want to fetch data from the API. For that we will use the <code class="language-plaintext highlighter-rouge">switchMap</code> operator.</p>

<p><img src="/assets/images/posts/sip-principle/results.png" alt="Results" /></p>

<h4 id="calculating-filteredresults">Calculating filteredResults$</h4>

<p>We are ready to finish up the <code class="language-plaintext highlighter-rouge">filteredResults$</code> stream.
If we look back at the previous SIP diagram we can see that we can create that stream by combining the <code class="language-plaintext highlighter-rouge">results$</code> and the <code class="language-plaintext highlighter-rouge">numberOfPassengers$</code>.</p>

<p><img src="/assets/images/posts/sip-principle/filteredResults.png" alt="Filtered results" /></p>

<h4 id="the-loading">The loading$</h4>

<p>The next presentation stream that we want to create is called the <code class="language-plaintext highlighter-rouge">loading$</code>. Let’s update the SIP diagram accordingly. The <code class="language-plaintext highlighter-rouge">loading$</code> is based on the <code class="language-plaintext highlighter-rouge">query$</code> and the <code class="language-plaintext highlighter-rouge">results$</code>.</p>

<p><img src="/assets/images/posts/sip-principle/sip2.png" alt="sip 2" /></p>

<p>Every time the <code class="language-plaintext highlighter-rouge">query$</code> gets a new value the <code class="language-plaintext highlighter-rouge">loading$</code> should get the value <code class="language-plaintext highlighter-rouge">true</code>. Everytime the <code class="language-plaintext highlighter-rouge">result$</code> gets a new value the <code class="language-plaintext highlighter-rouge">loading$</code> should get the value <code class="language-plaintext highlighter-rouge">false</code>.
So if we map every value of the <code class="language-plaintext highlighter-rouge">query$</code> to <code class="language-plaintext highlighter-rouge">true</code> and if we map every value of the <code class="language-plaintext highlighter-rouge">results$</code> to <code class="language-plaintext highlighter-rouge">false</code>, and merge those 2, we have created our <code class="language-plaintext highlighter-rouge">loading$</code> stream.</p>

<p>Let’s create one last marble diagram for that.
<img src="/assets/images/posts/sip-principle/loading.png" alt="Loading" /></p>

<h3 id="what-do-we-need-to-share">What do we need to share?</h3>

<p>We have came a long way, we have created the complete SIP diagram. We have visualized all the streams by creating marble diagrams, but if we look closely at the SIP diagram we might notice a problem.
There are 2 arrows leaving the <code class="language-plaintext highlighter-rouge">query$</code> and 2 arrows leaving the <code class="language-plaintext highlighter-rouge">results$</code>. Every arrow stands for a subscription on the observable where the arrow starts.
When working with cold observables, the producer function for that observable is executed every time we subscribe. Since <code class="language-plaintext highlighter-rouge">query$</code> is a hot stream, it doesn’t really matter, but <code class="language-plaintext highlighter-rouge">results$</code> will trigger an HTTP call every time it gets subscribed to. In short: the subscription on <code class="language-plaintext highlighter-rouge">loading$</code> and <code class="language-plaintext highlighter-rouge">filteredResults$</code> will trigger a subscription on <code class="language-plaintext highlighter-rouge">results$</code> twice. The SIP diagram show us which subscriptions need to be shared.</p>

<p><img src="/assets/images/posts/sip-principle/sip3.png" alt="sip3" /></p>

<h2 id="check-it-out">Check it out</h2>

<p>The SIP diagram is complete now and we can start coding. Since this article is really about the SIP principle I won’t explain the code in detail. However, you can find the complete code in the StackBlitz below.</p>
<iframe src="https://stackblitz.com/edit/sip-principle?embed=1&amp;file=app/app.component.ts" style="width: 100%; height: 500px"></iframe>

<h2 id="conclusion">Conclusion</h2>

<p>Before starting with implementing complex RxJS screens. Take a whiteboard and draw the flow first. The SIP principle that we created works for us but isn’t the only way to go of course.</p>

<p>If you check the code inside the StackBlitz, you might be surprised about the amount of lines of code that we need to create this application. We have only a few lines of real logic, and we have covered most corner cases by thinking reactive.</p>

<p>Because of the use of the <code class="language-plaintext highlighter-rouge">async</code> pipe we don’t need to unsubscribe from any stream manually since the <code class="language-plaintext highlighter-rouge">async</code> pipe does that for us.</p>

<h2 id="special-thanks">Special thanks</h2>

<p><a href="https://twitter.com/jvandemo">Jurgen van de Moere</a> for helping us with finding the right acronym.</p>

<p>And the awesome reviewers:</p>
<ul>
  <li><a href="https://twitter.com/manfredsteyer">Manfred Steyer</a></li>
  <li><a href="https://twitter.com/niklas_wortmann">Jan-Niklas Wortmann</a></li>
  <li><a href="https://twitter.com/tim_deschryver">Tim Deschryver</a></li>
  <li><a href="https://twitter.com/webdave_de">David Müllerchen</a></li>
</ul>]]></content><author><name>brechtbilliet</name></author><category term="RxJS" /><summary type="html"><![CDATA[A few months back we released RxJS best practices in Angular and a while before that Thinking reactively in Angular and RxJS. Both of these articles are focussing on “trying to make the mind switch towards reactive programming”.]]></summary></entry><entry><title type="html">Redux (@ngrx/store) best practices</title><link href="https://blog.brecht.io/Redux-best-practices/" rel="alternate" type="text/html" title="Redux (@ngrx/store) best practices" /><published>2018-04-27T00:00:00+02:00</published><updated>2018-04-27T00:00:00+02:00</updated><id>https://blog.brecht.io/Redux-best-practices</id><content type="html" xml:base="https://blog.brecht.io/Redux-best-practices/"><![CDATA[<p><a href="https://github.com/ngrx/platform/blob/master/docs/store/README.md">@ngrx/store</a> is a library that tries to solve the problems of state management through the principles of <a href="https://redux.js.org/">Redux</a>. The difference between Redux and @ngrx/store is that @ngrx/store is written specifically for <a href="https://angular.io">Angular</a> and it embraces the use of Observables from <a href="http://reactivex.io/rxjs/">RxJS</a>.
The combination of redux principles and RxJS can be very powerful when it comes to writing reactive applications.
Since a lot of Angular projects use @ngrx/store, it might be a good idea to write down some best-practices.</p>

<p>Note: The best-practices and opinions described in this article are strictly personal. Best practices are almost always a matter of opinion. Nevertheless, we (StrongBrew) are using these best practices at all our customers on a daily basis and they certainly work for us.   From now on @ngrx/store will be reffered to as Redux in this article.</p>

<h2 id="to-redux-or-not-to-redux">To Redux or not to Redux?</h2>

<p>The first question that we might want to ask ourselves is do we really need Redux in our application.
It is a best practice to only use it when your application demands it.
<a href="https://blog.strongbrew.io/do-we-really-need-redux">This article</a> tackles this question separately.</p>

<h2 id="basic-best-practices">Basic best practices</h2>

<p>While the following list might be common sense for an experienced Redux developer, let’s sum those up as a refreshment for the sake of completeness.</p>
<ul>
  <li>Our application can only count one store, otherwise it would become too complex</li>
  <li>Reducers have to be pure, this is a principle from functional programming which makes functions predictable and avoids side effects</li>
  <li>Immutable datastructures are very important to optimise change detection cycles and avoid unexpected behavior, therefore reducers should handle data in an immutable manner</li>
  <li>Reducers always have to return a value! So don’t forget to implement the default case of the switch statement to return the original state</li>
</ul>

<h2 id="dont-add-models-to-the-store">Don’t add models to the store</h2>

<p>A model can be seen as a javascript object which has functionality, like the following example:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">User</span><span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">firstName</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="k">private</span> <span class="nx">lastName</span><span class="p">:</span><span class="kr">string</span><span class="p">){</span>
    <span class="p">}</span>

    <span class="kd">get</span> <span class="nx">fullName</span><span class="p">():</span> <span class="kr">string</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span> 
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>While the Redux package written by Dan Abramov forbids sending these prototyped objects as a payload, @ngrx/store does not forbid it yet.
However, it is a bad practice because it adds a lot of complexity to the store and chances are big that the models will get broken because of the immutable way of handling data. Check this example for instance:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">(</span><span class="dl">'</span><span class="s1">Brecht</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Billiet</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">fullName</span><span class="p">);</span> <span class="c1">// Brecht Billiet</span>
<span class="kd">const</span> <span class="nx">updatedUser</span> <span class="o">=</span> <span class="p">{...</span><span class="nx">user</span><span class="p">,</span> <span class="na">lastName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Doe</span><span class="dl">'</span><span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">updatedUser</span><span class="p">.</span><span class="nx">fullName</span><span class="p">);</span> <span class="c1">// undefined</span>
</code></pre></div></div>

<p>Since we have updated the user in an immutable way, it has created a new reference and therefore all its functionality has been lost.
This is exactly what our reducers will do with the data that flows into them. So always send plain objects when it comes to sending payloads in the actions.</p>

<p>Another approach for models is using Interfaces. Interfaces are great because are only interpreted in compile time, doesn’t use memory in runtime and are very expressive. If your model doesn’t need to be computed (like <code class="language-plaintext highlighter-rouge">get fullName()</code> in the previous example), then is advisable to use Interfaces instead.</p>

<p>Using Interfaces allows us to get advantage of some TypeScript features like <code class="language-plaintext highlighter-rouge">Pick&lt;T&gt;</code>. With <code class="language-plaintext highlighter-rouge">Pick&lt;T&gt;</code> we can create Types from Interfaces, which is very handy in some situations, like creating a model and a record with fewer properties:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kr">interface</span> <span class="nx">User</span> <span class="p">{</span>
    <span class="nl">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
    <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">middleName</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">lastName</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">fullName</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">address</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">city</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">state</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">zip</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">type</span> <span class="nx">UserRecord</span> <span class="o">=</span> <span class="nb">Pick</span><span class="o">&lt;</span><span class="nx">User</span><span class="p">,</span> <span class="dl">'</span><span class="s1">id</span><span class="dl">'</span> <span class="o">|</span> <span class="dl">'</span><span class="s1">fullName</span><span class="dl">'</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div></div>

<p>If the endpoint to get a list of users is returning a partial object instead of the full object then we can create a new Type instead of two Classes or Interfaces. This is a cleaner approach and easier to maintain if your models are prepared for your UI.</p>

<h2 id="what-do-we-put-in-the-store">What do we put in the store?</h2>

<p>We shouldn’t put things in the store just because we can. We have to think about what state needs to be in there and why.
State that is being shared between components can sometimes be kept in the parent component for instance. We call that inner state:
The component keeps its own state, the component itself is responsible for that. If that component state does not affect anything from the application state, it does not need to be on the application state or touch redux.</p>

<p>However, when state needs to be shared between different root components (rendered inside a router-outlet) we might want to keep that state in the store.</p>

<p>When we need to remember a value when navigating through the application we could put that in the store as well. An example here could be: Remembering if a sidebar was collapsed or not, so when we navigate back to the page with the sidebar, it would still be collapsed.</p>

<p>Complex state is something that we might want to put in the store as well, since Redux can handle complex state management in an elegant way.
The general rule of thumb here could be, <strong>Only keep shared state, values that we want to remember and complex state in the store</strong>. Don’t add state in the store if we don’t need to, it would result in unneeded boilerplate and complexity.</p>

<p>That being said, there are 2 more reasons where we might want to add extra state into the store:</p>
<ul>
  <li>When we want to make our application real-time. Check out <a href="https://blog.strongbrew.io/How-we-made-our-app-real-time-in-6-lines-of-code/">How we made our app real time in 6 lines of code</a>.</li>
  <li>When we want to do optimistic updates. Check out <a href="https://blog.strongbrew.io/Cancellable-optimistic-updates-in-Angular2-and-Redux/">Cancellable optimistic updates in Angular2 and Redux</a></li>
</ul>

<h2 id="dont-forget-about-router-params">Don’t forget about router params</h2>

<p>A common mistake is putting things inside the store that could easily be added in the url.
The benefit of keeping state in the url is:</p>

<ul>
  <li>We can use the browser navigation buttons</li>
  <li>We can bookmark the url</li>
  <li>We can share that url with other people</li>
</ul>

<p>If we can put simple things into the url, we should at least consider it.</p>

<h2 id="avoid-huge-lists">Avoid HUGE lists</h2>

<p>Redux can not be seen as a local in-memory database, so we can’t put all our data into the store for performance reasons.
Redux can be seen as an abstraction of state and data that our application needs at a certain time.</p>

<p>For instance if we have a list of 10000 users, we don’t want to put them all in the store. What we could do is keep track of a list of 500 users in the store, which the user can see at that specific time, and load more users on the background and update that buffered list.</p>

<h2 id="designing-the-state">Designing the state</h2>

<p>Designing the state of our application is an important step, and we recommend to draw that state on a whiteboard first. The most important rule here is: <strong>Keep the state as flat as possible</strong></p>

<p>One of the most common bad practices is deep-nesting the state into something that becomes rather complex:</p>

<pre><code class="language-typscript">
// this is an example of how not to design state
export interface ApplicationState {
    moduleA: {
        data: {
            foo: {
                bar: {
                    users: User[],
                    cars: Car[]
                }
            }
        }
    }
}  

// keeping it flat makes the application way easier
export interface ApplicationState {
    users: User[],
    cars: Car[]
}  
</code></pre>

<p>I’m not saying you cannot nest state, I am saying we have to be very careful when we do. The general rule of thumb here is: <strong>keep the state as flat as possible</strong>
If we want to compose state in @ngrx/store we can work with feature module reducers and lazy load them as we can see in <a href="https://github.com/ngrx/platform/blob/master/docs/store/api.md#feature-module-state-composition">Feature Module State Composition</a>.</p>

<h2 id="make-everything-readonly">Make everything readonly</h2>

<p>We already covered the reason why we need to work immutable, but how can we enforce this?
Typescript comes with a readonly keyword which we can use to make a property readonly</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
    <span class="k">readonly</span> <span class="na">firstName</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="k">readonly</span> <span class="na">lastName</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">user</span><span class="p">:</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span><span class="na">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Brecht</span><span class="dl">'</span><span class="p">,</span> <span class="na">lastName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Billiet</span><span class="dl">'</span><span class="p">};</span>
<span class="nx">user</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Doe</span><span class="dl">'</span><span class="p">;</span><span class="c1">//cannot assign to 'lastName' </span>
<span class="c1">// because it is a constant of read-only property</span>
</code></pre></div></div>

<p>This would certainly make sure we aren’t updating properties in our reducers by accident. It does suck that we have to write readonly for every property.
The cool thing is that typescript offers us something called “advanced types” where we can do something like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// By using the Readonly&lt;&gt; advanced types all the properties inside the type</span>
<span class="c1">// are readonly by default</span>
<span class="kd">type</span> <span class="nx">User</span> <span class="o">=</span> <span class="nb">Readonly</span><span class="o">&lt;</span><span class="p">{</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">lastName</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="action-design">Action design</h2>

<h3 id="actiontypes">Actiontypes</h3>

<p>An action type should be a string that explains what the action should change in the store. Keep these strings consistent. Don’t make the actiontypes too long, keep them short and clear.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This is bad</span>
<span class="kd">const</span> <span class="nx">DATA_USERS_SET_USER_ADDRESS</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">DATA_USERS_SET_USER_ADDRESS</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">// This is better</span>
<span class="kd">const</span> <span class="nx">SET_USER_ADDRESS</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">SET_USER_ADDRESS</span><span class="dl">'</span><span class="p">;</span>

</code></pre></div></div>

<p>Another cool idea might be to suffix the action with square brackets and put the whole thing into an action object:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// Easy to read/debug</span>
<span class="kd">const</span> <span class="nx">UserActions</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">SET_ADDRESS</span><span class="p">:</span> <span class="dl">'</span><span class="s1">[USER] ADDRESS</span><span class="dl">'</span>
<span class="p">}</span>

</code></pre></div></div>

<p>If the state managment would become very large we could prefix the action, but let’s keep it simple and small as long as we can.</p>

<h3 id="action-creator-classes">Action creator classes</h3>

<p>When we use plain action types and payloads it becomes quite painful to remember all the action type names and all the payloads that belong to them. This example for instance:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">user_id</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">1234</span><span class="dl">'</span><span class="p">,</span> <span class="nx">address</span> <span class="o">=</span> <span class="p">{</span><span class="nx">whatevz</span><span class="p">};</span>
<span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span>
    <span class="p">{</span>
        <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">SET_USER_ADDRESS</span><span class="dl">'</span><span class="p">,</span> 
        <span class="na">payload</span><span class="p">:</span> <span class="p">{</span><span class="nx">user_id</span><span class="p">,</span> <span class="nx">address</span><span class="p">}</span>
    <span class="p">});</span>
</code></pre></div></div>

<p>That’s pretty nasty if we want remember all that stuff, so let’s create action creator classes for these. What if we could do this?</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">user_id</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">1234</span><span class="dl">'</span><span class="p">,</span> <span class="nx">address</span> <span class="o">=</span> <span class="p">{</span><span class="nx">whatevz</span><span class="p">};</span>
<span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="k">new</span> <span class="nx">SetUserAddressAction</span><span class="p">(</span><span class="nx">user_id</span><span class="p">,</span> <span class="nx">address</span><span class="p">));</span>
</code></pre></div></div>

<p>That’s just became way easier to use and we don’t have to remember the payload of the action.</p>

<p>If we wanted to implement the actioncreator class for this action it would look like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">SetUserAddressAction</span> <span class="k">implements</span> <span class="nx">Action</span> <span class="p">{</span>
    <span class="kd">type</span> <span class="o">=</span> <span class="nx">SET_USER_ADDRESS</span><span class="p">;</span>
    <span class="nl">payload</span><span class="p">:</span> <span class="p">{</span><span class="na">user_id</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="na">address</span><span class="p">:</span> <span class="nx">Address</span><span class="p">};</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">user_id</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">address</span><span class="p">:</span> <span class="nx">Address</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span><span class="nx">user_id</span><span class="p">,</span> <span class="nx">address</span><span class="p">};</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="payload-design">Payload design</h3>

<p>When the action would only have one property for the payload we might be encouraged to use the payload directly instead of creating a property in it. However that would lead to inconsistency, so it might be better to always use subproperties</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This is bad (inconsistent with the rest of the actions)</span>
<span class="kd">class</span> <span class="nx">UpdateUserAction</span> <span class="k">implements</span> <span class="nx">Action</span> <span class="p">{</span>
    <span class="kd">type</span> <span class="o">=</span> <span class="nx">UPDATE_USER</span><span class="p">;</span>
    <span class="nl">payload</span><span class="p">:</span> <span class="nx">User</span><span class="p">;</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">user</span><span class="p">:</span> <span class="nx">User</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">payload</span> <span class="o">=</span> <span class="nx">user</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// This is better</span>
<span class="kd">class</span> <span class="nx">UpdateUserAction</span> <span class="k">implements</span> <span class="nx">Action</span><span class="p">{</span>
    <span class="kd">type</span> <span class="o">=</span> <span class="nx">UPDATE_USER</span><span class="p">;</span>
    <span class="nl">payload</span><span class="p">:</span> <span class="p">{</span><span class="na">user</span><span class="p">:</span> <span class="nx">User</span><span class="p">};</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">user</span><span class="p">:</span> <span class="nx">User</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span><span class="nx">user</span><span class="p">};</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="type-safety">Type Safety</h3>

<p>Type Safety is a huge win when using Redux with typescript, it requires a bit of boilerplate but it makes developing reducers feel like a walk in the park. It makes sure that our applications won’t compile if they have type errors and it gives us great autocompletion inside our reducers.
Therefore I would definitely consider it a must. Since <a href="https://twitter.com/KwintenP">Kwinten Pisman</a> already wrote an <a href="https://blog.strongbrew.io/type-safe-actions-in-reducers/">awesome article</a> about this we won’t go in to much detail here.</p>

<h2 id="reducer-design">Reducer design</h2>

<h3 id="destructuring-the-payload">Destructuring the payload</h3>

<p>If we want to make the reducer code more readable and shorter we could use javascript destructuring for that.
This might be personal preference, but it sure as hell makes our reducers easier to read. Take this example for instance:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">usersReducer</span>
  <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">User</span><span class="p">[],</span> <span class="nx">action</span><span class="p">:</span> <span class="nx">UserActions</span><span class="p">):</span> <span class="nx">User</span> <span class="p">[]{</span>
    <span class="k">switch</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">case</span> <span class="dl">'</span><span class="s1">SET_USER_ADDRESS</span><span class="dl">'</span><span class="p">:</span>
        <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> 
          <span class="nx">v</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">user_id</span> <span class="p">?</span> 
          <span class="p">{...</span><span class="nx">user</span><span class="p">,</span> <span class="na">address</span><span class="p">:</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">address</span><span class="p">}</span> <span class="p">:</span> 
          <span class="nx">v</span>
        <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">action.payload.</code>code comes back a few times, resulting in longer codelines.
The following piece of code might be more readable:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">usersReducer</span>
  <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">User</span><span class="p">[],</span> <span class="nx">action</span><span class="p">:</span> <span class="nx">UserActions</span><span class="p">):</span> <span class="nx">User</span> <span class="p">[]{</span>
    <span class="k">switch</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">case</span> <span class="dl">'</span><span class="s1">SET_USER_ADDRESS</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">{</span><span class="nx">user_id</span><span class="p">,</span> <span class="nx">address</span><span class="p">}</span> <span class="o">=</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> 
          <span class="nx">v</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">user_id</span> <span class="p">?</span> 
          <span class="p">{...</span><span class="nx">user</span><span class="p">,</span> <span class="nx">address</span><span class="p">}</span> <span class="p">:</span> 
          <span class="nx">v</span>
        <span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As we can see have have used destructuring to extract the properties of the payload into variables.
Cleaner right? Let’s imagine that our actions has 5 or even more properties on their payloads. In that case this would definitely help.
Something to note here is that the case implementation is wrapped inside a block statement. This is important because our reducer can have the same payload properties for different actions.</p>

<p>This means that <code class="language-plaintext highlighter-rouge">user_id</code> and <code class="language-plaintext highlighter-rouge">address</code> won’t be available in the other case statements, which is exactly what we want.</p>

<h3 id="dont-write-business-logic-inside-our-reducers">Don’t write business logic inside our reducers</h3>

<p>Reducers should not contain business logic, they are used to handle the state in an immutable fashion. We won’t write business logic inside reducers because:</p>

<ul>
  <li>It would become very complex</li>
  <li>Business logic has nothing to do with state management</li>
  <li>We have services for that</li>
</ul>

<h3 id="child-reducers">Child reducers</h3>

<p>When reducers need to update a piece of state a few levels down in the tree it can become complex in no-time. Take this example for instance:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">contracts</span><span class="p">:</span> <span class="nx">Contract</span><span class="p">[];</span>
<span class="p">}</span>
<span class="kd">type</span> <span class="nx">Contract</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">assignees</span><span class="p">:</span> <span class="nx">Assignee</span><span class="p">[];</span>
<span class="p">}</span>
<span class="kd">type</span> <span class="nx">ApplicationState</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">users</span><span class="p">:</span> <span class="nx">User</span><span class="p">[];</span>
<span class="p">}</span>   
<span class="p">...</span>
</code></pre></div></div>

<p>If we would put all the logic to add an assignee to a specific contract of a specific user, the code would be hard to read. Checkout the following piece of code:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This is bad</span>
<span class="kd">function</span> <span class="nx">usersReducer</span>
  <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">User</span><span class="p">[],</span> <span class="nx">action</span><span class="p">:</span> <span class="nx">UserActions</span><span class="p">):</span> <span class="nx">User</span> <span class="p">[]{</span>
  <span class="k">switch</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">ADD_USER_CONTRACT_ASSIGNEE</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="p">{</span><span class="nx">user_id</span><span class="p">,</span> <span class="nx">contract_id</span><span class="p">,</span> <span class="nx">assignee</span><span class="p">}</span> <span class="o">=</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">;</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> 
        <span class="nx">v</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">user_id</span> <span class="p">?</span> 
        <span class="p">{</span>
          <span class="p">...</span><span class="nx">user</span><span class="p">,</span> 
          <span class="na">contracts</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">contracts</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">contract</span> <span class="o">=&gt;</span> 
            <span class="nx">contract</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">contract_id</span> <span class="p">?</span>
            <span class="p">{</span>
              <span class="p">...</span><span class="nx">contract</span><span class="p">,</span> 
              <span class="na">assignees</span><span class="p">:</span> <span class="p">[...</span><span class="nx">contract</span><span class="p">.</span><span class="nx">assignees</span><span class="p">,</span> <span class="nx">assignee</span><span class="p">]</span>
            <span class="p">}</span> <span class="p">:</span> 
            <span class="nx">contract</span>
          <span class="p">)</span>
        <span class="p">}</span> <span class="p">:</span> 
        <span class="nx">v</span>
      <span class="p">)</span>
    <span class="p">}</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>When reducers become complex it might be a good idea to split the reducer up into child reducers. Check the refactored version of the previous example:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This is better</span>
<span class="kd">function</span> <span class="nx">usersReducer</span>
  <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">User</span><span class="p">[],</span> <span class="nx">action</span><span class="p">:</span> <span class="nx">UserActions</span><span class="p">):</span> <span class="nx">User</span> <span class="p">[]{</span>
  <span class="k">switch</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">ADD_USER_CONTRACT_ASSIGNEE</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="p">{</span><span class="nx">user_id</span><span class="p">,</span> <span class="nx">contract_id</span><span class="p">,</span> <span class="nx">assignee</span><span class="p">}</span> <span class="o">=</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">;</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> 
        <span class="nx">v</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">user_id</span> <span class="p">?</span> 
        <span class="p">{</span>
          <span class="p">...</span><span class="nx">user</span><span class="p">,</span> 
          <span class="na">contracts</span><span class="p">:</span> <span class="nx">contractsReducer</span><span class="p">(</span><span class="nx">contracts</span><span class="p">,</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">)</span>
        <span class="p">}</span> <span class="p">:</span> 
        <span class="nx">v</span>
      <span class="p">)</span>
    <span class="p">}</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">contractsReducer</span>
  <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">Contract</span><span class="p">[],</span> <span class="nx">action</span><span class="p">:</span> <span class="nx">UserActions</span><span class="p">):</span> <span class="nx">Contract</span> <span class="p">[]{</span>
  <span class="k">switch</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">ADD_USER_CONTRACT_ASSIGNEE</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="p">{</span> <span class="nx">contract_id</span><span class="p">,</span> <span class="nx">assignee</span><span class="p">}</span> <span class="o">=</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">;</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> 
        <span class="nx">v</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">contract_id</span> <span class="p">?</span> 
        <span class="p">{</span>
          <span class="p">...</span><span class="nx">contract</span><span class="p">,</span> 
          <span class="na">assignees</span><span class="p">:</span> <span class="p">[...</span><span class="nx">assignees</span><span class="p">,</span> <span class="nx">assignee</span><span class="p">]</span>
        <span class="p">}</span> <span class="p">:</span> 
        <span class="nx">v</span>
      <span class="p">)</span>
    <span class="p">}</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>As we can see, we have extracted the handling of contracts into its own reducer, which follows the exact same principles of a regular reducer.</p>

<p>The example just became a lot easier to read and way more maintainable. When traversing complex data structures, reducer nesting can be a really elegant way of managing state.</p>

<h2 id="testing">Testing</h2>

<p>Since reducers are pure functions, unit testing them is very easy.
We won’t need to mock out any dependencies and we only have to test the value that the reducer returns.</p>

<p>We can also use <a href="https://www.npmjs.com/package/deep-freeze">deepfreeze</a> to freeze the state that when the reducer accidently mutates data, the tests will throw an error. Deepfreeze is nothing more than a recursive <code class="language-plaintext highlighter-rouge">Object.freeze</code></p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">reducer: usersReducer</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">case UPDATE_USER</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should return a new instance with the correct state</span><span class="dl">'</span><span class="p">,</span> 
    <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">[</span><span class="k">new</span> <span class="nx">User</span><span class="p">(</span><span class="dl">'</span><span class="s1">1</span><span class="dl">'</span><span class="p">),</span> <span class="k">new</span> <span class="nx">User</span><span class="p">(</span><span class="dl">'</span><span class="s1">2</span><span class="dl">'</span><span class="p">)];</span>
      <span class="c1">// deepfreeze makes sure the reducer </span>
      <span class="c1">// doesn't mutate anything by accident</span>
      <span class="nx">deepfreeze</span><span class="p">(</span><span class="nx">initialState</span><span class="p">);</span> 
      <span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">(</span><span class="dl">'</span><span class="s1">2</span><span class="dl">'</span><span class="p">);</span>
      <span class="kd">const</span> <span class="nx">action</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UpdateUserAction</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
      <span class="kd">const</span> <span class="nx">newState</span> <span class="o">=</span> <span class="nx">usersReducer</span><span class="p">(</span><span class="nx">initialState</span><span class="p">,</span> <span class="nx">action</span><span class="p">);</span>
      <span class="c1">// check if the result of the array is a new ref</span>
      <span class="nx">expect</span><span class="p">(</span><span class="nx">newState</span><span class="p">).</span><span class="nx">not</span><span class="p">.</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">initialState</span><span class="p">);</span> 
      <span class="c1">// check if the result of the user is a new ref</span>
      <span class="nx">expect</span><span class="p">(</span><span class="nx">newState</span><span class="p">[</span><span class="mi">1</span><span class="p">]).</span><span class="nx">not</span><span class="p">.</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">initialState</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
      <span class="c1">// check if the user got updated automatically</span>
      <span class="nx">expect</span><span class="p">(</span><span class="nx">newState</span><span class="p">[</span><span class="mi">1</span><span class="p">]).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
  
</code></pre></div></div>

<p><strong>Note: Don’t forget to test the default action</strong></p>

<h2 id="decoupling-redux-from-the-presentation-layer">Decoupling redux from the presentation layer</h2>

<p>Having the store injected everywhere in our application is not a good idea. We want to create an Angular, Vue or React application. Not a Redux application.</p>

<p>Therefore we could consider the following as best practices:</p>
<ul>
  <li>Components don’t need to know we are using Redux, don’t inject the store in them.</li>
  <li>Services generally don’t need to know we are using Redux, don’t inject the store in them.</li>
  <li>We want to be able to refactor Redux away from our application without to much effort</li>
</ul>

<p>Therefore we want to have some kind of abstraction layer between the presentation layer and the state management layer.</p>

<p>How to abstract away the statemanagement layer can be read in the following two articles: <a href="https://blog.strongbrew.io/A-scalable-angular2-architecture/">A scalable angular architecture</a> and <a href="https://blog.strongbrew.io/A-scalable-angular-architecture-part2/">A scalable angular architecture part 2</a>.
This is an architecture that we are using at our customers that really works for us.</p>

<h2 id="redux-as-a-messaging-bus-vs-redux-as-a-state-management-layer">Redux as a messaging bus VS redux as a state management layer</h2>

<p>This might be a personal preference, but I like to use Redux as a pure state management layer. Yes, there are tools like @ngrx/effects where
we can send actions to our application and those actions won’t just perform state management but will do XHR calls among other things.</p>

<p>The nice thing about this approach is that we use some kind of messaging bus. However, I mostly like to keep it simple and abstract Redux away as much as possible. Therefore I don’t use @ngrx/effects and only use Redux to update pieces of state and consume theses pieces. Some part of me believes that Redux shouldn’t be used to perform backend calls nor decide when to optimistically update. I usually tackle optimistic updates <a href="https://blog.strongbrew.io/Cancellable-optimistic-updates-in-Angular2-and-Redux/">this way</a>.</p>

<p>That being said, I wouldn’t call my approach a best practice, but it is a best practice to really think about which way we want it.</p>

<h2 id="conclusion">Conclusion</h2>

<p>We learned a lot! Once again, the best practices explained in this article are based on personal experiences and projects we have worked on. These are practices that work for us. They are not meant to be seen as the only way of doing things.</p>

<h2 id="special-thanks">Special thanks</h2>

<p>A very warm and much appreciated special thanks to the following people:</p>

<p><a href="https://twitter.com/ncjamieson">Nicholas Jamieson</a>, <a href="https://twitter.com/elecash">Raúl Jiménez</a> and <a href="https://twitter.com/FabianGosebrink">Fabian Gosebrink</a>: Thank you all so much for reviewing and pointing out some awesome ideas</p>

<p>Your input makes blogging worth while!</p>]]></content><author><name>brechtbilliet</name></author><category term="brechtbilliet" /><category term="Redux" /><category term="@ngrx" /><category term="Angular" /><summary type="html"><![CDATA[This article is all about what to do and what not to do when using Redux (@ngrx/store)]]></summary></entry><entry><title type="html">Do we really need Redux or @ngrx/store</title><link href="https://blog.brecht.io/do-we-really-need-redux/" rel="alternate" type="text/html" title="Do we really need Redux or @ngrx/store" /><published>2018-04-13T00:00:00+02:00</published><updated>2018-04-13T00:00:00+02:00</updated><id>https://blog.brecht.io/do-we-really-need-redux</id><content type="html" xml:base="https://blog.brecht.io/do-we-really-need-redux/"><![CDATA[<h2 id="about-this-article">About this article</h2>

<p>If you are writing Angular, Vue or React applications, chances are big that you have used or encountered the Redux pattern.
Redux helps us to structure statemanagement in an immutable matter which is great, but in order to use it correctly, we have to write a bunch of boilerplate code.
In this article I would like to tackle the question on when to use Redux and why.
The referred plugins/code samples are written in an Angular context. But the principles explained in this articles work for other frameworks as well. This also means that we are using the <a href="https://github.com/ngrx/platform/blob/master/docs/store/README.md">@ngrx/store</a> package instead of the <a href="https://redux.js.org/">Redux</a> package</p>

<h2 id="to-redux-or-not-to-redux">To Redux or not to Redux?</h2>

<p>First of all it’s important to note that Redux solves certain problems for us. If we are not experiencing those problems, then there is a big chance that the Redux pattern
is overkill for our application.</p>

<p>The first question that we might want to ask ourselves is:
<strong>Does My application have state?</strong> State can be the value of a pager that we want to remember, or the fact that a sidebar is collapsed or not. State could be a cached set of data coming from our backend, or user information that we need throughout the whole application.
It could be a simple value that we want to remember in memory when we are navigating between pages.</p>

<p>Let’s sum up some examples where the Redux principle might shine in our applications:</p>
<ul>
  <li>Storing state (like the value of a search filter so it’s still available when the user navigates back to a certain grid)</li>
  <li>Sharing state between components that have their own route, and thus won’t have a parent component to pass them the state through inputs or properties</li>
  <li>Optimistic updates: Check <a href="https://blog.strongbrew.io/Cancellable-optimistic-updates-in-Angular2-and-Redux/">this article</a></li>
  <li>Real-time updates: Check <a href="https://blog.strongbrew.io/How-we-made-our-app-real-time-in-6-lines-of-code/">this article</a></li>
  <li>When we want undo/redo logic</li>
  <li>When we want to keep track of all the state changes and debug them with awesome tooling (Redux devtools)</li>
  <li>When we want an organised way of handling session storage or localstorage. Check <a href="https://github.com/btroncone/ngrx-store-localstorage">this plugin</a></li>
</ul>

<p>When we are writing Angular applications it’s a best-practice to work with immutable data structures. That way we can make use of the <a href="https://angular-2-training-book.rangle.io/handout/change-detection/change_detection_strategy_onpush.html">OnPush changedetectionstrategy</a> that angular provides us, which results in better performance and less unexpected behavior. In React we could use a <a href="https://reactjs.org/docs/react-api.html#reactpurecomponent">Pure component</a> for that. So, for this article let’s assume that immutable datastructures are the way to go and that our application needs it.</p>

<p>While we know that Redux forces you to use immutable datastructures, let’s still challenge the need of Redux shall we?
If statemanagement is trivial to our applications and we just want to store values we could work with a state service instead of Redux.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">UsersService</span> <span class="p">{</span>
    <span class="k">private</span> <span class="nx">_users$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="p">([]);</span>

    <span class="kd">get</span> <span class="nx">users$</span><span class="p">():</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">User</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_users$</span><span class="p">.</span><span class="nx">asObservable</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// IMPORTANT: since we use an immutable dataflow</span>
    <span class="c1">// we have to make sure users is a new instance</span>
    <span class="nx">setUsers</span><span class="p">(</span><span class="nx">users</span><span class="p">:</span> <span class="nx">User</span><span class="p">[]):</span> <span class="k">void</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_users$</span><span class="p">.</span><span class="nx">next</span><span class="p">(...</span><span class="nx">users</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>This example shows how we can set the simple value of an array of users by calling the <code class="language-plaintext highlighter-rouge">setUsers()</code>function. It will store the value into a BehaviorSubject which we will consume as an observable. The spread operator (<code class="language-plaintext highlighter-rouge">...</code>) will create a new instance of the <code class="language-plaintext highlighter-rouge">users</code> array. That way we know that we are working in an immutable manner. This was pretty easy and we don’t need Redux anymore, nor all the boilerplate that we would had to write. So if the state of our application only contains a few simple properties, the Redux pattern might be overkill.</p>

<p>But what if we need to do more then just set the value of <code class="language-plaintext highlighter-rouge">users</code>. What if we want to add and remove users from that stream, and we would have to do it in an immutable manner? Checkout the following example for instance.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">UsersService</span> <span class="p">{</span>
    <span class="k">private</span> <span class="nx">_users$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="p">([]);</span>

    <span class="kd">get</span> <span class="nx">users$</span><span class="p">():</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">User</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_users$</span><span class="p">.</span><span class="nx">asObservable</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="nx">setUsers</span><span class="p">(</span><span class="nx">users</span><span class="p">:</span> <span class="nx">User</span><span class="p">[]):</span> <span class="k">void</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_users$</span><span class="p">.</span><span class="nx">next</span><span class="p">(...</span><span class="nx">users</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">addUser</span><span class="p">(</span><span class="nx">user</span><span class="p">:</span> <span class="nx">User</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
        <span class="c1">// We cannot use array.push because we only want to</span>
        <span class="c1">// pass immutable data to the streame</span>
        <span class="c1">// for the OnPush strategy remmber?</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_users$</span><span class="p">.</span><span class="nx">next</span><span class="p">([...</span><span class="k">this</span><span class="p">.</span><span class="nx">_users$</span><span class="p">.</span><span class="nx">getValue</span><span class="p">(),</span> <span class="nx">user</span><span class="p">])</span>
    <span class="p">}</span>

    <span class="nx">removeUser</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Again, we have to create a new Array instance to not break the</span>
        <span class="c1">// immutable dataflow</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_users$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_users$</span><span class="p">.</span><span class="nx">getValue</span><span class="p">().</span><span class="nx">filter</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> <span class="nx">v</span><span class="p">.</span><span class="nx">id</span> <span class="o">!==</span> <span class="nx">id</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p>The code above is starting to feel a bit weird, and it seems like we are writing reducer logic inside of this state service to keep it immutable. We have also created our own observable implementation so we could subscribe to the changes of our state service. While it could still be overkill to use redux if this is the only state in our application, it might become complex if we are working with multiple states, nested states, etc.</p>

<p>Another example is caching. People use redux to cache data results. A simple <code class="language-plaintext highlighter-rouge">shareReplay</code> operator might to the trick as well.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">fetchUsers</span><span class="p">():</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">User</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">httpClient</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">''</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">shareReplay</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="summary">Summary</h2>

<p>I would suggest to not use Redux untill we actually need it, and in my experience most applications that I have written in the past did need redux at a certain point. That being said I also wrote a bunch of applications that didn’t need it at all (CRUD applications for instance.</p>

<p>It’s up to you if you want to use Redux or not, <strong>but keep your applications immutable at all times</strong>.
It will save you a lot of energy in debugging and it makes sure that you can optimise the change detection cycle in your applications.</p>]]></content><author><name>brechtbilliet</name></author><category term="brechtbilliet" /><category term="Redux" /><summary type="html"><![CDATA[This article explains the cases when Redux is a good idea or when it is overkill for your application]]></summary></entry><entry><title type="html">Pre-rendering Angular Applications</title><link href="https://blog.brecht.io/prerendering-angular-apps/" rel="alternate" type="text/html" title="Pre-rendering Angular Applications" /><published>2018-03-04T00:00:00+01:00</published><updated>2018-03-04T00:00:00+01:00</updated><id>https://blog.brecht.io/prerendering-angular-apps</id><content type="html" xml:base="https://blog.brecht.io/prerendering-angular-apps/"><![CDATA[<h2 id="why-should-we-pre-render-angular-applications">Why should we pre-render Angular applications?</h2>

<p>At the moment of writing this article, there are several ways of optimizing Angular applications - We could compile them <a href="https://angular.io/guide/aot-compiler">ahead-of-time</a> through AOT compilation.
We could use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">service workers</a> to optimize caching. And there are plenty of other PWA (progressive web app) features that can increase the quality and overall performance of our Angular applications.</p>

<p>However, there are a still a few problems that these optimizations won’t fix:</p>
<ul>
  <li><strong>SEO</strong> (search engine optimization): At the time of writing, SPAs (single-page applications) are harder to index by search engines because the content isn’t available on load time. Therefore, the application is likely to fail on several SEO requirements.</li>
  <li><strong>Initial page load</strong> could be faster: Since the application still needs to be bootstrapped after the page is loaded, there is an initial waiting time until the user can use the application. This results in a bad user experience.</li>
</ul>

<p>These two problems can be fixed by implementing <a href="https://angular.io/guide/universal">SSR (server-side rendering)</a>. SSR executes the Angular application on the server. That way the server will actually serve the compiled content in a way that search engine crawlers can read it. This is really the best of both worlds: The application will be rendered on the server, but when the JavaScript bundle is loaded, it will turn into a SPA. That way the application is rich and fast at the same time!</p>

<p>To optimize our <a href="https://strongbrew.io">StrongBrew</a> website, we started using this approach. It was pretty fast when we ran it locally. However, the StrongBrew website is hosted on <a href="https://firebase.google.com">Firebase</a> and the SSR part was hosted by Firebase functions.</p>

<p>We really love Firebase and everything it stands for, but for us, SSR on Firebase functions was just too slow. Sometimes it took 4 seconds to serve the content… Since the loading time of a website is very important for keeping our visitors, we had to find another way to serve the content in a more effective manner.</p>

<p>SSR works like this: A user navigates to a URL =&gt; the server compiles the application and serves it.
But instead of compiling every route when the server receives a request, what if we could execute the SSR logic for every route at build time? That would certainly fix our problem.</p>

<p>That way we would run generated static HTML files, which is insanely fast, and when the JavaScript bundles are loaded, the browser would take over.
This also uses the best of both worlds: Ultra fast loading time + we don’t need to give up our rich SPA experience.
The result went from several seconds to 30 milliseconds.
<img src="/assets/images/posts/prerendering-angular-apps/ssr-vs-prerender.png" alt="SSR vs Prerender" /></p>

<p>This is a super fast and super effective improvement but it has one very important limitation.
<strong>It’s not possible to prerender dynamic content</strong>. The data in the StrongBrew website isn’t fetched by AJAX calls (at least not the data that has to be indexed). It rather works with simple webpack imports of JSON files. These are inserted at build time.</p>

<p>This does not mean that loading content dynamically isn’t possible at all, it just won’t get prerendered.</p>

<h2 id="lets-dive-in">Let’s dive in</h2>

<p>Enough chit chat! Let’s dive into some code.
I’ve created this <a href="https://github.com/strongbrewio/prerender-angular-example">GitHub repository</a> just for you! It’s a simple website with a few pages and the build system doesn’t know how to pre-render yet.
Checkout the branch <code class="language-plaintext highlighter-rouge">runtime</code> by running the command <code class="language-plaintext highlighter-rouge">git checkout runtime</code>. When running <code class="language-plaintext highlighter-rouge">npm i &amp;&amp; npm run start</code>, the bash should install all the NPM dependencies and host the application on <code class="language-plaintext highlighter-rouge">http://localhost:4200</code>, just like any default Angular CLI application.</p>

<h3 id="installing-the-dependencies">Installing the dependencies</h3>

<p>Great! We have a running website, but nothing is pre-rendered yet.
The first thing we need to do is to install @angular/platform-server by running
<code class="language-plaintext highlighter-rouge">npm i @angular/platform-server -D</code>. This is the most important bundle for SSR. This module contains the basics to run the Angular application on the server.</p>

<h3 id="applying-the-server-transition">Applying the server transition</h3>

<p>Next, we need to update the <code class="language-plaintext highlighter-rouge">app.module.ts</code> to enable server transition. This will make sure that Angular takes over on the frontend when the JavaScript bundles are loaded.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// src/app/app.module.ts</span>
<span class="p">@</span><span class="nd">NgModule</span><span class="p">({</span>
  <span class="p">...</span>
  <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">BrowserModule</span><span class="p">.</span><span class="nx">withServerTransition</span><span class="p">(</span>
        <span class="c1">// this is just the name of our application</span>
        <span class="c1">// configured in angular-cli.json</span>
        <span class="p">{</span> <span class="na">appId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">prerender-angular-example</span><span class="dl">'</span> <span class="p">}</span>
    <span class="p">),</span>
    <span class="p">...</span>
  <span class="p">],</span>
  <span class="p">...</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppModule</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>

<h3 id="creating-the-prerender-module">Creating the prerender module</h3>

<p>Then, we need to create a specific prerender module that will use the AppModule we have just adjusted. Let’s create an <code class="language-plaintext highlighter-rouge">app.prerender.module.ts</code> where we can tell which component it has to bootstrap.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// src/app/app.prerender.module.ts</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">NgModule</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ServerModule</span><span class="p">,</span> <span class="nx">ServerTransferStateModule</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/platform-server</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">AppModule</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./app.module</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">AppComponent</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./app.component</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">NgModule</span><span class="p">({</span>
  <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">AppModule</span><span class="p">,</span>
    <span class="nx">ServerModule</span><span class="p">,</span>
    <span class="nx">ServerTransferStateModule</span>
  <span class="p">],</span>
  <span class="na">bootstrap</span><span class="p">:</span> <span class="p">[</span><span class="nx">AppComponent</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppPrerenderModule</span> <span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="defining-a-prerender-entrypoint">Defining a prerender entrypoint</h3>

<p>To use the SSR logic at build time, we need to have a specific bundle. Since the <code class="language-plaintext highlighter-rouge">main.ts</code> file is used to bootstrap the application for the browser, we also need a <code class="language-plaintext highlighter-rouge">main.prerender.ts</code> file that will be used to create the prerender bundle.
Let’s create that file, shall we?</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// src/app/main.prerender.ts</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">enableProdMode</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
<span class="k">export</span> <span class="p">{</span> <span class="nx">AppPrerenderModule</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./app/app.prerender.module</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">enableProdMode</span><span class="p">();</span>
</code></pre></div></div>
<h3 id="a-prerender-tsconfigjson">A prerender tsconfig.json</h3>

<p>We are almost there, I promise, but we need a few more things. We need a specific <strong>tsconfig</strong> file that compiles the bundle to something that the node server can read. It’s important for the compiler to compile to a <strong>commonjs</strong> package. This is because node.js uses this by default. So we need to create a <code class="language-plaintext highlighter-rouge">tsconfig.prerender.json</code> file:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">/*</span><span class="w"> </span><span class="err">src/tsconfig.prerender.json</span><span class="w"> </span><span class="err">*/</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"extends"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./tsconfig.app.json"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"outDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"../out-tsc/prerender"</span><span class="p">,</span><span class="w">
    </span><span class="err">/*</span><span class="w"> </span><span class="err">node</span><span class="w"> </span><span class="err">only</span><span class="w"> </span><span class="err">understands</span><span class="w"> </span><span class="err">commonjs</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">now*/</span><span class="w">
    </span><span class="nl">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"commonjs"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"exclude"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"test.ts"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"**/*.spec.ts"</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="err">/*</span><span class="w"> </span><span class="err">Additional</span><span class="w"> </span><span class="err">informations</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">bootstrap</span><span class="w"> </span><span class="err">Angular</span><span class="w"> </span><span class="err">*/</span><span class="w">
  </span><span class="nl">"angularCompilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"entryModule"</span><span class="p">:</span><span class="w"> </span><span class="s2">"app/app.prerender.module#AppPrerenderModule"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<h3 id="letting-angular-cli-know-and-generating-the-bundle">Letting Angular CLI know and generating the bundle</h3>

<p>In the apps entry of the <code class="language-plaintext highlighter-rouge">angular-cli.json</code> file, we need to add a new app where we refer to the <code class="language-plaintext highlighter-rouge">main.prerender.ts</code> file and the <code class="language-plaintext highlighter-rouge">tsconfig.prerender.json</code> file. The app section should look like this:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"prerender"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"platform"</span><span class="p">:</span><span class="w"> </span><span class="s2">"server"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"root"</span><span class="p">:</span><span class="w"> </span><span class="s2">"src"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"outDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"dist-prerender"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"main.prerender.ts"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"tsconfig"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsconfig.prerender.json"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"environmentSource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"environments/environment.ts"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"environments"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"dev"</span><span class="p">:</span><span class="w"> </span><span class="s2">"environments/environment.ts"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"prod"</span><span class="p">:</span><span class="w"> </span><span class="s2">"environments/environment.prod.ts"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Update the package JSON so it builds both the normal package and the server package. Set the <strong>output-hashing</strong> to none so that the build generates a clean <code class="language-plaintext highlighter-rouge">main.bundle.js</code> without any hash.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    "build": "ng build --prod &amp;&amp; ng build --prod --app prerender --output-hashing=none",
</code></pre></div></div>
<p>When running <code class="language-plaintext highlighter-rouge">npm run build</code> the following files should be created:</p>
<ul>
  <li>dist (this contains the normal build)</li>
  <li><code class="language-plaintext highlighter-rouge">dist-prerender/main.bundle.js</code></li>
</ul>

<p>This <code class="language-plaintext highlighter-rouge">main.bundle.js</code> file exports a module called <code class="language-plaintext highlighter-rouge">AppPrerenderModuleNgFactory</code>. This is the module that we can use to pre-render the whole thing.</p>

<h2 id="generating-the-static-files">Generating the static files</h2>

<p>We have just generated the <code class="language-plaintext highlighter-rouge">main.bundle.js</code>, the file that we need to perform server-side rendering. However we don’t want to do server-side rendering in this case, we want to <strong>pre-render</strong> the html at build time. To do that we need a script that will complete the following steps.</p>

<ul>
  <li>Create an array with routes (we could automate this if we want)</li>
  <li>Loop over that array and for every entry:
    <ul>
      <li>create a folder in the dist map with that route name</li>
      <li>use the <code class="language-plaintext highlighter-rouge">main.bundle.js</code> to render the html and store that html as an <code class="language-plaintext highlighter-rouge">index.html</code> in the folder we just created.</li>
      <li>Overwrite the <code class="language-plaintext highlighter-rouge">dist/index.html</code> file.</li>
    </ul>
  </li>
</ul>

<p>Let’s call that script <code class="language-plaintext highlighter-rouge">prerender.ts</code>. Since I’m a typescript enthusiast, I want to develop the prerender script in typescript and use <a href="https://www.npmjs.com/package/ts-node">ts-node</a> to run it.
We can start with creating an empty <code class="language-plaintext highlighter-rouge">prerender.ts</code> file in the root folder and installing ts-node with <code class="language-plaintext highlighter-rouge">npm i -D ts-node</code></p>

<p>Now we can update the scripts section of the package.json so that the render function is called when the build is completed:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"ng"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ng"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ng serve"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ng build --prod &amp;&amp; ng build --prod --app prerender --output-hashing=none"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"postbuild"</span><span class="p">:</span><span class="w"> </span><span class="s2">"npm run render"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"render"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ts-node prerender.ts"</span><span class="p">,</span><span class="w">
    </span><span class="err">...</span><span class="w">
  </span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div>

<p>The only puzzle piece that is still missing is implementing the <code class="language-plaintext highlighter-rouge">prerender.ts</code> file.</p>

<h3 id="completing-the-prerenderts-file">Completing the prerender.ts file</h3>

<p>The following code should be self-explanatory:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">'</span><span class="s1">zone.js/dist/zone-node</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">path</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">fs</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">enableProdMode</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">renderModuleFactory</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/platform-server</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">AppPrerenderModuleNgFactory</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./dist-prerender/main.bundle</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">distFolder</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">./dist</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">fs</span>
    <span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s2">`</span><span class="p">${</span><span class="nx">distFolder</span><span class="p">}</span><span class="s2">/index.html`</span><span class="p">),</span> <span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">toString</span><span class="p">();</span>

<span class="c1">// we could automate this based on the app.routes.ts file but</span>
<span class="c1">// to keep it simple let's just create an array with the routes we want</span>
<span class="c1">// to prerender</span>
<span class="kd">const</span> <span class="nx">paths</span> <span class="o">=</span> <span class="p">[</span>
    <span class="dl">'</span><span class="s1">/about</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">/brews</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">/consultancy</span><span class="dl">'</span><span class="p">];</span>
<span class="nx">enableProdMode</span><span class="p">();</span>

<span class="c1">// for every route render the html and save it in the correct folder</span>
<span class="nx">paths</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">p</span> <span class="o">=&gt;</span> <span class="nx">renderToHtml</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">distFolder</span> <span class="o">+</span> <span class="nx">p</span><span class="p">));</span>

<span class="c1">// don't forget to overwrite the index.html as well</span>
<span class="nx">renderToHtml</span><span class="p">(</span><span class="dl">'</span><span class="s1">/index.html</span><span class="dl">'</span><span class="p">,</span> <span class="nx">distFolder</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">renderToHtml</span><span class="p">(</span><span class="nx">url</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">folderPath</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
  <span class="c1">// Render the module with the correct url just </span>
  <span class="c1">// as the server would do</span>
  <span class="nx">renderModuleFactory</span><span class="p">(</span><span class="nx">AppPrerenderModuleNgFactory</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">url</span><span class="p">,</span>
    <span class="na">document</span><span class="p">:</span> <span class="nx">index</span>
  <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">html</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// create the route directory</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">url</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">/index.html</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">mkdirSync</span><span class="p">(</span><span class="nx">folderPath</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">folderPath</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/index.html</span><span class="dl">'</span><span class="p">,</span> <span class="nx">html</span><span class="p">,</span>  <span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span>  <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`success`</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">}</span>

</code></pre></div></div>
<h3 id="testing-the-pre-rendered-application">Testing the pre-rendered application</h3>

<p>To test the website, we can build the project with <code class="language-plaintext highlighter-rouge">npm run build</code>. To serve it, we can use http-server. We can install http-server by running <code class="language-plaintext highlighter-rouge">npm i -g http-server</code>. By navigating into the <code class="language-plaintext highlighter-rouge">dist</code> directory and running <code class="language-plaintext highlighter-rouge">http-server</code>, the application will be hosted on port 8080.</p>

<p>If we navigate to http://localhost:8080 in the browser, we will see the pre-rendered application. We can test the SPA experience by navigating between the different pages and we can test the pre-rendered part by looking at the source code.</p>

<p><img src="/assets/images/posts/prerendering-angular-apps/sourcecode.png" alt="SSR sourcecode" /></p>

<h2 id="closing-words">Closing words</h2>

<p>I hope you liked this article and learned something.
We can find the full pre-rendered version by checking out branch <code class="language-plaintext highlighter-rouge">prerendered</code> by running <code class="language-plaintext highlighter-rouge">git checkout prerendered</code>. To test this example, checkout the previous section.</p>

<p>Note: to optimize the HTML even more, we could use an HTML minifier like <a href="https://www.npmjs.com/package/html-minifier">this one</a> to shrink the HTML where possible. The example could look something like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">minify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">html-minifier</span><span class="dl">'</span><span class="p">).</span><span class="nx">minify</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">renderToHtml</span><span class="p">(</span><span class="nx">url</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">folderPath</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="c1">// Render the module with the correct url just </span>
    <span class="c1">// as the server would do</span>
    <span class="nx">renderModuleFactory</span><span class="p">(</span><span class="nx">AppPrerenderModuleNgFactory</span><span class="p">,</span> <span class="p">{</span>
        <span class="nx">url</span><span class="p">,</span>
        <span class="na">document</span><span class="p">:</span> <span class="nx">index</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">html</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="p">...</span>
        <span class="c1">// minify the html</span>
        <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">folderPath</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/index.html</span><span class="dl">'</span><span class="p">,</span> <span class="nx">minify</span><span class="p">(</span><span class="nx">html</span><span class="p">),</span>  <span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span>  <span class="p">{</span>
          <span class="p">...</span>
        <span class="p">});</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="special-thanks">Special thanks</h2>

<p>A very special thanks to the awesome people that have helped me with their reviews:</p>

<ul>
  <li>Laurant Duveau <a href="https://twitter.com/laurentduveau">@laurentduveau</a></li>
  <li>Dominic Elm <a href="https://twitter.com/elmd_">@elmd_</a></li>
  <li>Sam Vloeberghs <a href="https://twitter.com/samvloeberghs">@samvloeberghs</a></li>
  <li>Ana Cidre <a href="https://twitter.com/anacidre_">@AnaCidre_</a></li>
  <li>Ruben Vermeulen <a href="https://twitter.com/CrushTheButton">@CrushTheButton</a></li>
  <li>Klaas Cuvelier <a href="https://twitter.com/klaascuvelier">@klaascuvelier</a></li>
</ul>

<h2 id="sources">Sources</h2>

<p><a href="https://hackernoon.com/deploy-angular-universal-w-firebase-ad70ea2413a1">deploy angular universal with firebase</a></p>]]></content><author><name>brechtbilliet</name></author><category term="brechtbilliet" /><category term="Angular" /><summary type="html"><![CDATA[Learn how to use Server-side rendering to prerender our Angular application at build time.]]></summary></entry></feed>