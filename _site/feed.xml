<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-08-30T12:26:11+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Frontend software architect living in Belgium</title><subtitle></subtitle><entry><title type="html">Angular interview questions for catching senior talent</title><link href="http://localhost:4000/angular-interview-questions-for-seniors/" rel="alternate" type="text/html" title="Angular interview questions for catching senior talent" /><published>2022-08-12T00:00:00+02:00</published><updated>2022-08-12T00:00:00+02:00</updated><id>http://localhost:4000/angular-interview-questions-for-seniors</id><content type="html" xml:base="http://localhost:4000/angular-interview-questions-for-seniors/"><![CDATA[<p>Companies ask me to take care of technical interviews from time to time. Having done quite a lot of these interviews, 
I learned a lot from them. 
By helping out a lot of different clients, I also have been on the other side of the table more than a few times too.
This means I have learned some patterns on how to create a positive impression towards my interviewer, and I know how to estimate
the candidate as well.
I don’t like to ask for technical assessments because I value the time of the candidate, and I’d like to think of them as people, not programming machines.
That being said, I do understand technical assessments work for a certain people and companies, it just might be my gut and preference.
This blog article is the beginning of a set of many blog articles that will focus on interview questions.
Every article will contain 20 questions that we can ask as an interviewer + the kind of answer I would be looking for.
Bear in mind, there is no right answer, but I like to bring you in my chain of thought of how I reason in these kind of interviews.
This one is specific to Angular, another might be focussed on architecture, and another one maybe on javascript/typescript or testing and I’m pretty sure
RxJS will also get his own article.
Bear in mind that most of these questions can be hard for junior profiles. But then again, not all questions
have to be answered thoroughly.</p>

<p>I’m not a huge fan of asking a candidate questions like:</p>
<blockquote>Tell me all the different lifecycle hooks that Angular components offer us, and tell me 
in which order they are being executed.</blockquote>
<p>Questions like that could make our candidate uncomfortable and stressed out.
I also don’t like to ask:</p>
<blockquote>What's the difference between `markForCheck()` and `detectChanges()`?</blockquote>
<p>I’d love to hear it in a response of
another question I might ask but we shouldn’t focus on api specifics. Maybe sometimes I would ask for api specifics, but then it only means the candidate has answered
most of the other things and he or she is really doing a good job. And let’s be honest… Everyone can memorize api’s…</p>

<p>Why would we ask people if they could memorize all the api’s a framework has to offer? When we can try to understand how they think
and reason about problems and proper solutions? This is the reason we should focus on open questions that can be answered in many ways.
The more open our questions are as to the candidates, the more we learn from the piece of talent we are interviewing.
We only have limited time right?!</p>

<p>Our candidate can give us some nice twists like sidetracking on best-practices and bad-practices.
I love to hear long answers where the candidate can show his or her passion about Angular and the surrounding experience.</p>

<p>For every question I will try to explain on how I personally would answer the question and why, so basically what could make me happy as the hypothetical interviewer.
The concrete answers will not be found here, that is something you have to do on your own.</p>

<h3 id="1-name-all-the-ways-you-can-think-about-on-how-components-communicate-with-each-other-in-angular">1: Name all the ways you can think about on how components communicate with each other in Angular?</h3>

<p>This is a very simple question but can still be used to blow the mind of the interviewer. 
I would start that the easiest way for component communication would definitely be the use of <code class="language-plaintext highlighter-rouge">@Input()</code> and <code class="language-plaintext highlighter-rouge">@Output()</code> properties. 
I would mention that data flows from parent components towards child components through <code class="language-plaintext highlighter-rouge">@Input()</code> properties and we
pass that data into the component with the square brackets syntax <code class="language-plaintext highlighter-rouge">[foo]="bar"</code>. The child component can notify the parent components
through the famous <code class="language-plaintext highlighter-rouge">@Output()</code> properties and for that we use the square bracket syntax <code class="language-plaintext highlighter-rouge">(change)="onChange($event)"</code>.
Yes, yes this is also api specific, but let’s face it. If they don’t know that api they simply haven’t used Angular, and I have gotten
my share of candidates who were unable to answer that question.</p>

<p>I would maybe mention that for <code class="language-plaintext highlighter-rouge">@Output()</code> names we should never use <code class="language-plaintext highlighter-rouge">onChange</code> or <code class="language-plaintext highlighter-rouge">onClick</code> but we rather use <code class="language-plaintext highlighter-rouge">change</code> or <code class="language-plaintext highlighter-rouge">click</code>.
That is more consistent with the current api of Angular and it’s a known best practice.</p>

<p>I could talk about injecting parent components into child components through dependency injection in the constructor. 
I would focus even more on when I would do that and if it is a good idea in general.
I personally consider this to be a bad practice in a lot of cases as it breaks the unidirectional dataflow and makes it quite complex. 
That being said, I can give an example on where I inject a custom form component into an input-wrapper component to see if the form is submitted or not.</p>

<p>I can go on about ViewChildren where one could gain access to child components within parent components.
This also creates a form of communication. Maybe I step it up a notch and explain the difference between ViewChildren and ContentChildren.</p>

<p>Lastly I would talk about how to use services to communicate between different components and that in general I wouldn’t do that to communicate between
children and parents. I’d say that it might be a good idea to let siblings communicate with each other. Although in many cases we can use the parent component for that. 
When we want to communicate between a parent and a child, but there is a router-outlet in between it might be a good fit to use a service for that.</p>

<h4 id="bonus-question-can-you-name-a-bad-way-to-let-components-communicate-with-each-other-and-why">Bonus question: Can you name a bad way to let components communicate with each other and why?</h4>

<p>I would probably say we could use the window object to do that, but that it is not a good idea because we lose all the encapsulation and we should not communicate 
with the window object directly. It would create complexities, dependencies we don’t want and we are communicating outside of the framework.</p>

<p>We could also use redux or @ngrx/store to communicate between components. I would also consider this to be a bad practice since we are using a complex
framework for something very simple and we are creating a very hard dependency in every layer of our code. That being said, this is a personal opinion
and I’d love to hear the perspective of the candidate.</p>

<h3 id="2-how-would-you-structure-components-in-angular">2: How would you structure components in Angular?</h3>

<p>I would talk about smart and dumb components and what their responsibility is and how we keep them dumb components ignorant to the rest of the application but
that they still can have complex logic. I’d probably give an example that a month view of a calendar is stupid, but can be very complex.
I would say that splitting up into more and smaller components is beneficial for:</p>
<ul>
  <li>Control over change detection when using the <code class="language-plaintext highlighter-rouge">ChangeDetection.OnPush</code> strategy</li>
  <li>Testability</li>
  <li>Less observable subscriptions</li>
  <li>Single responsibility principle</li>
  <li>Separation of concerns</li>
  <li>Reusability</li>
</ul>

<p>I’d also keep a separate folder for smart and dumb components so they don’t get mixed up.</p>

<p>I could talk about when I would extract code from the component. I could talk about preference of inline templates 
or not and share the advantages and disadvantages for both ways. It’s important to show that that I am not biased and
that both solutions could work.</p>

<h4 id="bonus-question-tell-me-the-difference-between-pipes-and-components">Bonus question: Tell me the difference between pipes and components</h4>

<p>I don’t think this question should be answered here since it’s a very straightforward question.</p>

<h3 id="3-dependency-injection-services-lifecycle-of-services-and-use-cases-go">3: Dependency injection, services, lifecycle of services and use cases. go!</h3>

<p>With this question we can really show that we know exactly how Angular works in terms of dependency injection.
I could talk about services and how to make them injectable. I would say that we can provide services in modules and
that they would become singleton for the entire application. After that I’d say that we can also provide them in
lazy loaded modules (by using providedIn:’any’) which would result in singleton at that modules level. Then I could explain how we can also
provide them at any component and that the lifecycle would be shared with those components.
A nice addition there is to mention that if we provide them at component level we could also implement <code class="language-plaintext highlighter-rouge">ngOnDestroy()</code> lifecycle hooks
in the services. Some nice examples on services in components would be very welcome and I would probably say I could use it
to remove redundancy from 2 big fat smart components that share 80% of the same code.
It would be my moment to mention that I prefer composition over inheritance.</p>

<p>A nice addition would be explaining the <code class="language-plaintext highlighter-rouge">providedIn: 'root'</code> syntax in the <code class="language-plaintext highlighter-rouge">Injectable()</code> decorator and that this creates an
application wide singleton instance. It would also be worth mentioning that this improvement was there to make treeshaking possible.</p>

<p>This is a great moment to start about the standalone components that Angular 14 brings with it, and I could give my opinion
on Angular modules in general. By mentioning that Angular modules were introduced in angular2@rc5 I could prove my experience.</p>

<p>The reason why I am saying this is not to brag, it’s to show how deep you could go with this question.</p>

<h3 id="4-whats-the-difference-between-guards-and-interceptors">4: What’s the difference between guards and interceptors?</h3>

<p>I like this question because we ask 2 things at the same time. Guards and interceptors don’t have anything to do with each other
but they are important tools within the framework. After explaining what guards are I could come up with examples on either
when to use the <code class="language-plaintext highlighter-rouge">canActivate</code> guard but also explain the less often used <code class="language-plaintext highlighter-rouge">canDeactivate</code> guard. A nice example there would be when
the user has filled in a form and we don’t want to block him from navigating away.</p>

<p>I would explain that I don’t only use interceptors for adding jwt tokens but I could also use them for loading state, error handling and so much more.</p>

<h3 id="5-what-is-the-async-pipe">5: What is the <code class="language-plaintext highlighter-rouge">async</code> pipe?</h3>

<p>Not only could I say we could use the <code class="language-plaintext highlighter-rouge">async</code> to subscribe on observables, I could start talking about RxJS and that it is the only real dependency Angular has besides zone.js.
I would say that the async pipe, subscribes to the observable, also unsubscribes from the observable when the component gets destroyed and I would talk about
how it runs a <code class="language-plaintext highlighter-rouge">markForCheck()</code> as well.</p>

<p>I would say I consider using the <code class="language-plaintext highlighter-rouge">async</code> pipe as a best practice because it does a lot of management for us (subscribing, unsubscribing, mark for check).
Maybe I would even talk about the <code class="language-plaintext highlighter-rouge">*ngIf=foo$|async as foo</code> syntax where we can keep the value of the observable inside the template
and share it like that. I could mention that it can be dangerous if foo has a falsy value.</p>

<h3 id="6-tell-me-about-rxjs-in-angular-what-reactive-apis-are-there">6: Tell me about RxJS in Angular, what reactive api’s are there?</h3>

<p>This is a beauty because you can talk about so much here.
It might be a good idea to start talking about my passion in RxJS first and how I fell in love with it.
After that could talk about how the router is reactive and that we can subscribe to events.
The activated route gives us observable params, queryParams and so much more.
We could talk about Reactive forms and how the <code class="language-plaintext highlighter-rouge">valueChanges</code> property is observable.
ViewChildren and ContentChildren can also be observable.</p>

<p>I would also like to talk about the <code class="language-plaintext highlighter-rouge">HttpClient</code> returning observables instead of promises and that unsubscribing from
an observable that is performing an XHR call will result in an <code class="language-plaintext highlighter-rouge">xhr.abort()</code>  behind the scenes.</p>

<p>If I want to blow the interviewer his mind I’d mention that <code class="language-plaintext highlighter-rouge">@Output()</code> EventEmitters are also observables behind the scenes and that
you can replace the EventEmitters with any kind of observable</p>

<h3 id="7-give-me-an-easy-way-to-create-a-memory-leak-in-angular-and-how-to-fix-it-eg-setinterval">7: Give me an easy way to create a memory leak in Angular and how to fix it. Eg setInterval()</h3>

<p>If the candidate does not understand the question: You have to add a <code class="language-plaintext highlighter-rouge">setInterval(console.log)</code> statement somewhere in a piece of code 
that will be destroyed and we want to keep seeing numbers logged in the console.</p>

<p>This should help the candidate enough. What will get destroyed and reinstantiated? Components will.
So adding that piece of code in the constructor or <code class="language-plaintext highlighter-rouge">ngOnInit()</code> of a page that is a component and navigating away from that 
could do the trick. By clearing the interval on <code class="language-plaintext highlighter-rouge">ngOnDestroy()</code> we could clean up that memory leak.</p>

<p>I would start on how easy it is to create memory leaks with RxJS and that it’s important to always clean up subscriptions.
This might be a tough question but we could really peek into the reasoning of the attendee here.</p>

<h3 id="8-how-would-you-test-angular-applications">8: How would you test Angular applications?</h3>

<p>This question has a lot of different answers, and none of them are right or wrong. But it’s a great way to see how the
candidate feels about testing, where the priorities lie and how much experience they have with testing Angular applications.</p>

<p>I would first talk about the testing pyramid vs snowcone and how today I prefer something like the honeycomb principle:
A small amount of unit tests (only the real complex logic), a lot of integration tests for the components, a small amount of E2E tests 
to test the happy flows.
I would say something like I unittest the real logic in services and I don’t use TestBed but <code class="language-plaintext highlighter-rouge">jest</code> just like I would test
any javascript or typescript class or function. I’d back it up with complexity, performance and why I don’t like to be bound to a specific framework.
For components I use a combination of <code class="language-plaintext highlighter-rouge">cypress</code> and <code class="language-plaintext highlighter-rouge">storybook</code> as integration tests were we would create a storybook of the usecase
we would test and use <code class="language-plaintext highlighter-rouge">cypress</code> to do so.
I would also use <code class="language-plaintext highlighter-rouge">cypress</code> to tackle the E2E tests, but since these are slow and hard to maintain I wouldn’t write too much of them.</p>

<p>I would challenge the use of a huge amount of unit tests because they are very brittle (an extra dependency in the constructor breaks every test).
and if we break a <code class="language-plaintext highlighter-rouge">cypress</code> <code class="language-plaintext highlighter-rouge">storybook</code> integration test chances are quite big that we actually broke something.</p>

<h3 id="9-explain-to-me-how-change-detection-works-in-angular">9: Explain to me how change detection works in Angular</h3>

<p>Here I could talk about <code class="language-plaintext highlighter-rouge">zone.js</code> monkey patches all the native browser events and that Angular uses it to get notified when something happens.
I could talk about how Angular takes the component hierarchy and by default evaluates all the components from top to bottom.
I could say that this isn’t the most performant thing to do and could explain how the <code class="language-plaintext highlighter-rouge">ChangeDetection.OnPush</code> strategy helps us with that.
When talking about that strategy we could explain the <code class="language-plaintext highlighter-rouge">markForCheck</code> thingy and the difference between <code class="language-plaintext highlighter-rouge">ChangeDetectorRef.markForCheck()</code> 
and <code class="language-plaintext highlighter-rouge">ChangeDetectorRef.detectChanges()</code>. We could also explain that we need immutable data flows to make this work and that it does not make sense
to use the <code class="language-plaintext highlighter-rouge">ChangeDetection.Onpush</code> strategy on components that don’t have any inputs.</p>

<p>I would sidetrack on the advantages of immutable data structures and that its predictability is of more use than the performance gain.</p>

<p>It might also be worth noting that the <code class="language-plaintext highlighter-rouge">async</code> pipe also triggers a <code class="language-plaintext highlighter-rouge">markForCheck</code>, but we already said that didn’t we?.</p>

<h4 id="bonus-question-what-happens-if-you-apply-the-changedetectiononpush-strategy-on-your-app-component">Bonus question: What happens if you apply the <code class="language-plaintext highlighter-rouge">ChangeDetection.OnPush</code> strategy on your app component?</h4>

<p>I could explain here that it’s not a good idea to do that because it will basically break your change detection and you have to manually
run <code class="language-plaintext highlighter-rouge">markForCheck()</code>  for everything. A nice example could be this one:
When we do an <code class="language-plaintext highlighter-rouge">httpClient.get('url').subscribe(result =&gt; this.result = result)</code> in our code. Our application will never update because it isn’t marked for check.
Also the change detection deep within your component hierarchy could be broken. Another thing is that our app component doesn’t have any <code class="language-plaintext highlighter-rouge">@Input()</code> properties so it is useless anyway.</p>

<h3 id="10-what-is-the-expression-has-changed-after-it-was-checked-error">10: What is the Expression has changed after it was checked error?</h3>

<p>I would start to laugh about the fact that this bug has bitten me in the butt more than once and explain when and how much it has occurred.
I would say that the change detection ran twice in development and that both results are compared.
If the results that are used in the template don’t match it means something has changed in between proving that there is something wrong with our “clean” dataflow.</p>

<p>I could also explain why this isn’t run in production and that even the bug is harmless, it does shed some light on problems.</p>

<h3 id="11-how-can-you-tackle-redundancy-in-angular">11: How can you tackle redundancy in Angular?</h3>

<p>Very open question, if you are a senior profile you could talk for tens of minutes but I will wrap it up quite shortly here:</p>

<ul>
  <li>We can extract logic into reusable components</li>
  <li>We can extract logic into reusable directives</li>
  <li>We can extract logic into reusable pipes</li>
  <li>we can extract logic into reusable functions that we expose in javascript modules (better treeshaking)</li>
  <li>We can extract logic in services</li>
</ul>

<h3 id="12-what-is-trackby-and-how-does-it-work">12: What is trackBy and how does it work?</h3>

<p>This question proves a level of seniority of the candidate within the framework.
I would explain that every <code class="language-plaintext highlighter-rouge">*ngFor</code> statement could benefit from that and how the performance is optimised.
Especially with big lists this property can have a huge impact.</p>

<h3 id="13-tell-me-about-angular-cli">13: Tell me about Angular CLI.</h3>

<p>Here I can talk about code generation, about webpack. Maybe if I really want to make an impression I can talk about
why you think they chose for <code class="language-plaintext highlighter-rouge">webpack</code> and not <code class="language-plaintext highlighter-rouge">rollup</code>. Maybe mention why I think it wouldn’t work with <code class="language-plaintext highlighter-rouge">vite</code> now.
I could talk about schematics and that there is a thing called Nx that takes the Angular CLI to the next level. 
I could talk about updating to new versions. I could talk about ng-packagr and how I would create a public Angular package.
I would talk about the CLI sets up webpack configs, unit test configurations, prettier config, linting config files etc.</p>

<h3 id="14-how-do-you-consume-params-from-an-activatedroute-and-do-you-see-complexities-there">14: How do you consume params from an ActivatedRoute and do you see complexities there?</h3>

<p>Here I could say is that injecting the <code class="language-plaintext highlighter-rouge">ActivatedRoute</code> gives us observables of params but also snapshots if we want.
I could say that it only has access to its own params, and not to the params of its parent router-outlets.
Unless we set the <code class="language-plaintext highlighter-rouge">paramsInheritanceStrategy</code> of the routerconfig to <code class="language-plaintext highlighter-rouge">always</code> that is.</p>

<p>I would share frustrations that it is complex to access params from child router outlets and that it should also be available
because they are available in the url, but that I believe they have developed it like that to support auxiliary routes.</p>

<p>I would use this question to talk about how I love nesting router-outlets and using them to display dialogs so that Angular
takes care of the lifecycle for me.</p>

<p>One last thing to mention here is that when a param changes, the component is not being destroyed and reinstantiated.</p>

<h3 id="15-name-your-3-favourite-angular-characteristics">15: Name your 3 favourite Angular characteristics</h3>

<p>This question speaks for itself. You can verify experience, reasoning, passion and the ability to challenge technical decisions
by listening to the candidate talk.</p>

<p>My personal favorite is the integration with RxJS, the fact that it is opinionated and I think it is suited for huge projects.</p>

<h3 id="16-name-your-3-biggest-angular-frustrations">16: Name your 3 biggest Angular frustrations</h3>

<p>This question also speaks for itself. You can verify experience, reasoning, passion and the ability to challenge technical decisions
by listening to the candidate.</p>

<p>My biggest frustration is its bundle size, the build time and the ReactiveForms.
I would continue on the fact that it is nice that Angular 14 gives us typed forms but that I see a lot of improvements there.</p>

<h3 id="17-explain-how-you-would-do-content-projection-in-angular">17: Explain how you would do content projection in Angular</h3>

<p>I could start out by the fact that you can have an <code class="language-plaintext highlighter-rouge">&lt;ng-content&gt;</code> slot and whatever I put between the tags of my components would be rendered there.
I could also mention that you can have multiple slots that I could name. And that all these slots can be referenced in the component
by using <code class="language-plaintext highlighter-rouge">@ContentChildren()</code>. After that I would probably start giving examples on where to use multiple slots like dialogs that have
both a title and a body section.</p>

<p>After that I could also explain that there is a thingy called <code class="language-plaintext highlighter-rouge">ngTemplateOutlet</code> but to be quite honest, that kind of stuff is the
stuff I have to look up every time I need it. That being said, mentioning the existence of it is way more important then
knowing the api by heart.</p>

<p>I could even say it is possible to render content from the right view into the left view by using services to pass template references, 
but now I’m just trying to be smart even though it is possible.</p>

<h3 id="18-tell-me-something-about-selector-prefixes">18: Tell me something about selector prefixes.</h3>

<p>Again a question where you can validate the experience and reasoning.</p>
<ul>
  <li>I’d say every component selector has a prefix, but selectors aren’t even mandatory so prefixes aren’t either.</li>
  <li>We pass these prefixes so they are unique and it’s easier to see where they live.</li>
  <li>We use linting rules to validate if the prefixes are used correctly</li>
  <li>Both components and directives can have prefixes.</li>
  <li>It’s a bad practice not to have prefixes.</li>
  <li>Prefixes are both stored in the <code class="language-plaintext highlighter-rouge">project.json</code> (for Nx) and <code class="language-plaintext highlighter-rouge">angular.json</code> (for Angular CLI) file for schematic generation of components and directives, and they are also
defined in the linting config files</li>
</ul>

<p>This question is different then the other ones, here the candidate can just make a list of all the things he or she knows about a 
simple subject.</p>

<h3 id="19-what-version-upgrades-of-angular-were-really-exciting-for-you-and-why">19: What version upgrades of Angular were really exciting for you and why?</h3>

<p>This is a very easy question to check on seniority or if the candidate is up to date with the newest version.</p>

<p>At the time of writing I would talk about standalone components and typed forms in Angular 14.
That is was pretty weird that there was no Angular 3 but that I understand why.</p>

<p>I would go on that I was pretty frustrated that angular2@rc5 had modules when angular2@rc4 had not…
And that I had to rewrite my Angular fundamentals workshop just before my public workshops were planned.</p>

<p>I would go on that the upgrade path had gotten easier and that updating to Angular 6 was a pain in the butt for me.</p>

<p>I’d probably also be a bit more negative about Ivy because at ngVikings they showed a hello world of a few kilobytes
but that never seemed to become reality.</p>

<p>You see the question here shouldn’t be about remembering versions, it should trigger the candidate to talk about his or
hers experience with Angular and which updates were important.</p>

<h3 id="20-who-do-you-follow-which-blogs-do-you-read-what-do-you-do-to-keep-up-to-date-with-angular">20: Who do you follow? Which blogs do you read? What do you do to keep up to date with Angular?</h3>

<p>This is one of my favorites. One could talk about pluralsight or egghead trainings.
They could mention Angular core team members, or interesting pull requests.
They could talk about conferences or at least a talk they were interested in.
They can talk about books, interesting talks with colleagues and so on.
They can talk about pet projects and stuff they are doing in their own time.</p>

<p>This is a great question: not to test seniority, but to test passion and motivation in the framework.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Keep the questions limited, keep them short and expect long answers. You might be surprised how smart our candidate is.
Every body can learn a framework, but not all of us can learn to reason. And syntax is easily forgotten of it has been a few months or
even weeks until we have used it in practice. Hope you enjoyed the article!</p>

<p>Special thanks to the awesome reviewers:</p>
<ul>
  <li><a href="https://twitter.com/tim_deschryver">Tim Deschryver</a></li>
  <li><a href="https://twitter.com/SantoshYadavDev">Santosh Yadav</a></li>
  <li><a href="https://twitter.com/GregOnNet">Gregor Woiwode</a></li>
  <li><a href="https://twitter.com/tomeustace">Tom Eustace</a></li>
  <li><a href="https://twitter.com/webdave_de">Webdave</a></li>
</ul>]]></content><author><name>brechtbilliet</name></author><summary type="html"><![CDATA[Companies ask me to take care of technical interviews from time to time. Having done quite a lot of these interviews, I learned a lot from them. By helping out a lot of different clients, I also have been on the other side of the table more than a few times too. This means I have learned some patterns on how to create a positive impression towards my interviewer, and I know how to estimate the candidate as well. I don’t like to ask for technical assessments because I value the time of the candidate, and I’d like to think of them as people, not programming machines. That being said, I do understand technical assessments work for a certain people and companies, it just might be my gut and preference. This blog article is the beginning of a set of many blog articles that will focus on interview questions. Every article will contain 20 questions that we can ask as an interviewer + the kind of answer I would be looking for. Bear in mind, there is no right answer, but I like to bring you in my chain of thought of how I reason in these kind of interviews. This one is specific to Angular, another might be focussed on architecture, and another one maybe on javascript/typescript or testing and I’m pretty sure RxJS will also get his own article. Bear in mind that most of these questions can be hard for junior profiles. But then again, not all questions have to be answered thoroughly.]]></summary></entry><entry><title type="html">Why and how I created a SPA router for Qwik</title><link href="http://localhost:4000/why-and-how-i-created-a-spa-router-for-qwik/" rel="alternate" type="text/html" title="Why and how I created a SPA router for Qwik" /><published>2022-08-03T00:00:00+02:00</published><updated>2022-08-03T00:00:00+02:00</updated><id>http://localhost:4000/why-and-how-i-created-a-spa-router-for-qwik</id><content type="html" xml:base="http://localhost:4000/why-and-how-i-created-a-spa-router-for-qwik/"><![CDATA[<h2 id="the-why">The why</h2>

<p>The people from <a href="https://builder.io">builder.io</a> have done an awesome job writing <a href="https://qwik.builder.io/">Qwik</a>, and their arsenal of other great tools.
I started playing with Qwik some time ago and decided to rewrite my website <a href="https://brecht.io">brecht.io</a> in it. 
(I’m also planning to use Qwik in more complex apps, but I wanted to see my website in production first.)
When I started reworking my website, there wasn’t a tool that took care of in-page SPA (single page application) routing — or at least not how I’m used to it from other client-side technologies.
I’m used to working with SPA routing in <a href="https://angularjs.org/">AngularJS</a>, <a href="https://angular.io">Angular</a>, and <a href="https://reactjs.org/">React</a>, so I wanted to explore their routing principles in Qwik applications.</p>

<p>There is this thing, called Qwik-city, which is crazy fast and offers MPA (multiple page application) routing.
At the time of writing, Qwik had no full-fledged client-side router that offered SPA routing.
Great news for me, the nerd that I am, so I decided to dive deeper and write a custom SPA router for Qwik. It has been an interesting journey
that made me appreciate Qwik even better and helped me “think in” Qwik.</p>

<p>Now, before I continue, let’s align on the differences between MPA-routing and SPA-routing. 
In short: In MPA-routing, the page does a full page refresh on every navigation.
SPA-routing uses the <code class="language-plaintext highlighter-rouge">history</code> property of the <code class="language-plaintext highlighter-rouge">window</code> object to manage routing state. So for SPA-routing, the page does not refresh completely and the goal
is to only re-render parts of the page. When we look back at older technologies, SPA-routing used to be way faster, but with Qwik-city
the difference in performance might be trivial.</p>

<h3 id="now-why-am-i-writing-this">Now why am I writing this?</h3>

<p>Well, because… it’s a cool exercise… I learned a lot, I hit walls I didn’t expect to hit, and it helped me understand pain points I experienced with routers in other frameworks.
But that’s not enough, right? No, that is not my only driving factor for demystifying SPA-routing in Qwik.
I believe SPA routers do have quite a few benefits. I believe in Qwik, and I think it would be even more awesome to see it work with SPA-routing.</p>

<h4 id="state">State</h4>

<p>One of the advantages of a SPA-router is that we don’t lose application state… 
Since the instance of our application is only created once and kept alive, we can keep the state alive in our application.
We can not only share state between components, but also between pages. 
Some users like their sidebar collapsed, others don’t. It’s kind of annoying when you collapse a sidebar, then navigate to another page
where the sidebar jumps open again because state is not shared.</p>

<h4 id="the-power-of-routing-state">The power of routing state</h4>

<p>I’m a big fan of putting state (params and searchParams) in routes. Not all state belongs there, but keeping state in routes gives us some benefits:</p>

<ul>
  <li>We can bookmark a page without losing that state.</li>
  <li>We can copy/paste URLs to share them with other people without losing that state that is kept in that route.</li>
  <li>It’s free to manage, no need for complex frameworks, no complexity regarding state invalidation, etc. <!-- This may be true at first, but the Navigation History proposal summarizes some cases where it stops being true: https://github.com/WICG/navigation-api/blob/main/README.md#summary --></li>
  <li>We can use the browser navigation buttons to go back to previous and next states.</li>
</ul>

<p>Do note: When using MPA-routing we can also put the state in the url, but the more state that would change in the url, the more page refreshes we would have
which would result in less usability.</p>

<h4 id="usability">Usability</h4>

<p>Having pages refresh on every route change can cause certain discomforts to the usability of our application.</p>

<ul>
  <li>Cursor position being forgotten on refresh.</li>
  <li>Selected text getting unselected on refresh.</li>
  <li>A video call that is being held or even a movie we are watching would be closed on refresh</li>
  <li>Background sound being interrupted on refresh.</li>
  <li>Open dialogs, snackbars, banners and success messages are hard to show/keep alive on full refresh. 
Eg: Sending the contents of a form in page A, and navigating to page B on success. How and when would you show a success message? 
MPA frameworks often call this “flash” messaging, but it’s easier to manage in a SPA.</li>
</ul>

<h4 id="performance">Performance</h4>

<ul>
  <li>We only want to load stuff we need, that’s the entire idea behind Qwik. Does it makes sense to reload the same DOM when we already have it?</li>
  <li>Does it make sense to re-render part of the DOM that is already rendered? E.g the menu.</li>
  <li>Qwik has lazy-loading right out of the box! It just works and it works awesome! Why not use it for routing, too?</li>
</ul>

<h4 id="architecture">Architecture</h4>

<p>A router outlet is basically a component that will render a page in some kind of placeholder: the DOM of the entire page stays the same, but
what’s inside the router outlet gets updated. Router outlets can be quite powerful, especially if you can nest them like we can with the Angular router.
The routing system I wrote does not support multiple nested router outlets yet, but when we have multiple router outlets we can use them to 
optimise our architecture. We could attach a dialog to a route so we can close that dialog by clicking the native browser Back button.
We don’t have to keep state of that dialog, we just use the router outlet to render a component and destroy it when it needs to be destroyed.</p>

<h4 id="eventing">Eventing</h4>

<p>When we have SPA-routing, it’s nice to be notified when something in the URL changes.
Let’s pretend we are in a user management page with search functionality, and we want to make the search query bookmarkable. 
In that case when the user types ‘Brecht’ we want the URL to change to <code class="language-plaintext highlighter-rouge">/users/search?q=Brecht</code> so we can bookmark it.
We don’t want to refresh the entire page every time the user types a character, right? That would result in cursor issues with the search input. Think about debouncing as well…
We want to get notified when that specific <code class="language-plaintext highlighter-rouge">q</code> parameter changes. When it does, we perform an XHR call, and on success we rerender part of the page
with the results. You know what’s even more awesome? If we do have a full refresh of the page, we get the exact same result rendered on
the server, because that’s how awesome Qwik is.</p>

<h2 id="writing-a-spa-router-for-qwik">Writing a SPA-router for Qwik</h2>

<p>This version of the router is very early stage and could use polishing, but the principles are there. So let’s go through the code together.</p>

<h3 id="the-config">The config</h3>

<p>This is where it all starts, we need to create a config file that maps paths to components. A path can contain params.
Like Angular and Nest, we can use the <code class="language-plaintext highlighter-rouge">:</code> syntax to define params.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// routing/routing-types.ts</span>
<span class="k">export</span> <span class="kd">type</span> <span class="nx">RoutingConfigItem</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">component</span><span class="p">:</span> <span class="kr">any</span><span class="p">;</span>
    <span class="nl">path</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">export</span> <span class="kd">type</span> <span class="nx">RoutingConfig</span> <span class="o">=</span> <span class="nx">RoutingConfigItem</span><span class="p">[];</span>
</code></pre></div></div>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// routing-config.tsx</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">routingConfig</span><span class="p">:</span><span class="nx">RoutingConfig</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
        <span class="na">component</span><span class="p">:</span> <span class="o">&lt;</span><span class="nx">Home</span><span class="o">/&gt;</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">users</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">component</span><span class="p">:</span> <span class="o">&lt;</span><span class="nx">Users</span><span class="o">/&gt;</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">users/:id</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">component</span><span class="p">:</span> <span class="o">&lt;</span><span class="nx">UserDetail</span><span class="o">/&gt;</span>
    <span class="p">}</span>
  
<span class="p">]</span>

</code></pre></div></div>
<p>The base path <code class="language-plaintext highlighter-rouge">/</code> will resolve in the home page, the <code class="language-plaintext highlighter-rouge">users</code> path to the <code class="language-plaintext highlighter-rouge">&lt;Users/&gt;</code> component, and the <code class="language-plaintext highlighter-rouge">users/:id</code> to the <code class="language-plaintext highlighter-rouge">&lt;UserDetail/&gt;</code> component.</p>

<h3 id="the-state">The state</h3>

<p>Qwik provides us with a state mechanism. We want to reflect the state in the URL to Qwik’s state.
First we need to access the URL on the server, then pass it to the <code class="language-plaintext highlighter-rouge">render</code> function.
Then we need to pass it to the <code class="language-plaintext highlighter-rouge">&lt;Root/&gt;</code> component, which passes it along to the <code class="language-plaintext highlighter-rouge">&lt;App/&gt;</code> component.
That <code class="language-plaintext highlighter-rouge">&lt;App/&gt;</code> component will initialize the router with the URL.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// entry.dev.tsx</span>
<span class="p">...</span>
<span class="nx">render</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="o">&lt;</span><span class="nx">Root</span> <span class="nx">url</span><span class="o">=</span><span class="p">{</span><span class="dl">''</span><span class="p">}</span><span class="sr">/&gt;</span><span class="se">)</span><span class="err">;
</span></code></pre></div></div>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// entry.ssr.tsx</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">render</span><span class="p">(</span><span class="nx">opts</span><span class="p">:</span> <span class="nx">RenderOptions</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">renderToString</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Root</span> <span class="nx">url</span><span class="o">=</span><span class="p">{</span><span class="nx">opts</span><span class="p">.</span><span class="nx">url</span> <span class="k">as</span> <span class="kr">string</span> <span class="o">||</span> <span class="dl">''</span><span class="p">}</span> <span class="sr">/&gt;, </span><span class="err">{
</span>    <span class="nx">manifest</span><span class="p">,</span>
    <span class="p">...</span><span class="nx">opts</span><span class="p">,</span>
  <span class="p">});</span>
<span class="p">}</span>

</code></pre></div></div>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// root.tsx</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">(</span><span class="nx">opts</span><span class="p">:</span> <span class="p">{</span> <span class="nl">url</span><span class="p">:</span> <span class="kr">string</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span> 
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
      <span class="p">...</span>
      <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">App</span> <span class="nx">url</span><span class="o">=</span><span class="p">{</span><span class="nx">opts</span><span class="p">.</span><span class="nx">url</span><span class="p">}</span><span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/body</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/html</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p>So, what we just did here is ensure that the <code class="language-plaintext highlighter-rouge">&lt;App/&gt;</code> component gets the URL passed to it in all cases. That’s all!
Now let’s set up the state.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// routing/routing-state.ts</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">createContext</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@builder.io/qwik</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kr">interface</span> <span class="nx">RoutingState</span> <span class="p">{</span>
    <span class="c1">// we don't want to store `new URL()` because it is not serializable    </span>
    <span class="nl">url</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span> 
    <span class="nl">segments</span><span class="p">:</span> <span class="kr">string</span><span class="p">[];</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">ROUTING</span> <span class="o">=</span> <span class="nx">createContext</span><span class="o">&lt;</span><span class="nx">RoutingState</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">'</span><span class="s1">Routing</span><span class="dl">'</span><span class="p">);</span>

</code></pre></div></div>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// routing/routing.ts</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">ROUTING</span><span class="p">,</span> <span class="nx">RoutingState</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./routing-state</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">useContextProvider</span><span class="p">,</span> <span class="nx">useStore</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@builder.io/qwik</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">// this one will be called by the &lt;App/&gt; component and initialize </span>
<span class="c1">// the state once for the entire lifecycle of the application</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">initializeRouter</span><span class="p">(</span><span class="nx">url</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nx">RoutingState</span> <span class="p">{</span>
    <span class="c1">// create a store and state</span>
    <span class="kd">const</span> <span class="nx">routingState</span> <span class="o">=</span> <span class="nx">useStore</span><span class="o">&lt;</span><span class="nx">RoutingState</span><span class="o">&gt;</span><span class="p">(</span>
        <span class="nx">getRoutingStateByPath</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
    <span class="p">);</span>

    <span class="nx">useContextProvider</span><span class="p">(</span><span class="nx">ROUTING</span><span class="p">,</span> <span class="nx">routingState</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">routingState</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// this will retrieve the routingstate by the path (the current url)</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">getRoutingStateByPath</span><span class="p">(</span><span class="nx">path</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nx">RoutingState</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nx">path</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">segments</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">pathname</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">segments</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// remove empty segment </span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="na">url</span><span class="p">:</span> <span class="nx">path</span><span class="p">,</span>
        <span class="nx">segments</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The first part of the state is done, we just have to initialize the router in the <code class="language-plaintext highlighter-rouge">&lt;App/&gt;</code> component.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// containers/app/app.tsx</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="nx">component$</span><span class="p">((</span><span class="nx">opts</span><span class="p">:</span> <span class="p">{</span> <span class="nl">url</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="kc">undefined</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">initializeRouter</span><span class="p">(</span><span class="nx">opts</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
    <span class="p">...</span>
<span class="p">});</span>
</code></pre></div></div>

<p>All good! Now we want to actually set the router state when the route changes. There are 2 scenarios:</p>
<ul>
  <li>The user clicks on a link and wants to navigate towards a page in our app: <code class="language-plaintext highlighter-rouge">navigateTo()</code></li>
  <li>The browser navigation buttons are being used, and we want to listen to those events: <code class="language-plaintext highlighter-rouge">listenToRouteChanges()</code></li>
</ul>

<p>This is functionality we only want to run in the browser, not on the server.
We use <code class="language-plaintext highlighter-rouge">isServer</code> here, but we could also use <code class="language-plaintext highlighter-rouge">isBrowser</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// routing/routing.ts</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">isServer</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@builder.io/qwik/build</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">// safely get the window object</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">getWindow</span><span class="p">():</span> <span class="nx">Window</span> <span class="o">|</span> <span class="kc">undefined</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isServer</span><span class="p">)</span> <span class="p">{</span>
       <span class="k">return</span> <span class="k">typeof</span> <span class="nb">window</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span> <span class="p">?</span> <span class="nb">window</span> <span class="p">:</span> <span class="kc">undefined</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">navigateTo</span><span class="p">(</span><span class="nx">path</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">routingState</span><span class="p">:</span> <span class="nx">RoutingState</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isServer</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// we don't actually navigate, but push a new state to</span>
        <span class="c1">// the history object</span>
        <span class="nx">getWindow</span><span class="p">()?.</span><span class="nx">history</span><span class="p">?.</span><span class="nx">pushState</span><span class="p">({</span><span class="na">page</span><span class="p">:</span> <span class="nx">path</span><span class="p">},</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">path</span><span class="p">);</span>
        <span class="nx">setRoutingState</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">routingState</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">listenToRouteChanges</span><span class="p">(</span><span class="nx">routingState</span><span class="p">:</span> <span class="nx">RoutingState</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isServer</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// when the navigation buttons are being used</span>
        <span class="c1">// we want to set the routing state</span>
        <span class="nx">getWindow</span><span class="p">()?.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">popstate</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">page</span><span class="p">;</span>
            <span class="nx">setRoutingState</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">routingState</span><span class="p">);</span>
        <span class="p">})</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">setRoutingState</span><span class="p">(</span><span class="nx">path</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">routingState</span><span class="p">:</span> <span class="nx">RoutingState</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">oldUrl</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nx">routingState</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">newUrl</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">oldUrl</span><span class="p">);</span>
    <span class="kd">const</span> <span class="p">{</span><span class="nx">segments</span><span class="p">,</span> <span class="nx">url</span><span class="p">}</span> <span class="o">=</span> <span class="nx">getRoutingStateByPath</span><span class="p">(</span><span class="nx">newUrl</span><span class="p">.</span><span class="nx">toString</span><span class="p">())</span>
    <span class="nx">routingState</span><span class="p">.</span><span class="nx">segments</span> <span class="o">=</span> <span class="nx">segments</span><span class="p">;</span>
    <span class="nx">routingState</span><span class="p">.</span><span class="nx">url</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="the-router-outlet">The router outlet</h3>

<p>We have a configuration object, we provided router state, we can get that router state, and we can listen to changes that will automatically set the router state.
Besides that we also have a <code class="language-plaintext highlighter-rouge">navigateTo()</code> function that will update the <code class="language-plaintext highlighter-rouge">history</code> object instead of reloading the page.
Now we want to render the right components for the right path inside a router outlet.</p>

<p>Our app component looks like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// containers/app/app.tsx</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="nx">component$</span><span class="p">((</span><span class="nx">opts</span><span class="p">:</span> <span class="p">{</span> <span class="nl">url</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="kc">undefined</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">routingState</span> <span class="o">=</span> <span class="nx">initializeRouter</span><span class="p">(</span><span class="nx">opts</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
            <span class="p">...</span> <span class="nx">here</span> <span class="nx">comes</span> <span class="nx">the</span> <span class="nx">menu</span>
            <span class="o">&lt;</span><span class="nx">RouterOutlet</span><span class="o">/&gt;</span>
        <span class="o">&lt;</span><span class="sr">/section</span><span class="err">&gt;
</span>    <span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Now let’s create our <code class="language-plaintext highlighter-rouge">&lt;RouterOutlet/&gt;</code> component. We have the segments of the URL, and the routing config that we can map to a component.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// routing/router-outlet.tsx</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">component$</span><span class="p">,</span> <span class="nx">useContext</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@builder.io/qwik</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">ROUTING</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./routing-state</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">getMatchingConfig</span><span class="p">,}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./routing</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">routingConfig</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../routing-config</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">RouterOutlet</span> <span class="o">=</span> <span class="nx">component$</span><span class="p">(</span>
    <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">routingState</span> <span class="o">=</span> <span class="nx">useContext</span><span class="p">(</span><span class="nx">ROUTING</span><span class="p">);</span>
        <span class="c1">// render the correct component</span>
        <span class="k">return</span> <span class="nx">getMatchingConfig</span><span class="p">(</span><span class="nx">routingState</span><span class="p">.</span><span class="nx">segments</span><span class="p">,</span> <span class="nx">routingConfig</span><span class="p">)?.</span><span class="nx">component</span>
    <span class="p">}</span>
<span class="p">);</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">getMatchingConfig()</code> function will translate the segments and config into the actual component that we want to render.
This requires some logic so that it matches not only the right component, but also takes the params into account.
Remember this piece of config?</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="nl">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">users/:id</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">component</span><span class="p">:</span> <span class="o">&lt;</span><span class="nx">UserDetail</span><span class="o">/&gt;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Let’s not dive too deeply into the following code, just know that it does the translation for us:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// routing/routing.ts</span>
<span class="p">...</span>
<span class="c1">// go over all the RoutingConfigItem objects and if they match return the config</span>
<span class="c1">// so we know which compnent to render</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">getMatchingConfig</span><span class="p">(</span><span class="nx">segments</span><span class="p">:</span> <span class="kr">string</span><span class="p">[],</span> <span class="nx">config</span><span class="p">:</span> <span class="nx">RoutingConfig</span><span class="p">):</span> <span class="nx">RoutingConfigItem</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">found</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">segmentsMatch</span><span class="p">(</span><span class="nx">segments</span><span class="p">,</span> <span class="nx">item</span><span class="p">))</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">found</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">found</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">segmentsMatch</span><span class="p">(</span><span class="nx">pathSegments</span><span class="p">:</span> <span class="kr">string</span><span class="p">[],</span> <span class="nx">configItem</span><span class="p">:</span> <span class="nx">RoutingConfigItem</span><span class="p">):</span> <span class="nx">boolean</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">configItemSegments</span> <span class="o">=</span> <span class="nx">configItem</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">configItemSegments</span><span class="p">.</span><span class="nx">length</span> <span class="o">!==</span> <span class="nx">pathSegments</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kd">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">pathSegments</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">segment</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">segment</span> <span class="o">===</span> <span class="nx">configItemSegments</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> <span class="o">||</span> <span class="nx">configItemSegments</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">indexOf</span><span class="p">(</span><span class="dl">'</span><span class="s1">:</span><span class="dl">'</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="nx">matches</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="nx">pathSegments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now the application should work. It should render the right component on the right URL, but we are still not there yet.
Remember the <code class="language-plaintext highlighter-rouge">listenToRouteChanges()</code> function? We still need to call it. We can call that in the <code class="language-plaintext highlighter-rouge">&lt;RouterOutlet/&gt;</code> component,
but we have to make sure we only run it on the client: the <code class="language-plaintext highlighter-rouge">window</code> object does not exist on the server.
For that, Qwik provides us with the <code class="language-plaintext highlighter-rouge">useClientEffect$</code> function. The router outlet now looks like this.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">component$</span><span class="p">,</span> <span class="nx">useClientEffect$</span><span class="p">,</span> <span class="nx">useContext</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@builder.io/qwik</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">ROUTING</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./routing-state</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">getMatchingConfig</span><span class="p">,</span> <span class="nx">listenToRouteChanges</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./routing</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">routingConfig</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../routing-config</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">RouterOutlet</span> <span class="o">=</span> <span class="nx">component$</span><span class="p">(</span>
    <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">routingState</span> <span class="o">=</span> <span class="nx">useContext</span><span class="p">(</span><span class="nx">ROUTING</span><span class="p">);</span>
        <span class="nx">useClientEffect$</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">listenToRouteChanges</span><span class="p">(</span><span class="nx">routingState</span><span class="p">);</span>
        <span class="p">});</span>
        <span class="k">return</span> <span class="nx">getMatchingConfig</span><span class="p">(</span><span class="nx">routingState</span><span class="p">.</span><span class="nx">segments</span><span class="p">,</span> <span class="nx">routingConfig</span><span class="p">)?.</span><span class="nx">component</span>
    <span class="p">}</span>
<span class="p">);</span>

</code></pre></div></div>

<h3 id="the-link-component">The link component</h3>

<p>The traditional anchor tag <code class="language-plaintext highlighter-rouge">&lt;a&gt;</code> will completely refresh the page, which is not what we want. 
Instead, we want the <code class="language-plaintext highlighter-rouge">navigateTo()</code> function we wrote. Let’s create a <code class="language-plaintext highlighter-rouge">&lt;Link/&gt;</code> component
that renders an anchor tag, but prevents the default functionality and calls the <code class="language-plaintext highlighter-rouge">navigateTo()</code> function when the user
clicks. We use the <code class="language-plaintext highlighter-rouge">preventdefault:click</code> syntax to make sure that the actual navigation is blocked, but we still need
a <code class="language-plaintext highlighter-rouge">href</code> property for good SEO.
Then, within the <code class="language-plaintext highlighter-rouge">&lt;a&gt;</code> tag we use a <code class="language-plaintext highlighter-rouge">&lt;Slot/&gt;</code> for content projection.
The <code class="language-plaintext highlighter-rouge">navigateTo()</code> requires the <code class="language-plaintext highlighter-rouge">routingState</code>, so we import <code class="language-plaintext highlighter-rouge">useContext</code> from Qwik to retrieve that state.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// routing/link.tsx</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">component$</span><span class="p">,</span> <span class="nx">Slot</span><span class="p">,</span> <span class="nx">useContext</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@builder.io/qwik</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">navigateTo</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./routing</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">Link</span> <span class="o">=</span> <span class="nx">component$</span><span class="p">((</span><span class="nx">opts</span><span class="p">:</span> <span class="p">{</span> <span class="nl">path</span><span class="p">:</span> <span class="kr">string</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">routingState</span> <span class="o">=</span> <span class="nx">useContext</span><span class="p">(</span><span class="nx">ROUTING</span><span class="p">);</span>
    <span class="kd">const</span> <span class="p">{</span><span class="nx">path</span><span class="p">}</span> <span class="o">=</span> <span class="nx">opts</span><span class="p">;</span>
    <span class="c1">// check whether the link should be active or not</span>
    <span class="kd">const</span> <span class="nx">isActive</span> <span class="o">=</span> <span class="s2">`/</span><span class="p">${</span><span class="nx">routingState</span><span class="p">.</span><span class="nx">segments</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">)}</span><span class="s2">`</span> <span class="o">===</span> <span class="nx">path</span><span class="p">;</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">a</span>
            <span class="c1">// This will prevent the default behavior of the "click" event.</span>
            <span class="na">preventdefault</span><span class="p">:</span><span class="nx">click</span> 
            <span class="c1">// set the correct class when the link is active</span>
            <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">isActive</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">link--active</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">''</span><span class="p">}</span>
            <span class="nx">href</span><span class="o">=</span><span class="p">{</span><span class="nx">path</span><span class="p">}</span> <span class="nx">onClick$</span><span class="o">=</span><span class="p">{(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">navigateTo</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">routingState</span><span class="p">)</span>
        <span class="p">}}</span><span class="o">&gt;&lt;</span><span class="nx">Slot</span><span class="o">/&gt;&lt;</span><span class="sr">/a</span><span class="err">&gt;
</span>    <span class="p">);</span>
<span class="p">});</span>

</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">.tsx</code> of the app component now looks like this:</p>
<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">section</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Link</span> <span class="na">path</span><span class="p">=</span><span class="si">{</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="si">}</span><span class="p">&gt;</span>Home<span class="p">&lt;/</span><span class="nc">Link</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Link</span> <span class="na">path</span><span class="p">=</span><span class="si">{</span><span class="dl">'</span><span class="s1">/users</span><span class="dl">'</span><span class="si">}</span> <span class="p">&gt;</span>users<span class="p">&lt;/</span><span class="nc">Link</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Link</span> <span class="na">path</span><span class="p">=</span><span class="si">{</span><span class="dl">'</span><span class="s1">/users/1</span><span class="dl">'</span><span class="si">}</span><span class="p">&gt;</span>Brecht<span class="p">&lt;/</span><span class="nc">Link</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">RouterOutlet</span><span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nt">section</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>We have successfully set up client-side SPA routing with parameter support without too much effort.
There are 2 last things missing: functionality to get path params and search params.</p>

<p>In the config we have <code class="language-plaintext highlighter-rouge">{path: 'users/:id'}</code>, and in the URL we have <code class="language-plaintext highlighter-rouge">users/1</code>, so we want
something like <code class="language-plaintext highlighter-rouge">getParams(routingState).id</code> that returns the string <code class="language-plaintext highlighter-rouge">"1"</code>.</p>

<p>In <code class="language-plaintext highlighter-rouge">routing/routing.ts</code> we add 2 more functions:</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// routing/routing.tsx</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">getParams</span><span class="p">(</span><span class="nx">routingState</span><span class="p">:</span> <span class="nx">RoutingState</span><span class="p">):</span> <span class="p">{</span> <span class="p">[</span><span class="nx">key</span><span class="p">:</span> <span class="kr">string</span><span class="p">]:</span> <span class="kr">string</span> <span class="p">}</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">matchingConfig</span> <span class="o">=</span> <span class="nx">getMatchingConfig</span><span class="p">(</span><span class="nx">routingState</span><span class="p">.</span><span class="nx">segments</span><span class="p">,</span> <span class="nx">routingConfig</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">params</span> <span class="o">=</span> <span class="nx">matchingConfig</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="na">segment</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="na">index</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">segment</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="dl">'</span><span class="s1">:</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span>
                <span class="k">return</span> <span class="p">{</span>
                    <span class="nx">index</span><span class="p">,</span>
                    <span class="na">paramName</span><span class="p">:</span> <span class="nx">segment</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="dl">'</span><span class="s1">:</span><span class="dl">'</span><span class="p">,</span> <span class="dl">''</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">undefined</span>
            <span class="p">}</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> <span class="o">!!</span><span class="nx">v</span><span class="p">);</span>
    <span class="kd">const</span> <span class="na">returnObj</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="na">key</span><span class="p">:</span> <span class="kr">string</span><span class="p">]:</span> <span class="kr">string</span> <span class="p">}</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="nx">params</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">param</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">returnObj</span><span class="p">[</span><span class="nx">param</span><span class="p">.</span><span class="nx">paramName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">routingState</span><span class="p">.</span><span class="nx">segments</span><span class="p">[</span><span class="nx">param</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="nx">returnObj</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">getSearchParams</span><span class="p">(</span><span class="nx">routingState</span><span class="p">:</span> <span class="nx">RoutingState</span><span class="p">):</span> <span class="nx">URLSearchParams</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nx">routingState</span><span class="p">.</span><span class="nx">url</span><span class="p">).</span><span class="nx">searchParams</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>That’s it!! We have a complete client-side SPA router without much code, that works with lazy loading thanks to
Qwik providing it out of the box. It was a very pleasant journey for me and I sure learned a lot.
Chances are my upcoming posts will be Qwik-related.</p>

<ul>
  <li>I learned that we have to block the traditional routing by creating a custom <code class="language-plaintext highlighter-rouge">Link</code> component that also pushes a new state to the 
history object</li>
  <li>I realized we couldn’t store the URL prototype into the state because it is not serializable and having the string is enough.</li>
  <li>I thought it was going to be hard to map a component to a route but that turned out to be quite easy and straightforward.</li>
  <li>Routers shouldn’t be that complex. We achieved a lot with a small amount of code</li>
  <li><code class="language-plaintext highlighter-rouge">useClientEffect$</code> is handy when you only want to execute something on the client.</li>
  <li>I thought it was going to be easy to work with nested router outlets but I believe there is a bigger complexity there,
but I will definitely check that out in the future</li>
</ul>

<p>You can also <a href="https://github.com/brechtbilliet/qwik-spa-routing-demo/tree/main/spa-routing">check out the source code of this demo</a>.
I hope you found it interesting as well!</p>

<p>Special thanks to the reviewers:</p>
<ul>
  <li><a href="https://twitter.com/mhevery">Miško Hevery</a></li>
  <li><a href="https://twitter.com/tigt_">Taylor Hunt</a></li>
  <li><a href="https://twitter.com/antoinepairet">Antoine Pairet</a></li>
</ul>]]></content><author><name>brechtbilliet</name></author><summary type="html"><![CDATA[The why]]></summary></entry><entry><title type="html">Reactive dumb components</title><link href="http://localhost:4000/reactive-dumb-components/" rel="alternate" type="text/html" title="Reactive dumb components" /><published>2021-05-17T00:00:00+02:00</published><updated>2021-05-17T00:00:00+02:00</updated><id>http://localhost:4000/reactive-dumb-components</id><content type="html" xml:base="http://localhost:4000/reactive-dumb-components/"><![CDATA[<h2 id="reactive-dumb-components">Reactive dumb components</h2>

<p>When we write RxJS logic inside our presentation layer we mostly wind up with reactive flows inside our smart components (container components). The reasoning behind this, is quite easy:</p>

<p>Because these smart components are the orchestration vessels of our application, they communicate with reactive asynchronous flows such as XHR-calls and state management, but also with events emitted by the dumb components.</p>

<p>That being said, dumb components may also benefit from reactive flows. Especially when the dumb component has multiple <code class="language-plaintext highlighter-rouge">@Input()</code> properties that rely on different sets of asynchronous data.
The usual way of handling these types of changes is the use of imperative <code class="language-plaintext highlighter-rouge">if else code</code> inside the <code class="language-plaintext highlighter-rouge">ngOnChanges</code> lifecycle hook.</p>

<p>Take this situation for example: We have a <code class="language-plaintext highlighter-rouge">CompanyDetail</code> component that has the responsibility to visualize a company with all its sites. 
The component has a previous and a next button to navigate between the sites, we also want to show how many sites there are and we want to show the name and address of every specific site.
The <code class="language-plaintext highlighter-rouge">sites</code> <code class="language-plaintext highlighter-rouge">@Input()</code> property is asynchronous because it is dependant on an XHR request and the <code class="language-plaintext highlighter-rouge">currentSiteId</code> <code class="language-plaintext highlighter-rouge">@Input()</code> property is asynchronous because it is dependant on the router params which is an observable behind the scenes and will change over time when the user is navigating between the different sites of a company.</p>

<p>For this component to properly work we have to make sure that the <code class="language-plaintext highlighter-rouge">sites</code> property has a value at the right time and the <code class="language-plaintext highlighter-rouge">currentSiteId</code> also has a value at the right time, we can already imagine racing conditions etc.
The component is also responsibile to calculate whether the previous button and next button are disabled or not. When these buttons are clicked, it also has to calculate the next or previous siteId to emit that value to its smart component.</p>

<p>Here we can see the app inside this <a href="https://stackblitz.com/edit/reactive-dumb-components?file=src%2Fapp%2Fcontainers%2Fcompany%2Fcompany.component.ts">Stackblitz example</a></p>

<p>This is the smart component that will use the <code class="language-plaintext highlighter-rouge">app-company-detail</code> as a dumb component.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="dl">'</span><span class="s1">app-company</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">template</span><span class="p">:</span> <span class="s2">`
    &lt;app-company-detail
      [currentSiteId]="currentSiteId$ | async"
      [sites]="sites$ | async"
      (siteChanged)="siteChanged($event)"
    &gt;&lt;/app-company-detail&gt;
  `</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">./company.component.css</span><span class="dl">'</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">CompanyComponent</span> <span class="p">{</span>
  <span class="c1">// fetch the sites</span>
  <span class="nx">sites$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sitesService</span><span class="p">.</span><span class="nx">getSites</span><span class="p">();</span>
  <span class="c1">// get the asynchronous siteId from the router params</span>
  <span class="nx">currentSiteId$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">activatedRoute</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">map</span><span class="p">(</span><span class="nx">p</span> <span class="o">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">siteId</span><span class="p">));</span>

  <span class="c1">// the dumb app-company-detail component is responsible</span>
  <span class="c1">// to calculate the siteId that we need to go to</span>
  <span class="nx">siteChanged</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">router</span><span class="p">.</span><span class="nx">navigate</span><span class="p">([</span><span class="nx">id</span><span class="p">]);</span>
  <span class="p">}</span>

  <span class="kd">constructor</span><span class="p">(</span>
    <span class="k">private</span> <span class="nx">sitesService</span><span class="p">:</span> <span class="nx">SitesService</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">router</span><span class="p">:</span> <span class="nx">Router</span><span class="p">,</span>
    <span class="k">private</span> <span class="nx">activatedRoute</span><span class="p">:</span> <span class="nx">ActivatedRoute</span>
  <span class="p">)</span> <span class="p">{}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The imperative implementation of the dumb component looks like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="dl">'</span><span class="s1">app-company-detail</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">template</span><span class="p">:</span> <span class="s2">`
    &lt;button [disabled]="previousDisabled" (click)="previousClicked()"&gt;
      Previous site
    &lt;/button&gt;
    &lt;button [disabled]="nextDisabled" (click)="nextClicked()"&gt;
      Next site
    &lt;/button&gt;
     / 
    &lt;h2&gt;&lt;/h2&gt;
    &lt;p&gt;Address: &lt;/p&gt;
  `</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">./company-detail.component.css</span><span class="dl">'</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">CompanyDetailComponent</span> <span class="k">implements</span> <span class="nx">OnChanges</span><span class="p">{</span>
  <span class="p">@</span><span class="nd">Input</span><span class="p">()</span> <span class="nx">currentSiteId</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="p">@</span><span class="nd">Input</span><span class="p">()</span> <span class="nx">sites</span><span class="p">:</span> <span class="kr">any</span><span class="p">[];</span>
  <span class="p">@</span><span class="nd">Output</span><span class="p">()</span> <span class="nx">siteChanged</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventEmitter</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">();</span>

  <span class="c1">// we need to keep track of 5 different local properties</span>
  <span class="c1">// and calculate and set their values at the right time</span>
  <span class="nx">currentIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="nl">previousDisabled</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>
  <span class="nl">nextDisabled</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">;</span>
  <span class="nl">currentSite</span><span class="p">:</span> <span class="kr">any</span><span class="p">;</span>
  <span class="nl">currentSiteNumber</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>

  <span class="nx">ngOnChanges</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="c1">// this can become complex really fast</span>
    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currentSiteId</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">sites</span><span class="p">?.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">currentIndex</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sites</span><span class="p">?.</span><span class="nx">map</span><span class="p">(</span><span class="nx">site</span> <span class="o">=&gt;</span> <span class="nx">site</span><span class="p">?.</span><span class="nx">id</span><span class="p">).</span><span class="nx">indexOf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">currentSiteId</span><span class="p">);</span>    
      <span class="k">this</span><span class="p">.</span><span class="nx">currentSite</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sites</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">currentIndex</span><span class="p">];</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">currentSiteNumber</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">currentIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">previousDisabled</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">currentIndex</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">nextDisabled</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">currentIndex</span> <span class="o">===</span> <span class="k">this</span><span class="p">.</span><span class="nx">sites</span><span class="p">?.</span><span class="nx">length</span> <span class="o">-</span><span class="mi">1</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">previousClicked</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">siteChanged</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sites</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">currentIndex</span> <span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">id</span><span class="p">);</span>    
  <span class="p">}</span>

  <span class="nx">nextClicked</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">siteChanged</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sites</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">currentIndex</span> <span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">id</span><span class="p">);</span>    
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We can see that all the calculation is happening inside the ngOnChanges.
Although this solution is perfectly fine, there is a more reactive way of approaching this. For this specific example it could be overkill but it might teach you how to tackle more complex situations when tackling <code class="language-plaintext highlighter-rouge">@Input()</code> changes.</p>

<p>Think about a complex calendar view that has to do a bunch of calculations based on dozens of <code class="language-plaintext highlighter-rouge">@Input()</code> properties for instance, where a bunch of them are happening synchronous and there are async properties depending on other async properties.
Think about <code class="language-plaintext highlighter-rouge">@Input()</code> components that are useless unless other <code class="language-plaintext highlighter-rouge">@Input()</code> components have their values. Or what if you like to combine the <code class="language-plaintext highlighter-rouge">@Input()</code> properties with other async objects inside the dumb component. In the following example every piece of code inside this component is a stream. The first thing we want to do is create observables from the <code class="language-plaintext highlighter-rouge">@Input()</code> properties. I like to use this approach when multiple <code class="language-plaintext highlighter-rouge">@Input()</code> properties need eachother to compute a specific value.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">CompanyDetailComponent</span><span class="p">{</span>
  <span class="c1">// input state subjects</span>
  <span class="k">private</span> <span class="nx">currentSiteId$$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReplaySubject</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">private</span> <span class="nx">sites$$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReplaySubject</span><span class="o">&lt;</span><span class="kr">any</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

  <span class="c1">// input stream setters</span>
  <span class="p">@</span><span class="nd">Input</span><span class="p">()</span> <span class="kd">set</span> <span class="nx">currentSiteId</span><span class="p">(</span><span class="nx">v</span><span class="p">:</span> <span class="kr">string</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="p">){</span> <span class="c1">// we don't care about null values in this case</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">currentSiteId$$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>
  <span class="p">@</span><span class="nd">Input</span><span class="p">()</span> <span class="kd">set</span> <span class="nx">sites</span><span class="p">(</span><span class="nx">v</span><span class="p">:</span> <span class="kr">any</span><span class="p">[]){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="p">){</span> <span class="c1">// we don't care about null values in this case</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">sites$$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p><em>Note: We use the <code class="language-plaintext highlighter-rouge">$$</code> suffix so we can see the observable is a <code class="language-plaintext highlighter-rouge">Subject</code>.</em></p>

<p>We have now created observables from these <code class="language-plaintext highlighter-rouge">@Input()</code> properties. I have created the library <a href="https://www.npmjs.com/package/ngx-reactivetoolkit">ngx-reactivetoolkit</a> to make this even easier. We can see an example on how this cleans up the code right below:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">CompanyDetailComponent</span><span class="p">{</span>
  <span class="p">@</span><span class="nd">Input</span><span class="p">()</span> <span class="nx">currentSiteId</span><span class="p">:</span> <span class="kr">string</span>
  <span class="p">@</span><span class="nd">Input</span><span class="p">()</span>  <span class="nx">sites</span><span class="p">:</span> <span class="kr">any</span><span class="p">[]</span>
  <span class="p">@</span><span class="nd">Changes</span><span class="p">(</span><span class="dl">'</span><span class="s1">currentSiteId</span><span class="dl">'</span><span class="p">)</span> <span class="nx">currentSiteId$</span><span class="p">;</span>
  <span class="p">@</span><span class="nd">Changes</span><span class="p">(</span><span class="dl">'</span><span class="s1">sites</span><span class="dl">'</span><span class="p">)</span> <span class="nx">sites$</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>For this article we will continue with the native approach but be sure to check it out if you find the time. The toolkit might also gave some other good stuff that could help you.</p>

<p>Moving on… Remember that we mentioned that everything could be a stream? This also means our template events can be linked to streams.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;button</span> <span class="na">[disabled]=</span><span class="s">"previousDisabled$|async"</span> <span class="na">(click)=</span><span class="s">"previousClicked()"</span><span class="nt">&gt;</span>
  Previous site
<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;button</span> <span class="na">[disabled]=</span><span class="s">"nextDisabled$|async"</span> <span class="na">(click)=</span><span class="s">"nextClicked()"</span><span class="nt">&gt;</span>
  Next site
<span class="nt">&lt;/button&gt;</span>
</code></pre></div></div>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// this will be used to communicate with the siteChanged @Output()</span>
  <span class="k">private</span> <span class="nx">nav$$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Subject</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">();</span>

  <span class="nx">previousClicked</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">nav$$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// decrement</span>
  <span class="p">}</span>
  
  <span class="nx">nextClicked</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">nav$$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// increment</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>The next thing that we want to do is determine the presentation streams and the Output streams. For the presentation streams we can simply have a look at the template:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;button</span> <span class="na">[disabled]=</span><span class="s">"previousDisabled$|async"</span> <span class="na">(click)=</span><span class="s">"previousClicked()"</span><span class="nt">&gt;</span>
  Previous site
<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;button</span> <span class="na">[disabled]=</span><span class="s">"nextDisabled$|async"</span> <span class="na">(click)=</span><span class="s">"nextClicked()"</span><span class="nt">&gt;</span>
  Next site
<span class="nt">&lt;/button&gt;</span>
/ 
<span class="nt">&lt;ng-container</span> <span class="na">*ngIf=</span><span class="s">"currentSite$|async as currentSite"</span><span class="nt">&gt;</span>
  ...
<span class="nt">&lt;/ng-container&gt;</span>

</code></pre></div></div>

<p>When looking at this template we can easily determine the presentation streams. These are all the streams that use an <code class="language-plaintext highlighter-rouge">async</code> pipe.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">previousDisabled$</code></li>
  <li><code class="language-plaintext highlighter-rouge">nextDisabled$</code></li>
  <li><code class="language-plaintext highlighter-rouge">currentSiteNumber$</code></li>
  <li><code class="language-plaintext highlighter-rouge">totalSites$</code></li>
  <li><code class="language-plaintext highlighter-rouge">currentSite$</code></li>
</ul>

<p>The only <code class="language-plaintext highlighter-rouge">@Output()</code> stream for this template is for the <code class="language-plaintext highlighter-rouge">siteChanged</code> <code class="language-plaintext highlighter-rouge">@Output()</code>. Did you know an <code class="language-plaintext highlighter-rouge">EventEmitter</code> is an observable behind the scenes? Well, it is and we can replace the <code class="language-plaintext highlighter-rouge">EventEmitter</code> with any kind of observable.</p>

<p>This means that this code:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Output</span><span class="p">()</span> <span class="nx">siteChanged</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventEmitter</span><span class="p">();</span>
</code></pre></div></div>

<p>can be refactored to:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Output</span><span class="p">()</span> <span class="nx">siteChanged</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">siteChanged$</span><span class="p">;</span>
</code></pre></div></div>

<p>Again, for this example the solution might be personal preference but when the flows become more complex we believe this approach can really shine! Think about a search component that looks like this…</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Output</span><span class="p">()</span> <span class="nx">search$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">searchControl</span><span class="p">.</span><span class="nx">valueChanges$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">debounceTime</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span>
    <span class="nx">distinctUntilChanged</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div></div>

<p>This can become very powerful very fast!</p>

<p>The next thing that we want to do is calculate intermediate private streams. If you don’t know what we mean with that, please check out the article on the <a href="https://blog.strongbrew.io/the-sip-principle/">SIP principle</a>. We use these intermediate streams to calculate the presentation streams, which are the streams that we will use in our template, and in the <code class="language-plaintext highlighter-rouge">@Output()</code> streams</p>

<p>The <code class="language-plaintext highlighter-rouge">currentIndex$</code> stream and the <code class="language-plaintext highlighter-rouge">indexWithSites$</code> stream are streams that are being used to calculate the presentationstreams. The <code class="language-plaintext highlighter-rouge">siteChanged$</code> stream will be used by the <code class="language-plaintext highlighter-rouge">siteChanged</code> <code class="language-plaintext highlighter-rouge">@Output()</code> property later on
We can see the calculation in this example:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// intermediate streams</span>
<span class="c1">// the current index, calculated by the current site id and the sites</span>
<span class="k">private</span> <span class="nx">currentIndex$</span> <span class="o">=</span> <span class="nx">combineLatest</span><span class="p">([</span><span class="k">this</span><span class="p">.</span><span class="nx">currentSiteId$$</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">sites$$</span><span class="p">])</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">map</span><span class="p">(([</span><span class="nx">currentSiteId</span><span class="p">,</span> <span class="nx">sites</span><span class="p">])</span> <span class="o">=&gt;</span> 
      <span class="nx">sites</span><span class="p">?.</span><span class="nx">map</span><span class="p">(</span><span class="nx">site</span> <span class="o">=&gt;</span> <span class="nx">site</span><span class="p">?.</span><span class="nx">id</span><span class="p">).</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">currentSiteId</span><span class="p">)</span>    
    <span class="p">)</span>
  <span class="p">);</span>

<span class="c1">// an array that always contains the currentIndex and all the sites</span>
<span class="k">private</span> <span class="nx">indexWithSites$</span> <span class="o">=</span> <span class="nx">combineLatest</span><span class="p">([</span><span class="k">this</span><span class="p">.</span><span class="nx">currentIndex$</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">sites$$</span><span class="p">]);</span>

<span class="c1">// every time the nav button is clicked, we need to calculate the id that</span>
<span class="c1">// needs to be emitted to the siteChanged @Output()</span>
<span class="k">private</span> <span class="nx">siteChanged$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">nav$$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
  <span class="nx">withLatestFrom</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sites$$</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">currentIndex$</span><span class="p">),</span>
  <span class="nx">map</span><span class="p">(([</span><span class="nx">navigationIndex</span><span class="p">,</span> <span class="nx">sites</span><span class="p">,</span> <span class="nx">currentIndex</span><span class="p">])</span> <span class="o">=&gt;</span> 
    <span class="nx">sites</span><span class="p">[</span><span class="nx">currentIndex</span> <span class="o">+</span> <span class="nx">navigationIndex</span><span class="p">]?.</span><span class="nx">id</span>
  <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Now we can start by implementing the  presentation streams and the <code class="language-plaintext highlighter-rouge">@Output()</code> stream.
In the code snippet below we can see the complete code: You can also check the <a href="https://stackblitz.com/edit/reactive-dumb-components-reactive?file=src/app/components/company-detail/company-detail.component.ts">StackBlitz example</a></p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="dl">'</span><span class="s1">app-company-detail</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">template</span><span class="p">:</span> <span class="s2">`
    &lt;button [disabled]="previousDisabled$|async" (click)="previousClicked()"&gt;
      Previous site
    &lt;/button&gt;
    &lt;button [disabled]="nextDisabled$|async" (click)="nextClicked()"&gt;
      Next site
    &lt;/button&gt;
    / 
    &lt;ng-container *ngIf="currentSite$|async as currentSite"&gt;
      &lt;h2&gt;&lt;/h2&gt;
      &lt;p&gt;Address: &lt;/p&gt;
    &lt;/ng-container&gt;

  `</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">./company-detail.component.css</span><span class="dl">'</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">CompanyDetailComponent</span><span class="p">{</span>
  <span class="c1">// local state subjects and input state subjects</span>
  <span class="k">private</span> <span class="nx">nav$$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Subject</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="k">private</span> <span class="nx">currentSiteId$$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReplaySubject</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">private</span> <span class="nx">sites$$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReplaySubject</span><span class="o">&lt;</span><span class="kr">any</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

  <span class="c1">// input stream setters</span>
  <span class="p">@</span><span class="nd">Input</span><span class="p">()</span> <span class="kd">set</span> <span class="nx">currentSiteId</span><span class="p">(</span><span class="nx">v</span><span class="p">:</span> <span class="kr">string</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="p">){</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">currentSiteId$$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>
  <span class="p">@</span><span class="nd">Input</span><span class="p">()</span> <span class="kd">set</span> <span class="nx">sites</span><span class="p">(</span><span class="nx">v</span><span class="p">:</span> <span class="kr">any</span><span class="p">[]){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="p">){</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">sites$$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="c1">// intermediate streams</span>
  <span class="k">private</span> <span class="nx">currentIndex$</span> <span class="o">=</span> <span class="nx">combineLatest</span><span class="p">([</span><span class="k">this</span><span class="p">.</span><span class="nx">currentSiteId$$</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">sites$$</span><span class="p">])</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
      <span class="nx">map</span><span class="p">(([</span><span class="nx">currentSiteId</span><span class="p">,</span> <span class="nx">sites</span><span class="p">])</span> <span class="o">=&gt;</span> 
        <span class="nx">sites</span><span class="p">?.</span><span class="nx">map</span><span class="p">(</span><span class="nx">site</span> <span class="o">=&gt;</span> <span class="nx">site</span><span class="p">?.</span><span class="nx">id</span><span class="p">).</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">currentSiteId</span><span class="p">)</span>    
      <span class="p">)</span>
    <span class="p">);</span>
  <span class="k">private</span> <span class="nx">indexWithSites$</span> <span class="o">=</span> <span class="nx">combineLatest</span><span class="p">([</span><span class="k">this</span><span class="p">.</span><span class="nx">currentIndex$</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">sites$$</span><span class="p">]);</span>

  <span class="k">private</span> <span class="nx">siteChanged$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">nav$$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">withLatestFrom</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sites$$</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">currentIndex$</span><span class="p">),</span>
    <span class="nx">map</span><span class="p">(([</span><span class="nx">navigationIndex</span><span class="p">,</span> <span class="nx">sites</span><span class="p">,</span> <span class="nx">currentIndex</span><span class="p">])</span> <span class="o">=&gt;</span> 
     <span class="nx">sites</span><span class="p">[</span><span class="nx">currentIndex</span> <span class="o">+</span> <span class="nx">navigationIndex</span><span class="p">]?.</span><span class="nx">id</span>
    <span class="p">)</span>
  <span class="p">)</span>

  <span class="c1">// output streams and presentational streams</span>
  <span class="p">@</span><span class="nd">Output</span><span class="p">()</span> <span class="nx">siteChanged</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">siteChanged$</span><span class="p">;</span>
  <span class="nx">previousDisabled$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">currentIndex$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">map</span><span class="p">(</span><span class="nx">currentIndex</span> <span class="o">=&gt;</span><span class="nx">currentIndex</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">)</span>
  <span class="nx">nextDisabled$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">indexWithSites$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">map</span><span class="p">(([</span><span class="nx">currentIndex</span><span class="p">,</span> <span class="nx">sites</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nx">currentIndex</span> <span class="o">===</span> <span class="nx">sites</span><span class="p">?.</span><span class="nx">length</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
  <span class="p">)</span>
  <span class="nx">currentSite$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">indexWithSites$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">map</span><span class="p">(([</span><span class="nx">currentIndex</span><span class="p">,</span> <span class="nx">sites</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nx">sites</span><span class="p">[</span><span class="nx">currentIndex</span><span class="p">])</span>
  <span class="p">)</span>
  <span class="nx">totalSites$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sites$$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">map</span><span class="p">(</span><span class="nx">sites</span> <span class="o">=&gt;</span> <span class="nx">sites</span><span class="p">?.</span><span class="nx">length</span><span class="p">)</span>
  <span class="p">)</span>
  <span class="nx">currentSiteNumber$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">currentIndex$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">map</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> <span class="nx">v</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">)</span>

  <span class="nx">previousClicked</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">nav$$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>    
  <span class="p">}</span>
  
  <span class="nx">nextClicked</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">nav$$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>    
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>We can make components completely reactive if we want to by:</p>
<ul>
  <li>Binding other observables to <code class="language-plaintext highlighter-rouge">@Output()</code> properties</li>
  <li>Using setters to populate <code class="language-plaintext highlighter-rouge">@Input()</code> properties</li>
  <li>We can use <code class="language-plaintext highlighter-rouge">ngx-reactivetoolkit</code> to make the code cleaner</li>
</ul>

<p>For simple component this can be seen as overkill, but it could definitely help when dumb components become more complex and rely of different streams of data that are happening asynchronously.</p>]]></content><author><name>brechtbilliet</name></author><category term="Rxjs" /><category term="Rxjs" /><summary type="html"><![CDATA[How to make dumb components reactive without imperative ngOnChanges programming]]></summary></entry><entry><title type="html">How covid affected StrongBrew</title><link href="http://localhost:4000/how-covid-affected-strongbrew/" rel="alternate" type="text/html" title="How covid affected StrongBrew" /><published>2020-11-03T00:00:00+01:00</published><updated>2020-11-03T00:00:00+01:00</updated><id>http://localhost:4000/how-covid-affected-strongbrew</id><content type="html" xml:base="http://localhost:4000/how-covid-affected-strongbrew/"><![CDATA[<h2 id="covid">Covid</h2>

<p>These are challenging times… Harsh times for people and companies. Even for some companies it results in fatal decisions.</p>

<p>Unfortunately we were impacted by COVID as well, as we haven’t earned a single dime since March 2020.
If we take this painful aspect into consideration in combination with the fact that Kwinten is pursuing a new job at Stackblitz we decided to stop the legal entity StrongBrew VOF. StrongBrew VOF is no more… I (Brecht) personally want to thank Kwinten for this awesome adventure and I hope we can work together once again in the future.</p>

<p>That being said… I will continue all StrongBrew activities except the trainings. The brews that we have given, both locally and internationally will not be updated anymore, nor will they be given in companies. We want to thank all of you for following our trainings, reading our content and trusting us with important problems.</p>

<h2 id="blog">Blog</h2>

<p>Most articles of the blog are more than a year old. My goal is to pump new life into the blog and help you all with technical content and personal experience. I still do Angular/RxJS/Architecture on a full time basis and recently started freelancing for a new awesome startup called <a href="https://www.rosa.be/">rosa</a>.</p>

<p>The techstack we use there is:</p>
<ul>
  <li>Angular</li>
  <li>Nx</li>
  <li>Typescript</li>
  <li>RxJS</li>
  <li>Nest.js</li>
  <li>a bunch other cool technologies</li>
</ul>

<h2 id="what-can-i-still-do-for-your-company-remotely">What can I still do for your company (remotely)</h2>

<p>In these challenging times we still believe your company can benefit from the services of StrongBrew.
The services listed below is something that I still do 1/5th of my time:</p>

<ul>
  <li>Code reviews</li>
  <li>Pair programming sessions</li>
  <li>Help you with the interview process of your possible employees</li>
  <li>Help you with kickstarting a new project</li>
  <li>Overal architectural support</li>
  <li>Tackle very specific problems</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Unfortunately our company has died a slow death, but you will be hearing more of StrongBrew in the near future. Stay safe! Stay healthy! And if you have questions don’t hesitate to reach out.
Cheers! Brecht.</p>]]></content><author><name>brechtbilliet</name></author><category term="Covid" /><category term="COVID" /><summary type="html"><![CDATA[What is the future of StrongBrew? How were we impacted by COVID?]]></summary></entry><entry><title type="html">Managing state in Angular</title><link href="http://localhost:4000/managing-state-in-angular/" rel="alternate" type="text/html" title="Managing state in Angular" /><published>2019-07-29T00:00:00+02:00</published><updated>2019-07-29T00:00:00+02:00</updated><id>http://localhost:4000/managing-state-in-angular</id><content type="html" xml:base="http://localhost:4000/managing-state-in-angular/"><![CDATA[<h2 id="about-this-article">About this article</h2>

<p>When we create single-page-applications, there is no way around it. Sooner or later we are going to be facing state. There are a lot of solutions out there to manage that state and together with those solutions there are a lot of opinions.
Especially when working with experienced developers, there opinions get stronger and often result in interesting discussions.</p>

<p>This article is not about which libraries to use, but to learn about what state is and how we can reason about it. The examples are all written in Angular, however the approaches are not specific to Angular.</p>

<p>In this article we will learn about the different kind of state types within our application, and where that state might live.</p>

<h2 id="what-is-state">What is state?</h2>

<p>State is basically everything that will define the UI that our user will be using.
State could be whether a button should be visible or not, it could be the result of that button click and it could also be an <code class="language-plaintext highlighter-rouge">Array</code> of users that is coming from an API.
State can live in different places throughout our entire application. Some state is very specific to a certain component where other state might be shared in different parts of our application. One piece of state could be a singleton instance, where a another piece of state could share the limited lifespan of a component that can be destroyed at any time.</p>

<p>This big variety of what state could be, how long it lives and where it comes from results in complexity that we need to manage.</p>

<h2 id="what-is-state-management">What is state management?</h2>

<p>State management is the concept of adding, updating, removing and reading pieces of state in an application. When we have deeply nested data structures and we want to update a specific part deep down in the tree, it might become complex. In that case we have state management libraries that contain a <code class="language-plaintext highlighter-rouge">Store</code> which helps us with state management to get rid of that complexity. A quick note, we have to be careful that these libraries don’t add complexity by overusing them.</p>

<h2 id="reactive-state">Reactive state</h2>

<p>Combining state management together with reactive programming can be a really nice way to develop single-page-applications. Whether our focus lies on Angular, Vue or React, combining these two principles  will result in more predictable applications.</p>

<p>Now what has state to do with reactive programming?
A piece of state can change over time, so in a way we are waiting for new state changes. That makes it asynchronous.</p>

<p>Let’s take this example for instance:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// false------true-----false---true...</span>
<span class="nx">sidebarCollapsed$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">sidebarCollapsed$</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">sidebarCollapsed$</code> stream starts out with <code class="language-plaintext highlighter-rouge">false</code>, later on it becomes <code class="language-plaintext highlighter-rouge">true</code> and so on. This stream keeps on living. In Angular this state can be consumed with the <a href="https://angular.io/api/common/AsyncPipe">async pipe</a> as easy as:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;my-awesome-sidebar</span> <span class="na">*ngIf=</span><span class="s">"sidebarCollapsed$|async"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/my-awesome-sidebar&gt;</span>
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">async</code> pipe will subscribe to the <code class="language-plaintext highlighter-rouge">sidebarCollapsed$</code> pass it to the component, mark it for check and will automatically unsubscribe when the component gets destroyed.
Keeping state in an observer pattern is nice because we can subscribe to the changes. Oh, and did I mention it plays super nice with Angular?</p>

<p>We can either use a <code class="language-plaintext highlighter-rouge">BehaviorSubject</code> or state management frameworks that support Observables. Here are some really great ones with Observable support:</p>

<ul>
  <li><a href="https://ngrx.io">Ngrx</a></li>
  <li><a href="https://netbasal.gitbook.io/akita/">Akita</a></li>
  <li><a href="https://github.com/ngxs/store">Ngxs</a></li>
</ul>

<h2 id="immutability-and-unidirectional-data-flow">Immutability and Unidirectional data flow</h2>

<p>Before we dive deeper in state, there are 2 important principles that we should follow when managing state.
The first principle is <strong>immutability</strong>, which means that we should never mutate data directly without creating a new reference of that object.
If we mutate data directly, our application becomes unpredictable and it’s really hard to trace bugs.
When we work in an immutable fashion we can also take advantage of performance strategies like the <a href="https://netbasal.com/a-comprehensive-guide-to-angular-onpush-change-detection-strategy-5bac493074a4">ChangeDetection.OnPush</a> from Angular or React its <a href="https://reactjs.org/docs/react-api.html#reactpurecomponent">PureComponent</a>.</p>

<p>When we use typescript we can enforce the typescript compiler to complain when we mutate data</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">Foo</span> <span class="o">=</span> <span class="p">{</span>
    <span class="k">readonly</span> <span class="na">bar</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span> 
    <span class="k">readonly</span> <span class="na">baz</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span> 
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">first</span> <span class="o">=</span> <span class="p">{</span><span class="na">bar</span><span class="p">:</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">,</span> <span class="na">baz</span><span class="p">:</span> <span class="mi">1</span><span class="p">};</span>
<span class="nx">first</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">test2</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// compilation error</span>
<span class="nx">first</span> <span class="o">=</span> <span class="p">{...</span><span class="nx">first</span><span class="p">,</span> <span class="na">bar</span><span class="p">:</span> <span class="dl">'</span><span class="s1">test2</span><span class="dl">'</span><span class="p">};</span> <span class="c1">// success</span>
</code></pre></div></div>

<p>In the previous example we have overwritten the <code class="language-plaintext highlighter-rouge">first</code> instance with an entire new instance that has an updated <code class="language-plaintext highlighter-rouge">bar</code> property.</p>

<p>Arrays can be handled like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Brecht</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Kwinten</span><span class="dl">'</span><span class="p">];</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// BAD: arr is mutated</span>
<span class="nx">arr</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">arr</span><span class="p">,</span> <span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">];</span> <span class="c1">// Good, arr gets new reference</span>
</code></pre></div></div>
<p>the <code class="language-plaintext highlighter-rouge">Array</code> prototype also has some great helper functions that we can use to enforce immutability like <code class="language-plaintext highlighter-rouge">map()</code> and <code class="language-plaintext highlighter-rouge">filter()</code> but this is not in scope for this article.</p>

<p>The second principle is <strong>Unidirectional data flow</strong>.
In a nutshell, this means that we should never use two-way data binding on state. It is the absolute owner of that specific piece of state that is in charge of updating it (immutable of course).</p>

<p>Both of these principles are highly enforced by the <a href="https://redux.js.org/">Redux</a> pattern.</p>

<h2 id="what-kind-of-states-are-there">What kind of states are there?</h2>

<h3 id="router-state">Router state</h3>

<p>Often forgotten, but one of the most important pieces of state a web application can have. Putting state in the route gives us the following advantages:</p>

<ul>
  <li>We can use the browser navigation buttons</li>
  <li>We can bookmark the state</li>
  <li>We can can copy and paste the url with the state to other users</li>
  <li>We don’t have to manage it, it’s always there in the route</li>
</ul>

<p><strong>Tip</strong>: Instead of handling modals with a <code class="language-plaintext highlighter-rouge">userDetailModalVisible</code> property, why not enjoy all the benefits mentioned above and bind it to a <code class="language-plaintext highlighter-rouge">users/:userId</code> route?
Using a child <code class="language-plaintext highlighter-rouge">router-outlet</code> in Angular makes this a piece of cake as we can see in this snippet.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table&gt;</span>
<span class="c">&lt;!--contains users --&gt;</span>
<span class="nt">&lt;/table&gt;</span>
<span class="nt">&lt;router-outlet&gt;</span>
<span class="c">&lt;!-- user detail modal rendered in here --&gt;</span>
<span class="nt">&lt;/router-outlet&gt;</span>
</code></pre></div></div>

<h3 id="component-state">Component state</h3>

<p>Every component could contain state. That state could be shared with its dumb components or could be used in the component itself.
Eg: When an <code class="language-plaintext highlighter-rouge">ItemComponent</code> has a property <code class="language-plaintext highlighter-rouge">selectedItems</code> which is an array of ids, and that array is never used in other components (that aren’t children of that component), we can consider it component state. 
It belongs to that component, therefore the component should be responsible for it. Child components can consume that state but should <em>never mutate it</em>. Those components can notify their parent that is responsible for it, which could update it in an immutable way. For more information about smart and dumb components <a href="https://blog.strongbrew.io/components-demystified/#smart-vs-dumb-components">look here</a>.</p>

<p>Personally, I try to avoid state management frameworks for managing component state because it’s the responsibility of that component to manage that state.
There are however good reasons to use state management frameworks to manage component state:</p>

<ul>
  <li>When the state management is very complex</li>
  <li>If we want to do <a href="https://blog.strongbrew.io/Cancellable-optimistic-updates-in-Angular2-and-Redux/">optimistic updates</a></li>
  <li>If we want to use it for <a href="https://blog.strongbrew.io/How-we-made-our-app-real-time-in-6-lines-of-code/">realtime stuff</a></li>
</ul>

<p>If the state management of the component becomes a bit too complex and we don’t want to use a state management framework just yet, we could use a state reducer in the component itself.</p>

<h3 id="persisted-state">Persisted state</h3>

<p>Persisted state, is state that is being remembered when the user navigates between different pages. This could be whether a sidebar was collapsed or not, or when the user returns to a grid with a lot of filters and he wants them to be remembered and reapplied when he returns.
Another example is a wizard with different steps, and every step needs to be persisted so the user can navigate back and forth and the last page is a result of all these steps.</p>

<p>Persisted state is the type of state where we typically use a state management framework for, that being said, if we don’t want to rely on an external dependency we can also manage it in a Angular <code class="language-plaintext highlighter-rouge">service</code> which can be a singleton that is shared throughout the entire application. If that <code class="language-plaintext highlighter-rouge">service</code> becomes too complex or there is a lot of state to manage, I would consider to put that state into a state management framework.</p>

<h3 id="shared-state">Shared state</h3>

<p>When we are talking about shared state, we are talking about state that needs to be shared between different parts of our application. State that is being shared throughout different smart components. This means that the instance of this piece of state should live on a higher level, than the components that want to consume it.</p>

<p>Shared state can be managed in a state management framework like <a href="https://redux.js.org/">Redux</a>, <a href="https://ngrx.io">Ngrx</a>, <a href="https://netbasal.gitbook.io/akita/">Akita</a>, <a href="https://github.com/ngxs/store">Ngxs</a> and so on, but if that state is small and simple we can also manage it manually.
Let’s say that we want an <code class="language-plaintext highlighter-rouge">Observable</code> of an <code class="language-plaintext highlighter-rouge">Array</code> of countries that we need to share throughout the entire application. In Angular we could have a <code class="language-plaintext highlighter-rouge">CountryService</code> that fetches the countries from the API once, and then shares it throughout the entire application. 
For that we can use the <code class="language-plaintext highlighter-rouge">shareReplay</code> operator from RxJS.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">CountryService</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="nx">countries$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">httpClient</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">countries</span><span class="dl">'</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">shareReplay</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Simple right, one line of code?! For this we don’t <strong>need</strong> a state management framework, although it can also have its benefits.
Some developers like to keep all their master data in a <code class="language-plaintext highlighter-rouge">Redux</code> store, and that’s fine. Just know that we don’t have to.
I like to develop by the <strong>KISS</strong> principle (<strong>K</strong>eep <strong>I</strong>t <strong>S</strong>imple <strong>S</strong>tupid) as much as possible, so I favor this approach many times.
Think about the amount of lines of code we saved by this approach.
Beware that every line of code we write, not only needs to be written but also maintained.</p>

<h2 id="which-state-needs-to-be-managed">Which state needs to be managed?</h2>

<p>Now that we know what state is, we have to ask ourselves which state needs to be managed, and where do we manage that state? In a component, singleton service or a framework (Store)?</p>

<p>This is the part where the strong opinions surface.
I would suggest to use what works for you and your team and really think about, but here are  <strong>my personal opinionated</strong> guidelines:</p>

<ul>
  <li>I try to avoid state management frameworks where possible. RxJS already leverages us with a lot already and I like to think <strong>KISS</strong>.</li>
  <li>I try to avoid using state management frameworks to communicate with different parts in my application, I believe state is unrelated to communication.</li>
  <li>When my component can handle the state and it’s not too complex, I let my component in charge of managing that state.</li>
  <li>Master data like countries are exposed in a service which uses the <code class="language-plaintext highlighter-rouge">shareReplay</code> operator.</li>
  <li>I don’t put the result of a <code class="language-plaintext highlighter-rouge">getById</code> API call into a store if there is no one consuming that state except for the component requesting it</li>
  <li>I use a facade between my smart components and my store/services to make refactoring easier in the future.</li>
</ul>

<p>However, there is also a popular opinion out there to put literally everything in the store which has the following advantages:</p>

<ul>
  <li>We can see the flow of the code in devtools</li>
  <li>Consistent pattern</li>
  <li>We can leverage selectors with memoization</li>
  <li>Easier for realtime applications</li>
  <li>Optimistic updates are easier</li>
</ul>

<p>However, there are a few downsides as well:</p>

<ul>
  <li>A gigantic amount of bloat code: Bigger bundle size, more maintenance and dev time. Eg: If we would use the complete Ngrx pattern for the <code class="language-plaintext highlighter-rouge">countries$</code> example we would have to write an: <code class="language-plaintext highlighter-rouge">action</code>, <code class="language-plaintext highlighter-rouge">actiontype</code>, <code class="language-plaintext highlighter-rouge">effect</code> and a  <code class="language-plaintext highlighter-rouge">reducer</code>.</li>
  <li>Tightly coupled to a strong dependency that is hard to get rid of in the future</li>
  <li>Generally more complex</li>
  <li>The user his screen can get out of sync with the backend</li>
  <li>Cache invalidation: if we add a <code class="language-plaintext highlighter-rouge">currentUserToEdit</code> in the store, we have to get it out when we navigate away</li>
  <li>We can’t use the <code class="language-plaintext highlighter-rouge">async</code> pipe to cancel pending XHR requests</li>
  <li>We create a distributed monolith of some sort</li>
</ul>

<h2 id="wrapping-up">Wrapping up</h2>

<p>State management is a topic surrounded with discussions and opinions. There is no right or wrong, use what works for you and your team. There are awesome libraries out there, use them if it benefits you, but at least think about it before you use them. That’s the goal of this article after all, to get everyone to start thinking about state managment rather than jumping to the first solution.</p>

<h2 id="special-thanks">Special thanks</h2>

<p>Special thanks to the awesome reviewers:</p>

<ul>
  <li><a href="https://twitter.com/tim_deschryver">Tim Deschryver</a></li>
  <li><a href="https://twitter.com/jefiozie">Jeffrey Bosch</a></li>
  <li><a href="https://twitter.com/rubverm">Ruben Vermeulen</a></li>
</ul>]]></content><author><name>brechtbilliet</name></author><category term="brechtbilliet" /><category term="architecture" /><summary type="html"><![CDATA[About this article]]></summary></entry><entry><title type="html">A generic way of handling loading-status, saving-status and validation errors in Angular</title><link href="http://localhost:4000/generic-way-of-handling-loading-saving-and-validationerrors-in-angular/" rel="alternate" type="text/html" title="A generic way of handling loading-status, saving-status and validation errors in Angular" /><published>2019-01-25T00:00:00+01:00</published><updated>2019-01-25T00:00:00+01:00</updated><id>http://localhost:4000/generic-way-of-handling-loading-saving-and-validationerrors-in-angular</id><content type="html" xml:base="http://localhost:4000/generic-way-of-handling-loading-saving-and-validationerrors-in-angular/"><![CDATA[<p>When writing Angular applications there are always pieces of functionality that are being rewritten over and over again. 3 common usecases are:</p>

<ul>
  <li>Showing a <em>loading</em> status</li>
  <li>Showing an <em>acting</em> status (whether the user is adding, updating or removing data)</li>
  <li>Showing validation errors</li>
</ul>

<p>In this article we are going to implement a generic solution on how to fix these usecases.</p>

<h2 id="a-non-generic-way-of-loading-saving-and-handling-validation-errors-in-angular">A non generic way of loading, saving and handling validation errors in Angular</h2>

<p>Before we jump to the solution, let’s have a look at the impact of a non generic way of handling the previous called functionalities.
A solution that is often used might look like the following: (keep in mind that this functionality has to be implemented over and over again for every component)</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ngOnInit</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">loading</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">usersCompleted</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">citiesCompleted</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">userService</span><span class="p">.</span><span class="nx">fetch</span><span class="p">().</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">users</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">usersCompleted</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">loading</span> <span class="o">=</span> <span class="nx">usersCompleted</span> <span class="o">&amp;&amp;</span> <span class="nx">citiesCompleted</span><span class="p">;</span>
    <span class="p">});</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">citiesService</span><span class="p">.</span><span class="nx">fetch</span><span class="p">().</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">cities</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">citiesCompleted</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">loading</span> <span class="o">=</span> <span class="nx">usersCompleted</span> <span class="o">&amp;&amp;</span> <span class="nx">citiesCompleted</span><span class="p">;</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>
<p>We have to keep track of which call completes first because we can’t set loading to false, if there is call still busy. What happens when there is an error? We would have to implement that as well.</p>

<p>Now this code is only for fetching two lists of data, this becomes ugly pretty quickly and the worst thing about this is that we have to reimplement that for every component that does data fetching.</p>

<p>It becomes even worse if we want to update, add and remove data. Imagine that we have to handle validation errors as well:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">remove</span><span class="p">(</span><span class="nx">user</span><span class="p">:</span> <span class="nx">User</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="c1">// TODO: set acting to true</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">userService</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">user</span><span class="p">).</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// TODO: set acting to false</span>
    <span class="p">});</span>
<span class="p">}</span>
<span class="nx">update</span><span class="p">(</span><span class="nx">user</span><span class="p">:</span> <span class="nx">User</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="c1">// TODO: set acting to true</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">userService</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">user</span><span class="p">).</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// TODO: set acting to false</span>
        <span class="c1">// TODO: handle validation errors</span>
    <span class="p">});</span>
<span class="p">}</span>
<span class="nx">add</span><span class="p">(</span><span class="nx">user</span><span class="p">:</span> <span class="nx">User</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="c1">// TODO: set acting to true</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">userService</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">user</span><span class="p">).</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// TODO: set acting to false</span>
        <span class="c1">// TODO: handle validation errors</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>To handle validation errors we have to check if the HTTP status code is 400, manually map the data etc.</p>

<p>These code samples are in this article to prove a point. <strong>It’s dirty redundant logic that we have to implement over and over again</strong></p>

<h2 id="lets-clean-this-up">Let’s clean this up</h2>

<p>To achieve this we will use an Angular <em>service</em> in combination with an angular <em>interceptor</em> and Typescript <em>decorators</em>.</p>

<p>The first thing we need is a <code class="language-plaintext highlighter-rouge">HttpStatusService</code> that exposes 3 observables:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">loading$</code>: whether the user is fetching data</li>
  <li><code class="language-plaintext highlighter-rouge">acting$</code>: whether the user is removing, updating or adding data</li>
  <li><code class="language-plaintext highlighter-rouge">validationErrors$</code>: whether there are validation errors or not</li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// http-status.service.ts</span>
<span class="p">@</span><span class="nd">Injectable</span><span class="p">({</span>
  <span class="c1">// important to provide this service to the </span>
  <span class="c1">// injector of the root module </span>
  <span class="na">providedIn</span><span class="p">:</span> <span class="dl">'</span><span class="s1">root</span><span class="dl">'</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">HttpStatusService</span> <span class="p">{</span>
  <span class="c1">// regular subject because we don't want to replay</span>
  <span class="c1">// the validationerrors</span>
  <span class="k">private</span> <span class="nx">validationErrorsSub$</span> 
    <span class="o">=</span> <span class="k">new</span> <span class="nx">Subject</span><span class="o">&lt;</span><span class="nx">ValidationError</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">();</span>

  <span class="c1">// 2 subjects that replays the last value </span>
  <span class="c1">// (ideal for state)</span>
  <span class="k">private</span> <span class="nx">loadingSub$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReplaySubject</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">private</span> <span class="nx">actingSub$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReplaySubject</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

  <span class="c1">// we don't want to expose the subject for</span>
  <span class="c1">// encapsulation purposes. That's why we convert them</span>
  <span class="c1">// into observables</span>
  <span class="nx">getvalidationErrors$</span> <span class="o">=</span> 
    <span class="k">this</span><span class="p">.</span><span class="nx">validationErrorsSub$</span><span class="p">.</span><span class="nx">asObservable</span><span class="p">();</span>
  <span class="nx">loading$</span> <span class="o">=</span> 
    <span class="k">this</span><span class="p">.</span><span class="nx">loadingSub$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">distinctUntilChanged</span><span class="p">());</span>
  <span class="nx">acting$</span> <span class="o">=</span> 
    <span class="k">this</span><span class="p">.</span><span class="nx">actingSub$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">distinctUntilChanged</span><span class="p">());</span>

  <span class="c1">// these are just some regular setters to next </span>
  <span class="c1">// the values in our subjects</span>
  <span class="kd">set</span> <span class="nx">validationErrors</span><span class="p">(</span><span class="nx">errors</span><span class="p">:</span> <span class="nx">ValidationError</span><span class="p">[])</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">validationErrorsSub$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">errors</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">set</span> <span class="nx">loading</span><span class="p">(</span><span class="nx">val</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">loadingSub$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">set</span> <span class="nx">acting</span><span class="p">(</span><span class="nx">val</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">actingSub$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So we have a service that basically holds the state of our three statuses.
Now we still have to make sure that the setters of these observables are being called at the right place and the right time.
We don’t want to manually implement that for every call, so let’s create an interceptor for that.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Injectable</span><span class="p">({</span>
    <span class="na">providedIn</span><span class="p">:</span> <span class="dl">'</span><span class="s1">root</span><span class="dl">'</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">HttpStatusInterceptor</span> <span class="k">implements</span> <span class="nx">HttpInterceptor</span> <span class="p">{</span>
  <span class="c1">// keep track of the loading calls</span>
  <span class="k">private</span> <span class="nx">loadingCalls</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> 
  <span class="c1">// keep track of the acting calls</span>
  <span class="k">private</span> <span class="nx">actingCalls</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> 

  <span class="kd">constructor</span><span class="p">(</span>
    <span class="k">private</span> <span class="nx">httpStatusService</span><span class="p">:</span> <span class="nx">HttpStatusService</span>
  <span class="p">)</span> <span class="p">{}</span>

  <span class="k">private</span> <span class="nx">changeStatus</span><span class="p">(</span><span class="nx">val</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">,</span> <span class="nx">method</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">([</span><span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">PUT</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">DELETE</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">PATCH</span><span class="dl">'</span><span class="p">]</span>
      <span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">method</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">val</span> <span class="p">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">actingCalls</span><span class="o">++</span> <span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">actingCalls</span><span class="o">--</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">httpStatusService</span><span class="p">.</span><span class="nx">acting</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">actingCalls</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">method</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">val</span> <span class="p">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">loadingCalls</span><span class="o">++</span> <span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">loadingCalls</span><span class="o">--</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">httpStatusService</span><span class="p">.</span><span class="nx">loading</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">loadingCalls</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="p">...</span>
<span class="p">}</span>

</code></pre></div></div>

<p>As we can see, we have created a private <code class="language-plaintext highlighter-rouge">changeStatus()</code> function that will use the <code class="language-plaintext highlighter-rouge">loading</code> and <code class="language-plaintext highlighter-rouge">acting</code> 
setters of our <code class="language-plaintext highlighter-rouge">HttpStatusInterceptor</code> class.</p>

<p>If the HTTP-method is <code class="language-plaintext highlighter-rouge">POST</code>, <code class="language-plaintext highlighter-rouge">PUT</code>, <code class="language-plaintext highlighter-rouge">DELETE</code> or <code class="language-plaintext highlighter-rouge">PATCH</code> we have to update the counter of the <code class="language-plaintext highlighter-rouge">actingCalls</code> and if that count is bigger then 0, it means the user is acting and we have to update the <code class="language-plaintext highlighter-rouge">acting</code> property of the <code class="language-plaintext highlighter-rouge">HttpStatusService</code>.</p>

<p>If the HTTP-method is <code class="language-plaintext highlighter-rouge">GET</code> it should do the same for the <code class="language-plaintext highlighter-rouge">loadingCalls</code> property and <code class="language-plaintext highlighter-rouge">loading</code> setter of the <code class="language-plaintext highlighter-rouge">HttpStatusService</code>.</p>

<p>Of course we still have to implement the <code class="language-plaintext highlighter-rouge">intercept</code> function. Every time we intercept a call we have to change a status to <code class="language-plaintext highlighter-rouge">true</code>.
Because this means that the user is loading or acting.
The goal of an interceptor is to intercept a request, clone that request, do something with it and return it.
The <code class="language-plaintext highlighter-rouge">handle</code> function of the <code class="language-plaintext highlighter-rouge">HttpHandler</code> returns an observable. This is the perfect place to apply a <code class="language-plaintext highlighter-rouge">finalize</code> operator,
which we can use to set a status to <code class="language-plaintext highlighter-rouge">false</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="nx">intercept</span><span class="p">(</span>
  <span class="nx">req</span><span class="p">:</span> <span class="nx">HttpRequest</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">,</span>
  <span class="nx">next</span><span class="p">:</span> <span class="nx">HttpHandler</span>
<span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">HttpEvent</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
  <span class="c1">// there is a new request, so we are definitely</span>
  <span class="c1">// loading or acting, we have to change the status</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">changeStatus</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">method</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">next</span><span class="p">.</span><span class="nx">handle</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">clone</span><span class="p">()).</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="c1">// when the request completes, errors or times out,</span>
    <span class="c1">// we have to change the status as well</span>
    <span class="nx">finalize</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">changeStatus</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">method</span><span class="p">);</span>
    <span class="p">})</span>
  <span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<p>This should automatically update the <code class="language-plaintext highlighter-rouge">loading$</code> and <code class="language-plaintext highlighter-rouge">acting$</code> observables in the <code class="language-plaintext highlighter-rouge">HttpStatusService</code>.
However, we have not fixed our validation errors issue yet. For that we can use the <code class="language-plaintext highlighter-rouge">catchError</code> operator that we place before the finalize operator:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">intercept</span><span class="p">(</span>
  <span class="nx">req</span><span class="p">:</span> <span class="nx">HttpRequest</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">,</span>
  <span class="nx">next</span><span class="p">:</span> <span class="nx">HttpHandler</span>
<span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">HttpEvent</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
  <span class="p">..</span>
  <span class="k">return</span> <span class="nx">next</span><span class="p">.</span><span class="nx">handle</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">clone</span><span class="p">()).</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="c1">// catch the error</span>
    <span class="nx">catchError</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">// if bad request &gt; validation erors</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">400</span><span class="p">)</span> <span class="p">{</span> 
        <span class="c1">// use the validationErrors setter to update</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">httpStatusService</span><span class="p">.</span><span class="nx">validationErrors</span> <span class="o">=</span> 
          <span class="nx">e</span><span class="p">.</span><span class="nx">error</span><span class="p">.</span><span class="nx">validationErrors</span><span class="p">;</span>
        <span class="c1">// make sure that this result never </span>
        <span class="c1">// reaches the component</span>
        <span class="k">return</span> <span class="nx">NEVER</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="c1">// throw the error back</span>
      <span class="c1">// or put that in the `HttpStatusService` as well ;-)      </span>
      <span class="k">return</span> <span class="nx">throwError</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span> 
    <span class="p">}),</span>
    <span class="nx">finalize</span><span class="p">(...)</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The entire interceptor class looks like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Injectable</span><span class="p">({</span>
    <span class="na">providedIn</span><span class="p">:</span> <span class="dl">'</span><span class="s1">root</span><span class="dl">'</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">HttpStatusInterceptor</span> <span class="k">implements</span> <span class="nx">HttpInterceptor</span> <span class="p">{</span>
  <span class="k">private</span> <span class="nx">loadingCalls</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> 
  <span class="k">private</span> <span class="nx">actingCalls</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> 

  <span class="kd">constructor</span><span class="p">(</span>
    <span class="k">private</span> <span class="nx">httpStatusService</span><span class="p">:</span> <span class="nx">HttpStatusService</span>
  <span class="p">)</span> <span class="p">{}</span>

  <span class="k">private</span> <span class="nx">changeStatus</span><span class="p">(</span><span class="nx">v</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">,</span> <span class="nx">method</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">([</span><span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">PUT</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">DELETE</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">PATCH</span><span class="dl">'</span><span class="p">]</span>
      <span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">method</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">v</span> <span class="p">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">actingCalls</span><span class="o">++</span> <span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">actingCalls</span><span class="o">--</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">httpStatusService</span><span class="p">.</span><span class="nx">acting</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">actingCalls</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">method</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">v</span> <span class="p">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">loadingCalls</span><span class="o">++</span> <span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">loadingCalls</span><span class="o">--</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">httpStatusService</span><span class="p">.</span><span class="nx">loading</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">loadingCalls</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">intercept</span><span class="p">(</span>
    <span class="nx">req</span><span class="p">:</span> <span class="nx">HttpRequest</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="nx">next</span><span class="p">:</span> <span class="nx">HttpHandler</span>
  <span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">HttpEvent</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">next</span><span class="p">.</span><span class="nx">handle</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">clone</span><span class="p">()).</span><span class="nx">pipe</span><span class="p">(</span>
      <span class="nx">catchError</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">400</span><span class="p">)</span> <span class="p">{</span> 
          <span class="k">this</span><span class="p">.</span><span class="nx">httpStatusService</span><span class="p">.</span><span class="nx">validationErrors</span> <span class="o">=</span> 
            <span class="nx">e</span><span class="p">.</span><span class="nx">error</span><span class="p">.</span><span class="nx">validationErrors</span><span class="p">;</span>
          <span class="k">return</span> <span class="nx">NEVER</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">throwError</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span> 
      <span class="p">}),</span>
      <span class="nx">finalize</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">changeStatus</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">method</span><span class="p">);</span>
      <span class="p">})</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>When registering the interceptor to the root module, the observables in the <code class="language-plaintext highlighter-rouge">HttpStatusService</code> will be updated automatically.</p>

<p>So in the rootModule we have to add the following code to the <code class="language-plaintext highlighter-rouge">providers</code> property of the <code class="language-plaintext highlighter-rouge">@NgModule</code> decorator:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">providers</span><span class="p">:</span> <span class="p">[</span>
  <span class="p">...</span>
  <span class="p">{</span>
    <span class="nl">provide</span><span class="p">:</span> <span class="nx">HTTP_INTERCEPTORS</span><span class="p">,</span>
    <span class="nx">multi</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nx">deps</span><span class="p">:</span> <span class="p">[</span><span class="nx">HttpStatusService</span><span class="p">],</span>
    <span class="nx">useClass</span><span class="p">:</span> <span class="nx">HttpStatusInterceptor</span>
  <span class="p">}</span>
<span class="p">]</span>
</code></pre></div></div>

<p>We can now use the <code class="language-plaintext highlighter-rouge">HttpStatusService</code> in our code as easy as this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">UserComponent</span> <span class="p">{</span>
  <span class="nx">loading$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">httpStatus</span><span class="p">.</span><span class="nx">loading</span><span class="p">;</span>
  <span class="nx">validationErrors$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">httpStatus</span><span class="p">.</span><span class="nx">validationErrors</span><span class="p">;</span>
  <span class="nx">acting$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">httpStatus</span><span class="p">.</span><span class="nx">loading</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span>
    <span class="k">private</span> <span class="nx">httpStatusService</span><span class="p">:</span> <span class="nx">HttpStatusService</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We now have 3 observables that can easily be consumed in the template of the component with the use of the <a href="https://angular.io/api/common/AsyncPipe">async</a> pipe. Here is an example:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;my-spinner</span> <span class="na">*ngIf=</span><span class="s">"loading$ | async"</span><span class="nt">&gt;&lt;/my-spinner&gt;</span>
<span class="nt">&lt;my-user-form</span> 
    <span class="na">[validationErrors]=</span><span class="s">"validationErrors$ | async"</span>
    <span class="na">[disabled]=</span><span class="s">"acting$ | async"</span><span class="nt">&gt;&lt;/my-user-form&gt;</span>

</code></pre></div></div>

<h2 id="optimizing-with-decorators">Optimizing with decorators</h2>

<p>We have cleaned up a lot, we found an easy way to get the httpstatuses to the component, but we can make it even simpler with the use of decorators. let’s refactor the <code class="language-plaintext highlighter-rouge">UserComponent</code> class accordingly:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">UserComponent</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">Loading</span><span class="p">()</span><span class="nx">loading$</span><span class="p">;</span>
  <span class="p">@</span><span class="nd">ValidationErrors</span><span class="p">()</span> <span class="nx">validationErrors$</span><span class="p">;</span>
  <span class="p">@</span><span class="nd">Acting</span><span class="p">()</span> <span class="nx">acting$</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is very declarative way of working. The component is way cleaner and we don’t have to inject the <code class="language-plaintext highlighter-rouge">HttpStatusService</code> anymore.</p>

<p>But how do we create these decorators? I’m glad you asked, it’s pretty easy. A property decorator is simply a function that returns a function that gets the target and key as arguments.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">function</span> <span class="nx">Loading</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="nx">key</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="c1">// in this case the target is the component</span>
    <span class="c1">// instance and key the property name</span>
    <span class="c1">// target: userComponent, key: loading$</span>
    <span class="c1">// now we have to set the property to the actual </span>
    <span class="c1">// loading$ observable that lives in the HttpStatusService</span>
    <span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="c1">// todo</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>To set the property of the target we need to inject the <code class="language-plaintext highlighter-rouge">HttpStatusService</code> instance that is registered on the root injector of our application. After all that’s the instance that contains the actual state. Currently there is no easy way to do that.
Until Angular provides us with functionality like <a href="https://github.com/angular/angular/issues/23301">that</a> we can use the following solution:</p>

<p>Next to the <code class="language-plaintext highlighter-rouge">http-status.service</code> file, create a file called <code class="language-plaintext highlighter-rouge">root-injector.ts</code> and add the following code:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Injector</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">let</span> <span class="nx">rootInjector</span><span class="p">:</span> <span class="nx">Injector</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">setRootInjector</span><span class="p">(</span><span class="nx">injector</span><span class="p">:</span> <span class="nx">Injector</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
  <span class="nx">rootInjector</span> <span class="o">=</span> <span class="nx">injector</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">setRootInjector()</code> function will be used by the rootModule to set the <code class="language-plaintext highlighter-rouge">rootInjector</code> variable that we expose here.
To make it work the rootModule will have to call the <code class="language-plaintext highlighter-rouge">setRootInjector()</code> function like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">NgModule</span><span class="p">({</span>
    <span class="p">...</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppModule</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">injector</span><span class="p">:</span> <span class="nx">Injector</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">setRootInjector</span><span class="p">(</span><span class="nx">injector</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>The last step is to actually use the <code class="language-plaintext highlighter-rouge">rootInjector</code> variable inside the decorators. The result looks like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// loading.decorator.ts</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">Loading</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="nx">key</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">service</span> <span class="o">=</span> <span class="nx">rootInjector</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">HttpStatusService</span><span class="p">);</span>
    <span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">service</span><span class="p">.</span><span class="nx">loading$</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// acting.decorator.ts</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">Acting</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="nx">key</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">service</span> <span class="o">=</span> <span class="nx">rootInjector</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">HttpStatusService</span><span class="p">);</span>
    <span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">service</span><span class="p">.</span><span class="nx">acting$</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// validation-errors.decorator.ts</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">ValidationErrors</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="nx">key</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">service</span> <span class="o">=</span> <span class="nx">rootInjector</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">HttpStatusService</span><span class="p">);</span>
    <span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">service</span><span class="p">.</span><span class="nx">validationErrors$</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>We have learned that we can remove the redundancy that comes with loading, acting and error handling statuses almost completely by the use of an interceptor, a simple service and a few decorators.</p>

<p>I hope you liked it!</p>

<h2 id="special-thanks">Special thanks</h2>

<p>A very special thanks to the reviewers:</p>

<ul>
  <li><a href="https://twitter.com/bobrov1989">Vitallii Bobrov (@bobrov1989)</a></li>
  <li><a href="https://twitter.com/webdave_de">David Müllerchen (@webdave_de)</a></li>
  <li><a href="https://twitter.com/maartentibau">Maarten Tibau (@maartentibau)</a></li>
  <li><a href="https://twitter.com/elmd_">Dominic Elm (@elmd_)</a></li>
  <li><a href="https://twitter.com/fabiangosebrink">Fabian Gosebrink (@FabianGosebrink)</a></li>
</ul>]]></content><author><name>brechtbilliet</name></author><category term="angular" /><category term="Angular" /><category term="Architecture" /><category term="errorhandling" /><category term="interceptors" /><category term="decorators" /><summary type="html"><![CDATA[In this article we are going to implement a generic solution on how to fix 3 common usecases that involve redundancy in CRUD applications.]]></summary></entry><entry><title type="html">Opinionated guidelines for large nx angular projects</title><link href="http://localhost:4000/opinionated-guidelines-for-large-nx-angular-projects/" rel="alternate" type="text/html" title="Opinionated guidelines for large nx angular projects" /><published>2018-12-08T00:00:00+01:00</published><updated>2018-12-08T00:00:00+01:00</updated><id>http://localhost:4000/opinionated-guidelines-for-large-nx-angular-projects</id><content type="html" xml:base="http://localhost:4000/opinionated-guidelines-for-large-nx-angular-projects/"><![CDATA[<h2 id="about-this-article">About this article</h2>

<p>This article contains a set of opinionated guidelines when it comes to building monorepos with <a href="https://nrwl.io/nx">Nx</a>.
I wrote this article because when I used Nx in the beginning, I struggled a lot with how to structure my workspace, and I’ve hit quite a few walls. That being said, I’ve been using it for a while now, and I finally have the feeling that I’ve reached a structure where I feel comfortable with.</p>

<h2 id="a-word-about-nx">A word about Nx</h2>

<p>Nx is a thin layer on top of the <a href="https://angular.io">Angular</a> CLI that helps us with structuring large applications in the form of monorepos.
A monorepo contains only one <a href="https://nrwl.io/nx/guide-nx-workspace">Nx workspace</a> that can contain multiple apps and multiple libs (we will refer to apps and libs as Nx projects). An app is a deployable unit and a lib is meant to contain the actual logic that can be shared across the workspace. Nx is actively being developed and updated along with Angular by the amazing people of <a href="https://nrwl.io/">Nrwl</a>.</p>

<p>Nx is especially valuable when managing <strong>big Angular applications</strong> that have a lot of shared functionality, but even in smaller projects it can help organize your approach.</p>

<p>At StrongBrew we are using this technology for a bunch of our clients and even though Nx is already pretty opinionated, I decided to write down some best practices and guidelines that I try to take in consideration.</p>

<p>The rules and guidelines written down in this article <strong>might work for you</strong>, and should in no circumstances be treated as the <em>ultimate truth</em>. Best practices and guidelines are mostly a matter of perception and personal preference. Nevertheless, I would love to share how I architect large Angular applications with Nx.</p>

<h2 id="barrel-files">Barrel files</h2>

<p>When it comes to managing monorepos, barrel files are quite important.
A barrel file is a <code class="language-plaintext highlighter-rouge">index.ts</code> file that lives in the <code class="language-plaintext highlighter-rouge">src</code> directory of every Nx lib and is meant to expose logic to the rest of the workspace.</p>

<p>This file is really important when you understand one of the big potential risks of organizing code in monorepos - overexposure of implementation details.</p>

<p>With code being located right next to each other, it can be easy to import code with deeply nested relative paths and include things that the original author of the code never intended to be used outside of their specific context.</p>

<p>The Nx lib’s <code class="language-plaintext highlighter-rouge">index.ts</code> file allows each lib to define its effective public API - only symbols which are explicitly exported from this file should be eligible for consumption in other parts of the workspace.</p>

<p>Let’s say that we have a <code class="language-plaintext highlighter-rouge">@strongbrew/users</code> lib which exposes a <code class="language-plaintext highlighter-rouge">UserService</code>…
This is what the barrel file from  <code class="language-plaintext highlighter-rouge">@strongbrew/users</code> might look like.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// libs/users/src/index.ts</span>
<span class="k">export</span> <span class="o">*</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./lib/services/user.service</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p>Although this might seem pretty straight forward, let’s go over a few best-practices…</p>

<h3 id="dont-ever-import-a-lib-from-a-relative-path">Don’t ever import a lib from a relative path</h3>

<p>When we want to import <code class="language-plaintext highlighter-rouge">UserService</code> inside another lib or app, we want to import it from <code class="language-plaintext highlighter-rouge">@strongbrew/users</code>. This is way cleaner then importing it from a relative path like <code class="language-plaintext highlighter-rouge">../../../users/lib/src/index.ts</code> and helps protect us from the overexposure problem described above. Nx also provides a linting rule out of the box to make sure that you are respecting a lib’s API and not doing deep imports.</p>

<p>Nx uses TypeScript <a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping">path mapping</a> to map these module names to the correct barrel files.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"paths"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"@strongbrew/users"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="s2">"libs/users/src/index.ts"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="only-1-barrel-file-per-lib">Only 1 barrel file per lib</h3>

<p>It’s a known fact that barrel files might become big, but it gives us a central place of handling all the exports + it drastically reduces the chance of getting circular reference errors. Therefore, a lib should only contain 1 single barrel file.</p>

<h3 id="never-let-a-lib-import-from-its-own-barrel-file">Never let a lib import from its own Barrel file</h3>

<p>The TypeScript modules within a particular lib should not care what functionality that lib exposes, so it shouldn’t use its own barrel file at any point.</p>

<p>If a module imports something from its own barrel file, it almost always results in circular reference errors. Therefore, imports from inside of the module should use relative path imports.</p>

<h2 id="structuring-the-workspace">Structuring the workspace</h2>

<p>When using Nx, we might already get pushed in an opinionated way of working, which is great. But how are we going to structure the workspace itself? For instance, looking into a directory of 100 libs inside of a libs directory might not really be pragmatic to work with…</p>

<h3 id="structuring-apps">Structuring apps</h3>

<h4 id="an-app-should-be-an-empty-shell">An app should be an empty shell</h4>

<p>Apps are deployable units that wire the different pieces of an application together. These apps are nearly empty shells that use libs to build an entire application. Therefore <strong>an app holds almost no logic</strong> and mostly uses lazy loading to load feature libs. Some feature libs can be seen as microfrontends.
That being said, our apps mostly not completely empty. In general they also contain:</p>
<ul>
  <li>The general layout (composed out of components from ‘ui-kit’)</li>
  <li>Routing</li>
</ul>

<h4 id="keep-the-apps-directory-as-flat-as-possible">Keep the apps directory as flat as possible</h4>

<p>Chances are small that our monorepo will contain 100+ apps and even if it does, chances are small that we can divide these apps into categories.</p>

<h4 id="apps-should-not-import-from-other-apps">Apps should not import from other apps</h4>

<p>Although it might seem obvious, let’s mention it anyway… Shared logic should always live inside of libs, an not inside of apps. Apps are specific deployment targets.</p>

<h3 id="structuring-libs">Structuring libs</h3>

<p>Here comes the opinionated part, lets check how we can structure the libs inside of our workspace.</p>

<p>The directory structure of our workspace might look like this:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">apps</code></li>
  <li><code class="language-plaintext highlighter-rouge">libs</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">feature</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">api</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">foo</code></li>
              <li>…</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">lazy</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">bar</code></li>
              <li>…</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">shared</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">baz</code></li>
              <li>…</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">ui-kit</code></li>
      <li><code class="language-plaintext highlighter-rouge">utils</code></li>
    </ul>
  </li>
  <li>A feature contains logic specific to a certain domain, like managing users or performing authentication.</li>
  <li>On the other hand, the <code class="language-plaintext highlighter-rouge">utils</code> lib contains logic that doesn’t have anything to do with any domain, E.g: HTTP interceptors, shared RxJS operators, a service that handles notifications etc… Consider it a toolkit for your workspace.</li>
</ul>

<p>In the next few sections we are going to cover the 3 types of feature libs, the <code class="language-plaintext highlighter-rouge">ui-kit</code> lib and the <code class="language-plaintext highlighter-rouge">utils</code> lib.</p>

<h4 id="featureapi">feature/api</h4>

<p>This directory contains Nx libs with a very specific purpose:</p>
<ul>
  <li>These libs contain <strong>api logic</strong> or <strong>business logic</strong> that needs to be shared.</li>
  <li>These libs contain the types of the REST responses. Let’s call them <strong>domain types</strong>.</li>
  <li>If we want to work with models, or dto’s, these would also live here.</li>
</ul>

<p>Having a specific api lib is very handy when developing in a microservices platform. Every microservice would have its own <strong>api lib</strong> that can be used throughout the entire monorepo.</p>

<p>Another common use-case is that feature libs tend to use domain types from other feature libs. By extracting these domain types in to api libs, we solve that problem. That way, these domain types can be shared across different places inside of the monorepo.</p>

<h4 id="featurelazy">feature/lazy</h4>

<p>This directory contains all feature libs that can be lazyloaded. To make sure these libs can be lazy-loaded, they should expose an <code class="language-plaintext highlighter-rouge">NgModule</code> in the barrel file and are loaded as such:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">RouterModule</span><span class="p">.</span><span class="nx">forRoot</span><span class="p">([</span>
    <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">users</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">loadChildren</span><span class="p">:</span> <span class="dl">'</span><span class="s1">@strongbrew/feature/lazy/users</span><span class="dl">'</span>
    <span class="p">}</span>
<span class="p">])</span>
</code></pre></div></div>

<p>One of the advantages is that these modules can be loaded on demand or even preloaded upfront. The biggest advantage though is that these modules are completely standalone, and don’t share anything with the rest of the workspace. This means they have nothing inside of their barrel file, other then the <code class="language-plaintext highlighter-rouge">NgModule</code> being exported. 
<strong>Lazy loaded modules can never share logic with the workspace</strong>
If we feel that a lazyloaded module needs to export something, we should extract that logic into a separate <code class="language-plaintext highlighter-rouge">feature/shared</code> or <code class="language-plaintext highlighter-rouge">feature/api</code> lib.</p>

<p>When a <code class="language-plaintext highlighter-rouge">feature/lazy</code> module needs to perform XHR calls it should delegate it to a <code class="language-plaintext highlighter-rouge">feature/api</code> lib. Therefore a <code class="language-plaintext highlighter-rouge">feature/lazy</code> lib should never contain api logic.</p>

<p>When using a statemanagement library like <a href="https://github.com/ngrx/platform">ngrx/store</a>, <code class="language-plaintext highlighter-rouge">feature/lazy</code> libs would contain their own reducers and use <code class="language-plaintext highlighter-rouge">store.forFeature()</code> to attach these to the <code class="language-plaintext highlighter-rouge">store</code> instance. This would result in lazy-loaded reducers.</p>

<h4 id="featureshared">feature/shared</h4>

<p>Not every feature can be lazyloaded. Think about feature logic that needs to be shared for instance. In that case we would create an Nx lib that lives inside of the <code class="language-plaintext highlighter-rouge">feature/shared</code> directory.</p>

<p>When a <code class="language-plaintext highlighter-rouge">feature/shared</code> module needs to perform XHR calls it should delegate it to a <code class="language-plaintext highlighter-rouge">feature/api</code> lib. Therefore the <code class="language-plaintext highlighter-rouge">feature/lazy</code> lib should not contain api logic.</p>

<h4 id="ui-kit">ui-kit</h4>

<p>This lib contains all the shared presentational components that can be used in different applications. Think about dropdowns, datepickers and empty modals. A <code class="language-plaintext highlighter-rouge">user-detail</code> component for instance does NOT belong here. A monorepo can contain multiple <code class="language-plaintext highlighter-rouge">ui-kit</code> libraries. We should name them according to its purpose. E.g <code class="language-plaintext highlighter-rouge">ui-kit-mobile</code> is a common use case.</p>

<p>The Ui-kit module contains an <code class="language-plaintext highlighter-rouge">ngModule</code> since we need it to declare and export our components/directives. The barrel file generally only exposes the <code class="language-plaintext highlighter-rouge">ngModule</code> since this is the vessel used to export the functionality.</p>

<p>However, a <code class="language-plaintext highlighter-rouge">ui-kit</code> might also export certain types in its barrel file… Like <code class="language-plaintext highlighter-rouge">DatepickerConfiguration</code> or other <code class="language-plaintext highlighter-rouge">ui-kit</code> specific types.</p>

<h4 id="utils">utils</h4>

<p>This lib can contain all kinds of utilities. It could contain shared interceptors, guards, services and custom RxJS operators. Think about it als a framework toolbox that could benefit any application. We will NOT use an <code class="language-plaintext highlighter-rouge">ngModule</code> here for tree-shaking purposes.</p>

<p>A <code class="language-plaintext highlighter-rouge">utils</code> lib will not contain any components. But if it contains pipes or directives we might need an <code class="language-plaintext highlighter-rouge">ngModule</code> for that.</p>

<p>When your workspace is small, one single <code class="language-plaintext highlighter-rouge">utils</code> lib might suffice, but it could become a good idea to split these up when the <code class="language-plaintext highlighter-rouge">utils</code> lib gets to big.</p>

<p>After splitting up, the directory structure of our workspace might look like this:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">apps</code></li>
  <li><code class="language-plaintext highlighter-rouge">libs</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">feature</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">api</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">foo</code></li>
              <li>…</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">lazy</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">bar</code></li>
              <li>…</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">shared</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">baz</code></li>
              <li>…</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">ui-kit</code></li>
      <li><code class="language-plaintext highlighter-rouge">utils</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">rxjs-operators</code></li>
          <li><code class="language-plaintext highlighter-rouge">forms</code></li>
          <li><code class="language-plaintext highlighter-rouge">http</code></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>Do note, that the <code class="language-plaintext highlighter-rouge">forms</code> lib would not contain any forms or forms configuration, but it would contain general form logic that can be shared across the workspace.</p>

<h3 id="prefixing-libs">Prefixing libs</h3>

<p>Because of the fact that <code class="language-plaintext highlighter-rouge">selector</code> names for components and directives should be unique, prefixing them in a monorepo is quite important. 
Since every project in the <code class="language-plaintext highlighter-rouge">angular.json</code> file has a <code class="language-plaintext highlighter-rouge">prefix</code> property, we could set that prefix for every project.</p>

<p>Let’s assume that we need a <code class="language-plaintext highlighter-rouge">feature/shared</code> lib called <code class="language-plaintext highlighter-rouge">messages</code> then we could generate that lib by running <code class="language-plaintext highlighter-rouge">ng g lib messages --prefix sh-mes</code> for instance. 
<code class="language-plaintext highlighter-rouge">sh-mes</code> would be the prefix and if we create a message component in this lib it would have the selector: <code class="language-plaintext highlighter-rouge">sh-mes-message</code>.</p>

<h2 id="linting-and-tags">Linting and tags</h2>

<p>One thing that is absolutely critical when managing a monorepo is being able to determine, categorize, and constrain/run commands based on a dependency graph.</p>

<p>Nx determines the dependency graph for us out of the box, it infers it by statically analyzing our TypeScript import and export statements (as well as a few other things specific to the Angular CLI).</p>

<p>It has no way of automatically categorizing the dependency graph for it, because that is up to our subjective judgement, but it does provide helpers to make it easy.</p>

<p>Nx provides us with the ability to add tags to the different libs and apps and apply <a href="https://palantir.github.io/tslint/">tslint</a> rules to make sure we can’t import whatever we want wherever we want.	Nx provides us with the ability to add tags to the different libs and apps and apply <a href="https://palantir.github.io/tslint/">tslint</a> rules to make sure we can’t import whatever we want wherever we want (potentially leading to circular references and other problems (broken lazyloading, etc…)).</p>

<p>Tags can be added to projects in the <code class="language-plaintext highlighter-rouge">nx.json</code> file of the root directory.
Tags can be determined in numerous ways. Some of us might like a tag per team, other might like it per domain.</p>

<p>I like to have tags for every lib type. It might be opinionated but it works fine for me (again, that’s a matter of personal preference)</p>

<p>We define 5 types of tags:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">app</code>: This tag is added to all the apps</li>
  <li><code class="language-plaintext highlighter-rouge">shared</code>: This tag is added to <code class="language-plaintext highlighter-rouge">uikit</code> and <code class="language-plaintext highlighter-rouge">utils</code> libs</li>
  <li><code class="language-plaintext highlighter-rouge">feature:lazy</code>: This tag is added to <code class="language-plaintext highlighter-rouge">feature/lazy</code> libs</li>
  <li><code class="language-plaintext highlighter-rouge">feature:shared</code>: This tag is added to <code class="language-plaintext highlighter-rouge">feature/shared</code> libs</li>
  <li><code class="language-plaintext highlighter-rouge">feature:api</code>: This tag is added to <code class="language-plaintext highlighter-rouge">feature/api</code> libs</li>
</ul>

<p>The rules could be the same for every workspace that we will create in the future:</p>

<ul>
  <li>Projects with the type <code class="language-plaintext highlighter-rouge">tag</code> can only depend on projects with the tags: <code class="language-plaintext highlighter-rouge">shared</code> or <code class="language-plaintext highlighter-rouge">feature:shared</code>.</li>
  <li>Projects with the type <code class="language-plaintext highlighter-rouge">shared</code> can only depend on projects with the tags: <code class="language-plaintext highlighter-rouge">shared</code> (we don’t want to import domain specific logic in there do we?)</li>
  <li>Projects with the type <code class="language-plaintext highlighter-rouge">feature:lazy</code> can only depend on projects with the tags: <code class="language-plaintext highlighter-rouge">shared</code>, <code class="language-plaintext highlighter-rouge">feature:shared</code> and <code class="language-plaintext highlighter-rouge">feature:api</code>.</li>
  <li>Projects with the type: <code class="language-plaintext highlighter-rouge">feature:shared</code> can only depend on projects with the tags: <code class="language-plaintext highlighter-rouge">shared</code> and <code class="language-plaintext highlighter-rouge">feature:api</code>.</li>
  <li>Projects with the type: <code class="language-plaintext highlighter-rouge">feature:api</code> can only depend on projects with the tags: <code class="language-plaintext highlighter-rouge">feature:api</code> and <code class="language-plaintext highlighter-rouge">shared</code>. (we never want to load <code class="language-plaintext highlighter-rouge">feature:shared</code> into an feature/api lib right?)</li>
</ul>

<h3 id="configuring-tslint">Configuring tslint</h3>

<p>To configure the tslint we have to use the <code class="language-plaintext highlighter-rouge">nx-enforce-module-boundaries</code> rule from tslint. If you like the rules defined above, you can just copy-paste the module boundaries defined below right in your <code class="language-plaintext highlighter-rouge">tslint.json</code> file that lives in the root directory.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"nx-enforce-module-boundaries"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
  </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"allow"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
      </span><span class="nl">"depConstraints"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"sourceTag"</span><span class="p">:</span><span class="w"> </span><span class="s2">"app"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"onlyDependOnLibsWithTags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"shared"</span><span class="p">,</span><span class="w"> </span><span class="s2">"feature:shared"</span><span class="p">]</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"sourceTag"</span><span class="p">:</span><span class="w"> </span><span class="s2">"shared"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"onlyDependOnLibsWithTags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"shared"</span><span class="p">]</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"sourceTag"</span><span class="p">:</span><span class="w"> </span><span class="s2">"feature:lazy"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"onlyDependOnLibsWithTags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
          </span><span class="s2">"shared"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"feature:shared"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"feature:api"</span><span class="w">
        </span><span class="p">]</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"sourceTag"</span><span class="p">:</span><span class="w"> </span><span class="s2">"feature:api"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"onlyDependOnLibsWithTags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"feature:api"</span><span class="p">,</span><span class="w"> </span><span class="s2">"shared"</span><span class="p">]</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"sourceTag"</span><span class="p">:</span><span class="w"> </span><span class="s2">"feature:shared"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"onlyDependOnLibsWithTags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"shared"</span><span class="p">,</span><span class="w"> </span><span class="s2">"feature:api"</span><span class="p">]</span><span class="w">
      </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p>This tslint config will ensure that the rules defined above are mandatory.</p>

<h2 id="is-this-structure-the-only-way">Is this structure the only way?</h2>

<p>No, not at all, this would work perfectly for a monorepo with 5 applications. But if we are thinking about organisation wide monorepos, it might be a good idea to
combine features app per app. In that case we would have something like:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">apps</code></li>
  <li><code class="language-plaintext highlighter-rouge">libs</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">app1</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">api</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">foo</code></li>
              <li>…</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">lazy</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">bar</code></li>
              <li>…</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">shared</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">baz</code></li>
              <li>…</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">app2</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">api</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">foo</code></li>
              <li>…</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">lazy</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">bar</code></li>
              <li>…</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">shared</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">baz</code></li>
              <li>…</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">ui-kit</code></li>
      <li><code class="language-plaintext highlighter-rouge">utils</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">rxjs-operators</code></li>
          <li><code class="language-plaintext highlighter-rouge">forms</code></li>
          <li><code class="language-plaintext highlighter-rouge">http</code></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="how-to-share-code-organisation-wide">How to share code organisation wide?</h2>

<p>Although an organisation wide monorepo has great benefits, they might be good reasons not to do it. These could be any combination of technical, cultural, legal or other reasons.</p>

<h3 id="scenario-a">Scenario A</h3>

<p>Our company has 10 angular projects that are actively developed and share a lot of code, but also had 5 legacy projects where there is no budget to bump them to the new Angular versions and so on. There might be a few <a href="https://vuejs.org/">Vue.js</a> or <a href="https://reactjs.org/">React</a> living there as well. It might be more trouble than it is worth for your organization to manage that complexity within one big workspace. In that case we could have a workspace for the non-legacy angular projects, and that workspace would gladly welcome new projects in the future.</p>

<h3 id="scenario-b">Scenario B</h3>

<p>Our company sells custom software to different clients. Every client wants its own custom look and feel, which a lot of custom logic, but we don’t want to reinvent the wheel every time.</p>

<p>In that case, we could create an Nx worspace for every client, and have one common toolkit that contains shared logic. That toolkit would live in its own monorepo and be published as an Angular package.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hope we learned something today. How we structure our workspaces is completely up to us, and we should use something that works for us, not just pick whatever you read in some blog article ;-). If this structure doesn’t make sense to you, that’s perfectly fine… And I would love to hear your thoughts about this approach.</p>

<h2 id="special-thanks-to">Special thanks to</h2>

<p>Thanks to the people that have reviewed the article and gave great input!
I couldn’t have done it without you!</p>

<ul>
  <li><a href="https://twitter.com/beeman_nl">@beeman_nl</a></li>
  <li><a href="https://twitter.com/mrjameshenry">@MrJamesHenry</a></li>
</ul>]]></content><author><name>brechtbilliet</name></author><category term="brechtbilliet" /><category term="Angular" /><category term="nx" /><category term="architecture" /><summary type="html"><![CDATA[About this article]]></summary></entry><entry><title type="html">Safe HTTP calls with RxJS</title><link href="http://localhost:4000/safe-http-calls-with-rxjs/" rel="alternate" type="text/html" title="Safe HTTP calls with RxJS" /><published>2018-10-24T00:00:00+02:00</published><updated>2018-10-24T00:00:00+02:00</updated><id>http://localhost:4000/safe-http-calls-with-rxjs</id><content type="html" xml:base="http://localhost:4000/safe-http-calls-with-rxjs/"><![CDATA[<p>Hi there, since it’s very busy lately this will probably be my one of my shortest articles ever.
Maybe that’s a good thing, because now you don’t have an excuse not to read it. It’s short, compact
and maybe you will learn a thing or two.</p>

<h2 id="the-problem">The problem</h2>

<p>The article is all about making sure our HTTP calls don’t die on bad connections, since strangely enough, <strong>404 responses can kill your application when using RxJS</strong>.</p>

<p>Remember that RxJS observables have 3 types of events right?</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">next</code>: passing in a new value into the observable</li>
  <li><code class="language-plaintext highlighter-rouge">error</code>: when an error occurs</li>
  <li><code class="language-plaintext highlighter-rouge">complete</code>: When the observable is completed</li>
</ul>

<p>We should not forget that <strong>an Error event will actually stop the observable</strong>. It will cease to exist.</p>

<p>You might say: “That’s not that bad, we’ll just create a new one every time we want to fetch data”.</p>

<p>When you are approaching your application the <em>reactive way</em>, this scenario might be problematic:
Imagine a typeahead search where we want to retrieve results for every input value. We have an observable of searchterms and we trigger the
HTTP request for every value using a <code class="language-plaintext highlighter-rouge">switchMap</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// this observable contains the values</span>
<span class="c1">// of what the user is searching for</span>
<span class="c1">// over time</span>
<span class="kd">const</span> <span class="nx">searchTerm$</span><span class="p">:</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">;</span>

<span class="c1">// when the term receives a new value...</span>
<span class="c1">// go fetch some data</span>
<span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">searchTerm$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> <span class="nx">fetchData</span><span class="p">(</span><span class="nx">term</span><span class="p">))</span>
<span class="p">)</span>

<span class="c1">// subscribe to the observable to start listening</span>
<span class="nx">results$</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">((</span><span class="nx">response</span><span class="p">:</span> <span class="nx">Result</span><span class="p">[])</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
<span class="p">})</span>
</code></pre></div></div>
<p>This all works fine, until an error happens in the observable. This could come from a bad connection, server down-time or anything that went wrong during the HTTP request (500, 404, …) 
If the user is having a bad connection which might result in a <code class="language-plaintext highlighter-rouge">404</code>, the observable will stop and the application will be broken. The user can search for results as much as he or she wants, the HTTP calls will never happen again.</p>

<h2 id="catcherror">catchError</h2>

<p>We could use the <code class="language-plaintext highlighter-rouge">catchError</code> operator that will basically catch the error for us, and return a brand new observable(containing the error).
That observable will have the error as a value, instead of throwing it again as an error.
That way we could actually show the user a decent message.
This might look something like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">searchTerm$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> 
        <span class="nx">fetchData</span><span class="p">(</span><span class="nx">term</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span>
            <span class="c1">// return an observable with the error inside</span>
            <span class="nx">catchError</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="k">of</span><span class="p">(</span><span class="nx">e</span><span class="p">))</span>
        <span class="p">)</span>
    <span class="p">)</span>
<span class="p">)</span>
<span class="nx">results$</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">response</span><span class="p">:</span> <span class="nx">Result</span><span class="p">[]</span> <span class="o">|</span> <span class="nx">HttpErrorResponse</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">response</span> <span class="k">instanceof</span> <span class="nx">HttpErrorResponse</span><span class="p">){</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">oh no:(</span><span class="dl">'</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">do something fancy</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Ps: I’m not trying to say that this is the best idea to catch errors. I’m just showing you around some basics.</p>

<p>Do note that the <code class="language-plaintext highlighter-rouge">catchError</code> operator is applied to the result observable that <code class="language-plaintext highlighter-rouge">fetchData()</code> returns, and not added as the second operator of the first pipe. 
From the moment an observable receives an error, it will die… That’s why it’s important to catch the error on the inner observable.</p>

<h2 id="retrywhen">retryWhen</h2>

<p>Ok, great! The application won’t break anymore, but now imagine the following scenario: Our user is sitting in the train and drives through a tunnel. The connection is gone for a few seconds and the user won’t get results.</p>

<p>We could fix that by telling RxJS to retry a few times</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">searchTerm$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> 
        <span class="nx">fetchData</span><span class="p">(</span><span class="nx">term</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span>
            <span class="nx">retryWhen</span><span class="p">(</span><span class="nx">e$</span> <span class="o">=&gt;</span> <span class="nx">e$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
                <span class="c1">// try again after 2 seconds</span>
                <span class="nx">delay</span><span class="p">(</span><span class="mi">2000</span><span class="p">),</span>
                <span class="c1">// stop trying after 5 times</span>
                <span class="nx">take</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
            <span class="p">)</span>
            <span class="c1">// still keep the observable alive if</span>
            <span class="c1">// the first 5 times fail</span>
            <span class="nx">catchError</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="k">of</span><span class="p">(</span><span class="nx">e</span><span class="p">))</span>
        <span class="p">)</span>
    <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<p>You can find more information about <code class="language-plaintext highlighter-rouge">retryWhen</code><a href="https://www.learnrxjs.io/operators/error_handling/retrywhen.html">here</a></p>

<h2 id="using-the-online-event">Using the online event</h2>

<p>Even though this is a good solution, there is room for improvement. A great choice is to use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/Online_and_offline_events">online</a> event from HTML5 to tell the browser to retry when the user regains internet connection. It’s even shorter than before and it’s super elegant</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">searchTerm$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> 
        <span class="nx">fetchData</span><span class="p">(</span><span class="nx">term</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span>
            <span class="nx">retryWhen</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">fromEvent</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="dl">'</span><span class="s1">online</span><span class="dl">'</span><span class="p">))</span>
            <span class="c1">// still keep the observable alive if</span>
            <span class="c1">// the server would return a different</span>
            <span class="c1">// HTTP error</span>
            <span class="nx">catchError</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="k">of</span><span class="p">(</span><span class="nx">e</span><span class="p">))</span>
        <span class="p">)</span>
    <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>RxJS gives us great control over HTTP calls! If we know how error handling works it becomes a breeze to take our HTTP calls to the next level.
This doesn’t only apply to typeahead searches but to every observable where we combine an existing stream with an error-affected one like HTTP. For instance: this can also happen in NgRx effects or with the angular router.</p>

<p>There, I told you it would be short, I hope you learned something though.</p>

<p>Also be sure to check this article: <a href="https://blog.angularindepth.com/power-of-rxjs-when-using-exponential-backoff-a4b8bde276b0">Power of RxJS when using exponential backoff</a></p>

<h2 id="special-thanks">Special thanks</h2>

<ul>
  <li><a href="https://twitter.com/AmarildoKurtaj">@AmarildoKurtaj</a> The last example was based on his idea</li>
</ul>

<p>Reviewers:</p>
<ul>
  <li><a href="https://twitter.com/fmalcher01">Ferdinand Malcher</a></li>
  <li><a href="https://twitter.com/FabianGosebrink">Fabian Gosebrink</a></li>
  <li><a href="https://twitter.com/tim_deschryver">Tim deschryver</a></li>
  <li><a href="https://twitter.com/webdave_de">David Müllerchen</a></li>
  <li><a href="https://twitter.com/rubenverm">Ruben Vermeulen</a></li>
</ul>]]></content><author><name>brechtbilliet</name></author><category term="brechtbilliet" /><category term="RxJS" /><summary type="html"><![CDATA[How to make sure our ajax calls are being executed on bad connections]]></summary></entry><entry><title type="html">Building a safe autocomplete operator in RxJS</title><link href="http://localhost:4000/building-a-safe-autocomplete-operator-with-rxjs/" rel="alternate" type="text/html" title="Building a safe autocomplete operator in RxJS" /><published>2018-07-13T00:00:00+02:00</published><updated>2018-07-13T00:00:00+02:00</updated><id>http://localhost:4000/building-a-safe-autocomplete-operator-with-rxjs</id><content type="html" xml:base="http://localhost:4000/building-a-safe-autocomplete-operator-with-rxjs/"><![CDATA[<p>A well-known use case of RxJS is creating a simple autocomplete search in only a few lines of code.
This article is not just about creating our own autocomplete operator, we will create an autocomplete operator that is completely safe (we will cover the perception of safe later in this article).</p>

<p>When creating a standard autocomplete with RxJS we most likely implement a <code class="language-plaintext highlighter-rouge">debounceTime</code> operator to throttle the text that the user is typing into the autocomplete and we use a <code class="language-plaintext highlighter-rouge">switchMap</code> operator instead of a <code class="language-plaintext highlighter-rouge">mergeMap</code> operator to abort previous calls.</p>

<p>The implementation of this autocomplete might look like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">term$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">term$</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
        <span class="c1">// wait until the user stops typing for a second</span>
        <span class="nx">debounceTime</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span>
        <span class="c1">// higher order observable, abort previous</span>
        <span class="c1">// call if still busy</span>
        <span class="nx">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> <span class="nx">getAutocompleteSuggestions</span><span class="p">(</span><span class="nx">term</span><span class="p">))</span>
    <span class="p">)</span>
</code></pre></div></div>

<h2 id="the-problem">The problem</h2>

<p>When the user stops typing for 1 second, the browser will create a new XHR call. From that moment on, when the user types again and a previous XHR call is still busy, the browser will abort that XHR call to avoid racing conditions, and create a new XHR call. This is due to the <code class="language-plaintext highlighter-rouge">switchMap</code> operator since it will unsubscribe from the previous observable.</p>

<p>Although that’s great, there is one problem though. What if the user starts typing again when an XHR call is still busy? 
Since we have implemented a <code class="language-plaintext highlighter-rouge">debounceTime</code> operator, the call will not be aborted until one second has passed.
In that period of time new results might be returned and showed to the user, which might not be what we want since <strong>they are not relevant anymore</strong>.</p>

<p>What we want is that the XHR call gets aborted from the moment the user starts typing again, we don’t want to wait for a second.
This sounds like an ideal scenario to write our custom operator.
But, before creating our own operator, let’s just combine some operators to get the job done.</p>

<p>A possible solution for this problem is using a <code class="language-plaintext highlighter-rouge">takeUntil</code> operator on the observable that will trigger the XHR call.
The <code class="language-plaintext highlighter-rouge">takeUntil</code> operator will complete the observable as soon as it gets a value. We want to complete (and therefore abort) the observable when the user types again. With that knowledge we can write something like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">term$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">term$</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
        <span class="nx">debounceTime</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span>
        <span class="nx">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> 
            <span class="nx">getAutocompleteSuggestions</span><span class="p">(</span><span class="nx">term</span><span class="p">)</span>
                <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
                    <span class="nx">takeUntil</span><span class="p">(</span><span class="nx">term$</span><span class="p">)</span> <span class="c1">// this still won't work</span>
                <span class="p">)</span>
            <span class="p">)</span>
        <span class="p">)</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>Sadly, this does not work yet.</p>

<p>Our <code class="language-plaintext highlighter-rouge">term$</code> observable is a <code class="language-plaintext highlighter-rouge">BehaviorSubject</code> for two reasons:</p>
<ul>
  <li>We want to pass an initial value to the subject</li>
  <li>A <code class="language-plaintext highlighter-rouge">BehaviorSubject</code> is a <code class="language-plaintext highlighter-rouge">ReplaySubject(1)</code> behind the scenes that keeps track of the last value. This is important if we want to subscribe to that observable in a later stage (which is kinda what we do with the <code class="language-plaintext highlighter-rouge">takeUntil</code> operator).</li>
</ul>

<p>Because the <code class="language-plaintext highlighter-rouge">term$</code> observable is keeping track of the last value, the <code class="language-plaintext highlighter-rouge">takeUntil</code> operator will always have a value, resulting in the fact that every XHR call gets aborted immediately. This is not what we want.
We want to skip one value of the <code class="language-plaintext highlighter-rouge">term$</code> observable every time.
We can achieve that with the <code class="language-plaintext highlighter-rouge">skip</code> operator as shown in the following example:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">term$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">term$</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
        <span class="nx">debounceTime</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span>
        <span class="nx">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> 
            <span class="nx">getAutocompleteSuggestions</span><span class="p">(</span><span class="nx">term</span><span class="p">)</span>
                <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
                    <span class="nx">takeUntil</span><span class="p">(</span>
                        <span class="c1">//skip 1 value</span>
                        <span class="nx">term$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">skip</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
                    <span class="p">)</span>
                        
                <span class="p">)</span>
            <span class="p">)</span>
        <span class="p">)</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>Now the following scenario works:</p>
<ul>
  <li>User types ‘l’</li>
  <li>Application waits for a second</li>
  <li>Application creates an XHR call</li>
  <li>User types ‘lu’</li>
  <li>Even though the XHR call wasn’t finished yet it gets aborted immediately (it doesn’t wait for a second anymore to abort that XHR call)</li>
</ul>

<p>Because of that the user never gets irrelevant data on its screen.</p>

<h2 id="extracting-the-logic-into-a-custom-operator">Extracting the logic into a custom operator</h2>

<p>We don’t want to write this logic every time, so let’s extract this logic into a custom written operator.</p>

<p>Turns out that creating custom operators is super easy. An operator is just a function that returns a function that gets the source observable.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">autocomplete</span> <span class="o">=</span> <span class="p">(</span><span class="cm">/* additional parameters */</span><span class="p">)</span> <span class="o">=&gt;</span> 
    <span class="p">(</span><span class="nx">source$</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">source$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="cm">/* do stuff */</span> <span class="p">)</span>
</code></pre></div></div>

<p>We can pass the <code class="language-plaintext highlighter-rouge">time</code> and <code class="language-plaintext highlighter-rouge">selector</code> function as parameters and use the operators we have written to create our own custom operator.
The operator looks like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">autocomplete</span> <span class="o">=</span> <span class="p">(</span><span class="nx">time</span><span class="p">,</span> <span class="nx">selector</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">source$</span><span class="p">)</span> <span class="o">=&gt;</span>
  <span class="nx">source$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">debounceTime</span><span class="p">(</span><span class="nx">time</span><span class="p">),</span>
    <span class="nx">switchMap</span><span class="p">((...</span><span class="nx">args</span><span class="p">:</span> <span class="kr">any</span><span class="p">[])</span> <span class="o">=&gt;</span> <span class="nx">selector</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
            <span class="nx">takeUntil</span><span class="p">(</span>
                <span class="nx">source$</span>
                    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
                        <span class="nx">skip</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
                    <span class="p">)</span>
            <span class="p">)</span>
        <span class="p">)</span>
    <span class="p">)</span>
  <span class="p">)</span>
</code></pre></div></div>

<p>Using our operator is super easy:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">term$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">term$</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
        <span class="nx">autocomplete</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="nx">term</span> <span class="o">=&gt;</span> <span class="nx">getAutocompleteSuggestions</span><span class="p">(</span><span class="nx">term</span><span class="p">))</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>You can find the sourcecode on stackblitz.</p>
<iframe src="https://stackblitz.com/edit/safe-switchmap?embed=1&amp;file=src/app/app.component.ts" style="width: 100%; height: 500px"></iframe>

<h2 id="conclusion">Conclusion</h2>

<p>The combination of <code class="language-plaintext highlighter-rouge">debounceTime</code> and <code class="language-plaintext highlighter-rouge">switchMap</code> don’t always cover everything. Showing irrelevant data to our users might not be what we want and creating our own operators is super easy! I hope you enjoyed the article.</p>

<h2 id="special-thanks">Special thanks</h2>

<p>A special thanks for the awesome reviewers:</p>

<ul>
  <li>Nicholas Jamieson <a href="https://twitter.com/ncjamieson">@ncjamieson</a></li>
  <li>Philippe Martin <a href="https://twitter.com/feloy2">@feloy2</a></li>
  <li>Jan-Niklas Wortmann <a href="https://twitter.com/niklas_wortmann">@niklas_wortmann</a></li>
  <li>Maarten Tibau <a href="https://twitter.com/maartentibau">@maartentibau</a></li>
  <li>Kwinten Pisman <a href="https://twitter.com/kwintenp">@kwintenp</a></li>
</ul>]]></content><author><name>brechtbilliet</name></author><category term="RxJS" /><summary type="html"><![CDATA[A well-known use case of RxJS is creating a simple autocomplete search in only a few lines of code. This article is not just about creating our own autocomplete operator, we will create an autocomplete operator that is completely safe (we will cover the perception of safe later in this article).]]></summary></entry><entry><title type="html">Thinking reactive with the SIP principle</title><link href="http://localhost:4000/the-sip-principle/" rel="alternate" type="text/html" title="Thinking reactive with the SIP principle" /><published>2018-06-30T00:00:00+02:00</published><updated>2018-06-30T00:00:00+02:00</updated><id>http://localhost:4000/the-sip-principle</id><content type="html" xml:base="http://localhost:4000/the-sip-principle/"><![CDATA[<p>A few months back we released <a href="https://blog.strongbrew.io/rxjs-best-practices-in-angular/">RxJS best practices in Angular</a> and a while before that <a href="https://blog.strongbrew.io/thinking-reactively-in-angular-and-rxjs/">Thinking reactively in Angular and RxJS</a>. 
Both of these articles are focussing on “trying to make the mind switch towards reactive programming”.</p>

<p>However, sometimes we like to have structured opinionated ways of tackling problems, especially when things become complex. We like a roadmap of some kind, something to fall back on, something to guide us through these complex reactive scenarios.</p>

<p>While writing RxJS code for small pragmatic solutions can be super easy, it might become complex when combining multiple streams or doing other advanced stuff.</p>

<p>We as StrongBrew are huge fans of reactive programming and we use our reactive mindset in Angular on a daily basis.
In this article we will learn a principle that helps us to tackle very complex RxJS situations in an opinionated structured way.</p>

<p>The code of this article is written with <a href="https://angular.io">Angular</a> but the concepts can be used with every framework.</p>

<h2 id="the-situation">The situation</h2>

<p>We are going to build an application to search for starships in the <a href="https://swapi.co">swapi api</a>. The application counts a few features:</p>
<ul>
  <li>It has to load data on page load</li>
  <li>The user can search for starships by entering text in the searchbox</li>
  <li>The user can load starships by a chosen model</li>
  <li>The user can load starships by a random model</li>
  <li>There is a loading indicator that needs to be shown when the data is being loaded</li>
  <li>Previous XHR calls should be canceled to avoid race conditions</li>
  <li>We want to filter the results by the number of passengers allowed on the ship. <strong>Note: This is a clientside filter</strong></li>
</ul>

<p>As we can see, there is quite a lot of asynchronous logic going on here, and if we would implement this in an imperative way, it would be pretty hard to keep it simple. However, the application can easily be written with the use of RxJS. In this application we don’t want to think in actions anymore, we want to think in streams of data. <strong>Everything is a stream!</strong></p>

<h2 id="the-sip-principle">The SIP principle</h2>
<p>With StrongBrew, we came up with a simple principle of handling this reactive mindset. We call it the <strong>SIP principle</strong>.
The SIP principle stands for the following:</p>
<ul>
  <li>S: Source streams</li>
  <li>I: Intermediate streams</li>
  <li>P: Presentation streams</li>
</ul>

<h3 id="source-streams">Source streams</h3>

<p>These streams will contain all the user interaction. They are generally bound to the outputs of our dumb components. A source stream could also contain real-time data, but we won’t cover that part in this article.
Let’s have a look at our application and look for the source streams there:
(the left column pretty much contains all the user interaction)
<img src="/assets/images/posts/sip-principle/source-streams.png" alt="Source streams" /></p>

<p>After executing the first step of the SIP principle we have found 4 source streams.
<code class="language-plaintext highlighter-rouge">searchTerm$</code>, <code class="language-plaintext highlighter-rouge">selectedModel$</code>, <code class="language-plaintext highlighter-rouge">randomModel$</code> and <code class="language-plaintext highlighter-rouge">numberOfPassengers$</code>.</p>

<p>What’s important to note here is that we named these streams as <strong>streams of data</strong> rather than naming them as streams of actions. We want to stop thinking in actions and start thinking in streams of data, remember? That’s why we didn’t name the first stream <code class="language-plaintext highlighter-rouge">search$</code> (which would be an action), we rather named it <code class="language-plaintext highlighter-rouge">searchTerm$</code> so we know it contains a search term.</p>

<p>Source streams are <strong>mostly subjects</strong> or streams that come from the framework, e.g. a routing params stream.</p>

<p>In our application the source streams will look like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">searchTerm$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReplaySubject</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">selectedModel$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReplaySubject</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">randomModel$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReplaySubject</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="c1">// needs an initial value</span>
<span class="nx">numberOfPassengers$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="p">(</span><span class="mi">1000000</span><span class="p">);</span> 
</code></pre></div></div>

<p>These subjects will be populated by the outputs as shown below:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;sidebar</span> 
    <span class="na">(search)=</span><span class="s">"searchTerm$.next($event)"</span>
    <span class="na">(selectModel)=</span><span class="s">"selectedModel$.next($event)"</span>
    <span class="na">(randomModel)=</span><span class="s">"randomModel$.next($event)"</span>
    <span class="na">(changeNumberOfPassengers)=</span><span class="s">"numberOfPassengers$.next($event)"</span>
<span class="nt">&gt;</span>
<span class="nt">&lt;/sidebar&gt;</span>
...
</code></pre></div></div>

<h3 id="presentation-streams">Presentation streams</h3>

<p>After finding the source streams we need to find the presentation streams.
These are the streams that our template needs to render properly. These are quite easy to find. We just have to look at the template and see which inputs our components expect. We can have a look at our template. (The outputs are stripped for readability purposes).</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;sidebar</span> <span class="na">class=</span><span class="s">"sidebar"</span> 
    <span class="na">[models]=</span><span class="s">"fixedModels"</span> 
    <span class="na">[numberOfPassengers]=</span><span class="s">""</span>
  <span class="nt">&gt;</span>
  <span class="nt">&lt;/sidebar&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"main"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;starship-list</span> 
        <span class="na">[starships]=</span><span class="s">""</span>
        <span class="na">[loading]=</span><span class="s">""</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/starship-list&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>We can instantly see that we need 3 presentation streams:
We need the number of passengers, the starships that need to be shown and whether the application is loading or not. Let’s fill in the blanks, shall we?!</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;sidebar</span> <span class="na">class=</span><span class="s">"sidebar"</span> 
    <span class="na">[models]=</span><span class="s">"fixedModels"</span> 
    <span class="na">[numberOfPassengers]=</span><span class="s">"numberOfPassengers$|async"</span>
  <span class="nt">&gt;</span>
  <span class="nt">&lt;/sidebar&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"main"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;starship-list</span> 
        <span class="na">[starships]=</span><span class="s">"filteredResults$|async"</span>
        <span class="na">[loading]=</span><span class="s">"loading$|async"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/starship-list&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>So after step 2 we have found the following presentation streams: <code class="language-plaintext highlighter-rouge">numberOfPassengers$</code>, <code class="language-plaintext highlighter-rouge">filteredResults$</code> and <code class="language-plaintext highlighter-rouge">loading$</code>.</p>

<h3 id="starting-with-the-sip-diagram">Starting with the SIP diagram</h3>

<p>Let’s visualize these streams by creating a SIP diagram:</p>

<p><img src="/assets/images/posts/sip-principle/sp.png" alt="Source streams, presentation streams" /></p>

<p>The goal is to calculate the presentation streams, based on the source streams. There are 2 presentation streams that we need to calculate: <code class="language-plaintext highlighter-rouge">filteredResults$</code> and <code class="language-plaintext highlighter-rouge">loading$</code>. We don’t need to calculate <code class="language-plaintext highlighter-rouge">numberOfPassengers$</code> since it’s the same stream as the source stream.</p>

<p>Let’s start with the <code class="language-plaintext highlighter-rouge">filteredResults$</code>. The <code class="language-plaintext highlighter-rouge">filteredResults$</code> is dependent on <code class="language-plaintext highlighter-rouge">searchTerm$</code>, <code class="language-plaintext highlighter-rouge">selectedModel$</code>, <code class="language-plaintext highlighter-rouge">randomModel$</code> and <code class="language-plaintext highlighter-rouge">numberOfPassengers$</code>. To make this calculation easier we can use intermediate streams.</p>

<h3 id="intermediate-streams">Intermediate streams</h3>

<p>Intermediate streams are streams that are used to make the bridge between the source streams and presentation streams easier.
Let’s create a <code class="language-plaintext highlighter-rouge">query$</code> stream and a <code class="language-plaintext highlighter-rouge">results$</code> stream to make the calculation easier.</p>

<p><img src="/assets/images/posts/sip-principle/sip1.png" alt="SIP 1" /></p>

<p>We will use custom marble diagrams to visualize the different parts of the SIP diagram throughout this article.</p>

<h4 id="calculating-the-query">Calculating the query$</h4>

<p>The first intermediate stream that we have to create is the <code class="language-plaintext highlighter-rouge">query$</code> which is simply a merge from the <code class="language-plaintext highlighter-rouge">searchTerm$</code>, <code class="language-plaintext highlighter-rouge">selectedModel$</code> and <code class="language-plaintext highlighter-rouge">randomModel$</code>.</p>

<p><img src="/assets/images/posts/sip-principle/query.png" alt="Query" /></p>

<p>As we can see these 3 streams are being merged into one new <code class="language-plaintext highlighter-rouge">query$</code>. We don’t have to worry about when a user searches or selects a model, or even requests a random model. We only care about that simple stream of data, the <code class="language-plaintext highlighter-rouge">query$</code>.</p>

<h4 id="calculating-the-results">Calculating the results$</h4>

<p>Every time the <code class="language-plaintext highlighter-rouge">query$</code> gets a new value we want to fetch data from the API. For that we will use the <code class="language-plaintext highlighter-rouge">switchMap</code> operator.</p>

<p><img src="/assets/images/posts/sip-principle/results.png" alt="Results" /></p>

<h4 id="calculating-filteredresults">Calculating filteredResults$</h4>

<p>We are ready to finish up the <code class="language-plaintext highlighter-rouge">filteredResults$</code> stream.
If we look back at the previous SIP diagram we can see that we can create that stream by combining the <code class="language-plaintext highlighter-rouge">results$</code> and the <code class="language-plaintext highlighter-rouge">numberOfPassengers$</code>.</p>

<p><img src="/assets/images/posts/sip-principle/filteredResults.png" alt="Filtered results" /></p>

<h4 id="the-loading">The loading$</h4>

<p>The next presentation stream that we want to create is called the <code class="language-plaintext highlighter-rouge">loading$</code>. Let’s update the SIP diagram accordingly. The <code class="language-plaintext highlighter-rouge">loading$</code> is based on the <code class="language-plaintext highlighter-rouge">query$</code> and the <code class="language-plaintext highlighter-rouge">results$</code>.</p>

<p><img src="/assets/images/posts/sip-principle/sip2.png" alt="sip 2" /></p>

<p>Every time the <code class="language-plaintext highlighter-rouge">query$</code> gets a new value the <code class="language-plaintext highlighter-rouge">loading$</code> should get the value <code class="language-plaintext highlighter-rouge">true</code>. Everytime the <code class="language-plaintext highlighter-rouge">result$</code> gets a new value the <code class="language-plaintext highlighter-rouge">loading$</code> should get the value <code class="language-plaintext highlighter-rouge">false</code>.
So if we map every value of the <code class="language-plaintext highlighter-rouge">query$</code> to <code class="language-plaintext highlighter-rouge">true</code> and if we map every value of the <code class="language-plaintext highlighter-rouge">results$</code> to <code class="language-plaintext highlighter-rouge">false</code>, and merge those 2, we have created our <code class="language-plaintext highlighter-rouge">loading$</code> stream.</p>

<p>Let’s create one last marble diagram for that.
<img src="/assets/images/posts/sip-principle/loading.png" alt="Loading" /></p>

<h3 id="what-do-we-need-to-share">What do we need to share?</h3>

<p>We have came a long way, we have created the complete SIP diagram. We have visualized all the streams by creating marble diagrams, but if we look closely at the SIP diagram we might notice a problem.
There are 2 arrows leaving the <code class="language-plaintext highlighter-rouge">query$</code> and 2 arrows leaving the <code class="language-plaintext highlighter-rouge">results$</code>. Every arrow stands for a subscription on the observable where the arrow starts.
When working with cold observables, the producer function for that observable is executed every time we subscribe. Since <code class="language-plaintext highlighter-rouge">query$</code> is a hot stream, it doesn’t really matter, but <code class="language-plaintext highlighter-rouge">results$</code> will trigger an HTTP call every time it gets subscribed to. In short: the subscription on <code class="language-plaintext highlighter-rouge">loading$</code> and <code class="language-plaintext highlighter-rouge">filteredResults$</code> will trigger a subscription on <code class="language-plaintext highlighter-rouge">results$</code> twice. The SIP diagram show us which subscriptions need to be shared.</p>

<p><img src="/assets/images/posts/sip-principle/sip3.png" alt="sip3" /></p>

<h2 id="check-it-out">Check it out</h2>

<p>The SIP diagram is complete now and we can start coding. Since this article is really about the SIP principle I won’t explain the code in detail. However, you can find the complete code in the StackBlitz below.</p>
<iframe src="https://stackblitz.com/edit/sip-principle?embed=1&amp;file=app/app.component.ts" style="width: 100%; height: 500px"></iframe>

<h2 id="conclusion">Conclusion</h2>

<p>Before starting with implementing complex RxJS screens. Take a whiteboard and draw the flow first. The SIP principle that we created works for us but isn’t the only way to go of course.</p>

<p>If you check the code inside the StackBlitz, you might be surprised about the amount of lines of code that we need to create this application. We have only a few lines of real logic, and we have covered most corner cases by thinking reactive.</p>

<p>Because of the use of the <code class="language-plaintext highlighter-rouge">async</code> pipe we don’t need to unsubscribe from any stream manually since the <code class="language-plaintext highlighter-rouge">async</code> pipe does that for us.</p>

<h2 id="special-thanks">Special thanks</h2>

<p><a href="https://twitter.com/jvandemo">Jurgen van de Moere</a> for helping us with finding the right acronym.</p>

<p>And the awesome reviewers:</p>
<ul>
  <li><a href="https://twitter.com/manfredsteyer">Manfred Steyer</a></li>
  <li><a href="https://twitter.com/niklas_wortmann">Jan-Niklas Wortmann</a></li>
  <li><a href="https://twitter.com/tim_deschryver">Tim Deschryver</a></li>
  <li><a href="https://twitter.com/webdave_de">David Müllerchen</a></li>
</ul>]]></content><author><name>brechtbilliet</name></author><category term="RxJS" /><summary type="html"><![CDATA[A few months back we released RxJS best practices in Angular and a while before that Thinking reactively in Angular and RxJS. Both of these articles are focussing on “trying to make the mind switch towards reactive programming”.]]></summary></entry></feed>